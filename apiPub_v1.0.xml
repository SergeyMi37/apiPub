<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for UNIX (Apple Mac OS X for x86-64) 2019.1.1 (Build 612_0_19677U)" ts="2020-09-25 12:32:25">
<Class name="apiPub.core.converter">
<Super>apiPub.core.jsonBuilder</Super>
<TimeChanged>65611,57597.268024</TimeChanged>
<TimeCreated>65560,31536.940369</TimeCreated>

<Method name="JSONToObj">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSON:%Library.DynamicObject,pClassName:%String,*pObj</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
    Try
	{
        //Verify if object needs to be wrapped
        Set jkey=""
        Set tIt = pJSON.%GetIterator()
        Do tIt.%GetNext(.jkey,.jvalue)
        If jkey'=$Piece(pClassName,".",*) {
            Set tAuxJSON = {}
            Do tAuxJSON.%Set($Piece(pClassName,".",*),pJSON)
            Set pJSON=tAuxJSON
        }    
        Set tSC = ..JSONToXML(pJSON,.tXml,{"printResults":0})
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = ..XMLToObj(tXml,pClassName,.pObj)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Kill tXml
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="XMLToObj">
<ClassMethod>1</ClassMethod>
<FormalSpec>pXmlStream:%AbstractStream,pClassName:%String,*pObj</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
    Try
	{
        Set tClassDefinition=##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
        If ('$Isobject(tClassDefinition)) {
            Set tSC = $$$ERROR($$$GeneralError, "Invalid Class Name ("_pClassName_")")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
        Set tReader = ##class(%XML.Reader).%New()
        Set tSC = tReader.OpenStream(pXmlStream)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tReader.CheckRequired = 1
        // Associate a class name with the XML element name
        Do tReader.Correlate($Piece(pClassName,".",*),pClassName)
        // Read object from xml file
        Do tReader.Next(.pObj,.tSC)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        If '$Data(pObj)||'($IsObject(pObj)) {
            Set tSC = $$$ERROR($$$GeneralError, "Invalid Inputed Object")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
        Do tReader.Close()
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ObjToJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj:%RegisteredObject,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
	{
        If '$Data(pParams) Set pParams={}
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pUseCacheDefinition = $Select(pParams.useCacheDefinition'="":pParams.useCacheDefinition,1:1)
        Set pUnwappObject = $Select(pParams.unwappObject'="":pParams.unwappObject,1:1)
        If '$Data(pObj)||'($IsObject(pObj)) {
            Set tSC = $$$ERROR($$$GeneralError, "Invalid Object")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
        Set tClassName = pObj.%PackageName()_"."_pObj.%ClassName()
        Set tSC = ##class(apiPub.core.irisMetadata).ClassNameToXSDInfo(tClassName,.tXsdInfo,{"printResults":0})
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tWt=##class(%XML.Writer).%New()
        Set tWt.Indent=1
        Do tWt.OutputToStream(.tXML)
        Do tWt.RootObject(pObj)
        Set pParams.noNamedRoot = "@null"
        Set pParams.noNamedElement = "@null"
        Set tSC = ..XMLToJSON(tXML,tXsdInfo,.tJson,pParams,)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        //Unwapp
        If (pUnwappObject),tJson.%Size()=1 { 
            Set tIt = tJson.%GetIterator()
            Do tIt.%GetNext(.key,.obj)
            If '$IsObject(obj) Set obj = {}
            Set pJSON=obj
        } Else {
            Set pJSON=tJson
        }
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="JSONToXML">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pJSON:%Library.DynamicObject,*pXmlStream:%AbstractStream,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject,&pWriter:%XML.Writer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try
	{
        Set tSC = $System.Status.OK()

        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pRootName = $Select(pParams.noNamedRoot'="":pParams.noNamedRoot,1:"Root")
        Set pNoNamedArray = $Select(pParams.noNamedElement'="":pParams.noNamedElement,1:"Element")
        Set pAttPrefix = $Select(pParams.attributePrefix'="":pParams.attributePrefix,1:"_")
        Set pCharsKey = $Select(pParams.charsKey'="":pParams.charsKey,1:"value")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)

        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"", "parentType":"", "level":0, "rootDefined":""}
        Set pLevel = pInternal.level
        Set pRootDefined = pInternal.rootDefined
        Set pParentKey = pInternal.parentKey
        Set pParentType = pInternal.parentType

		If pParentType="" {
            Set pRootDefined=0
			Set pJSON = {}.%FromJSON(pJSON.%ToJSON())
            Set pWriter=##class(%XML.Writer).%New()
            Set pWriter.Indent=1
            Set tSC = pWriter.OutputToStream(.pXmlStream)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set tSC=pWriter.StartDocument()
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set tRootNeeded=0
            If $ClassName(pJSON)="%Library.DynamicArray" {
                Set tRootNeeded = 1
            }
            If $ClassName(pJSON)="%Library.DynamicObject" {
                Set tRootName=""
                Set prop = pJSON.%GetIterator()
                While (prop.%GetNext(.key,.value)) {
                    If tRootName'="" Set tRootNeeded=1  Quit
                    If '$IsObject(value) Set tRootNeeded=1  Quit
					If $ClassName(value)'="%Library.DynamicObject" Set tRootNeeded=1  Quit
                    Set tRootName=key
                }
            }
            If $ClassName(pJSON)="%Library.DynamicArray" {
                Set tKey=pNoNamedArray
            }
            If tRootNeeded=1 {
                Set pRootDefined = 1
                Set tSC=pWriter.RootElement(pRootName)
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
			Do ..JSONToXML(pJSON,.pXmlStream,pParams,{"parentKey":(pNoNamedArray), "parentType":($Select($ClassName(pJSON)="%Library.DynamicArray":"array",1:"object")), "level":(pLevel), "rootDefined":(pRootDefined)},pWriter)
            If tRootNeeded=1 {
                Set tSC=pWriter.EndRootElement()
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
            Set tSC=pWriter.EndDocument()
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            If pPrintResults {
                Write !
                While 'pXmlStream.AtEnd {
                    Write pXmlStream.Read(),!
                }
            }
		} Else {
            //First Attributes
            Set tRootDefined = pRootDefined
			Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
                If '$IsObject(value) {
                    If (pAttPrefix="")||($Extract(key,1,1)=pAttPrefix) {
                        Set tSC=pWriter.WriteAttribute($Extract(key,$Select(pAttPrefix="":1,1:2),*),value)
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                }
            }
			Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
                Set tParentElName = $Piece($Select(pParentKey="":"Root",1:pParentKey),pDelim,*)
                If tParentElName=+tParentElName Set tParentElName = pNoNamedArray
				Set tElName = $Select(key=+key:tParentElName,1:key)
                Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select(key'="":key, 1:"")
                If $IsObject(value) {
                    If ($ClassName(value)="%Library.DynamicObject")||(pParentType="array"){
                        If tRootDefined=0 {
                            Set pRootDefined=1
                            Set tSC=pWriter.RootElement(tElName)
                        } Else {
                            Set tSC=pWriter.Element(tElName)
                        }
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                    Do ..JSONToXML(value,.pXmlStream,pParams,{"parentKey":(tKey), "parentType":($Select($ClassName(value)="%Library.DynamicArray":"array",1:"object")), "level":(pLevel+1), "rootDefined":(pRootDefined)},pWriter)
                    If ($ClassName(value)="%Library.DynamicObject")||(pParentType="array"){
                        If tRootDefined=0 {
                            Set tSC=pWriter.EndRootElement()
                        } Else {
                            Set tSC=pWriter.EndElement()
                        }
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                } Else {
                    If pAttPrefix'="",$Extract(key,1,1)'=pAttPrefix {
                        If key=pCharsKey {
							//Treat Special Characters CDATA
                            If value'=$Char(10),($Find(value, $Char(10))>0)||($Find(value, $Char(13))>0)||($Find(value,$Char(92))>0)||($Find(value,$Char(60))>0)||($Find(value,$Char(62))>0) {
                                Set tSC=pWriter.WriteCData(value)
                            } Else {
                                Set tSC=pWriter.WriteChars(value)
                            }
                            //Set tSC=pWriter.WriteChars(value)
							If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        } Else {
                            Set tSC=pWriter.Element(tElName)
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
							//Treat Special Characters As CDATA
                            If value'=$Char(10),($Find(value, $Char(10))>0)||($Find(value, $Char(13))>0)||($Find(value,$Char(92))>0)||($Find(value,$Char(60))>0)||($Find(value,$Char(62))>0) {
                                Set tSC=pWriter.WriteCData(value)
                            } Else {
                                Set tSC=pWriter.WriteChars(value)
                            }
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                            Set tSC=pWriter.EndElement()
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        }
                    }
                }
			}
            
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="XMLToJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pXmlStream:%AbstractStream,pXSDInfo:%Library.DynamicObject,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject,&pNode:%XML.Node]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        If '$Data(pXSDInfo) Set pXSDInfo={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pAttributePrefix = $Select(pParams.attributePrefix'="":pParams.attributePrefix,1:"_")
        Set pInferTypes = $Select(pParams.inferTypes'="":pParams.inferTypes,1:0)
        Set pWithNSPrefix = $Select(pParams.withNSPrefix'="":pParams.withNSPrefix,1:1)
        Set pShowAttQName = $Select(pParams.showAttQName'="":pParams.showAttQName,1:1)
        Set pCharsKey = pParams.charskey
        Set pRootName = $Select(pParams.noNamedRoot'="":pParams.noNamedRoot,1:"Root")
        Set pNoNamedArray = $Select(pParams.noNamedElement'="":pParams.noNamedElement,1:"Element")
        Set pListOfArrays = $Select(pParams.listOfArrays'="":pParams.listOfArrays,1:[])
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pObjIsArray = $Select(pParams.objIsArray'="":pParams.objIsArray,1:0)
        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"","parentName":"","parentSName":"","level":-1,"arrayCtrlIdx":{},"arrayCtrlName":{}, "xmlJSON":{}, "build":0}

        If '$Data(pXSDInfo) Set pXSDInfo = {"list":{},"types":{},"circularRef":{}}
        Set pParentKey = pInternal.parentKey
        Set pParentName = pInternal.parentName
        Set pParentSName = pInternal.parentSName
        Set pLevel = pInternal.level
        Set pBuild = pInternal.build
        Set pXMLJSON = pInternal.xmlJSON
		If pLevel=-1 {
            Set pInternal.level = 0
            Set tSC = ##class(%XML.Document).GetDocumentFromStream(pXmlStream,.pXMLDoc)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            //Force Node to be An Array
            If $IsObject(pListOfArrays) {
                Set prop = pListOfArrays.%GetIterator()
                While (prop.%GetNext(.key,.value)) {
                    Do pInternal.arrayCtrlName.%Set(value,0)
                }        
            }
            //CountNodes
            Set pNode = pXMLDoc.GetDocumentElement()
			Set tSC = ..XMLToJSON(pXmlStream,pXSDInfo,.pJSON,pParams,pInternal,pNode)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            
            Set pInternal={"parentNameKey":"","parentKey":"","level":0,"arrayCtrlIdx":(pInternal.arrayCtrlIdx),"arrayCtrlName":(pInternal.arrayCtrlName),"xmlJSON":{}, "build":1}
            Set pNode = pXMLDoc.GetDocumentElement()
			Set tSC = ..XMLToJSON(pXmlStream,pXSDInfo,.pJSON,pParams,pInternal,pNode)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            Set pJSON = pInternal.xmlJSON
            If (pPrintResults) {
                Write !,"JSON",!
                Write "============",!
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pJSON.%ToJSON(),.jsonString)
                Write jsonString
            }
		} Else {
            Set tIdx=""
            Set key = pNode.NodeData
            Do {
                If pNode.NodeType = 0 {
                    If pWithNSPrefix Set key = pNode.QName
                    Set tText=""
                    Set status = pNode.GetText(.tText)
                    If 'status Set tText = ""
                    Set tAttCount=pNode.GetNumberAttributes()

                    Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select((key'=pRootName)&&(key'=""):key, 1:"")
                    Set tName = $Select(pParentName'="":pParentName_pDelim, 1:"")_$Select((key'=pRootName)&&(key'=""):key, 1:"")
                    Set tSName = $Select(pParentSName'="":pParentSName_pDelim, 1:"")_$Select((key'=pRootName)&&(key'=""):key, 1:"")
                    If pXSDInfo.%Get("circularRef").%Get(tSName)'="" Set tSName = pXSDInfo.%Get("circularRef").%Get(tSName)
                    If (tKey'=""),'pBuild {
                        Set tIdx=pInternal.%Get("arrayCtrlIdx").%Get(tKey)
                        If tIdx="" {Set tIdx = 0} Else {Set tIdx = tIdx+1}
                        Do pInternal.%Get("arrayCtrlIdx").%Set(tKey,tIdx)
                        If tIdx>0||(pObjIsArray)||(pXSDInfo.%Get("list").%Get(tSName)=1) {
                            Do pInternal.%Get("arrayCtrlName").%Set(tKey,0)                            
                            Set tKey=tKey_pDelim_tIdx
                            Do pInternal.%Get("arrayCtrlName").%Set(tName,0)
                        }
                    }
                    If (tKey'="")&&(pBuild) {
                        Set tIdx=pInternal.%Get("arrayCtrlName").%Get($Replace(tKey,"^0",""))
                        If tIdx'="" {
                            Do pInternal.%Get("arrayCtrlName").%Set($Replace(tKey,"^0",""),tIdx+1)
                            Set tKey=tKey_pDelim_tIdx
                        } ElseIf pInternal.%Get("arrayCtrlName").%Get(tName)'="" {
                            Set tKey=tKey_pDelim_"0"
                        }
                    }
                    If pBuild {
                        If (tText'="")||((tAttCount=0)&&(pNode.HasChildNodes()=0)) {
                            Set tType = "string"
                            If pInferTypes {
                                If ($zConvert(tText,"L")="true")||($zConvert(tText,"L")="false") {
                                    Set tText=$Select($zConvert(tText,"L")="true":1,1:0)
                                }
                                Set tType = ..GetJSONType(tText)
                            } Else {
                                If pXSDInfo.%Get("types").%Get(tSName)'="" {
                                    Set tType = pXSDInfo.%Get("types").%Get(tSName)
                                }
                            }
                            Set tEPath=$Replace(tKey,pRootName_pDelim,"")
                            Set tEPath=$Replace(tEPath,pNoNamedArray_pDelim,"")
                            If (pCharsKey'="")||(tAttCount>0)  {
                                Do ..SetByLineKey(pXMLJSON,tEPath_pDelim_$Select(pCharsKey="":"value",1:pCharsKey),tText,tType,pDelim,pInferTypes)
                            } Else {
                                Do ..SetByLineKey(pXMLJSON,tEPath,tText,tType,pDelim,pInferTypes)
                            }
                        }
                        If tAttCount>0 {
                            Set tAtt=pNode.FirstAttributeName()
                            While tAtt'="",((pNode.GetAttributeQName("type")="")||(pShowAttQName)) {
                                Set tEPath=$Replace(tKey,pRootName_pDelim,"")
                                Set tEPath=$Replace(tEPath,pNoNamedArray_pDelim,"")
                                Set tVKey = tAtt
                                If pWithNSPrefix Set tVKey=pNode.GetAttributeQName(tAtt)
                                Set tValue = pNode.GetAttributeValue(tAtt)
                                Set tType = "string"
                                If pInferTypes,tXSDNode.%Get("type")'="" {
                                    Set tType = ..GetJSONType(tValue)
                                    If ($zConvert(tValue,"L")="true")||($zConvert(tValue,"L")="false") {
                                        Set tValue=$Select($zConvert(tValue,"L")="true":1,1:0)
                                    }
                                } Else {
                                    If pXSDInfo.%Get("types").%Get(tSName)'="" {
                                        Set tType = pXSDInfo.%Get("types").%Get(tSName)
                                    }
                                }
                                Do ..SetByLineKey(pXMLJSON,tEPath_pDelim_pAttributePrefix_tVKey,tValue,tType,pDelim,pInferTypes)
                                Set tAtt=pNode.NextAttributeName(tAtt)
                            } 
                        }   
                    }
                    If pNode.HasChildNodes() {
                        Set tNodeId = pNode.NodeId
                        //Treat inheritance (names)
                        Set tSName=$Select(pNode.GetAttributeQName("type")="xsi:type":pNode.GetAttributeValue("type"),1:tSName)
                        Do pNode.MoveToFirstChild(1)
                        If pNode.NodeId'=tNodeId {
                            Do ..XMLToJSON(pXmlStream,pXSDInfo,.pJSON,pParams,{"parentKey":(tKey),"parentName":(tName),"parentSName":(tSName),"level":(pLevel+1), "arrayCtrlIdx":(pInternal.arrayCtrlIdx),"arrayCtrlName":(pInternal.arrayCtrlName),"xmlJSON":(pInternal.xmlJSON), "build":(pBuild)}, pNode)
                            Do pNode.MoveToParent(1)
                        }
                    }
                }
            } While (pNode.MoveToNextSibling(1))
		}
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ObjArrayToJSONArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>pObjArray:%Collection.AbstractIterator,*pJSONArray:%Library.DynamicObject,pParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
	{
        Set tClassName=""
        Set pJSONArray = []
        Set tXsdInfo={}
        For i=1: 1: pObjArray.Count() {
            If (pObjArray.GetAt(i).%PackageName()_"."_pObjArray.GetAt(i).%ClassName())'=tClassName {
                Set tClassName=pObjArray.GetAt(i).%PackageName()_"."_pObjArray.GetAt(i).%ClassName()
                Set tSC = ##class(apiPub.core.irisMetadata).ClassNameToXSDInfo(tClassName,.tXsdInfo,{"printResults":0})
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
            Set tWt=##class(%XML.Writer).%New()
            Set tWt.Indent=1
            Do tWt.OutputToStream(.tXML)
            Do tWt.RootObject(pObjArray.GetAt(i))
            Set pParams.noNamedRoot = "@null"
            Set pParams.noNamedElement = "@null"
            Set tSC = ..XMLToJSON(tXML,tXsdInfo,.tJsonObj,pParams,)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            If tJsonObj.%Size()=1 {
                Set tIt = tJsonObj.%GetIterator()
                Do tIt.%GetNext(.jkey,.jvalue)
            }
            Do pJSONArray.%Push({}.%FromJSON(jvalue.%ToJSON()))
        }
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="JSONArrayToObjArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSONArray:%Library.DynamicArray,pClassName:%String,*pObjArray:%ArrayOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
    Try
	{
	    Set pObjArray = ##class(%ArrayOfObjects).%New()
        Set it = pJSONArray.%GetIterator()
        While it.%GetNext(.key,.value) {
            Set tSC = ..JSONToObj(value,pClassName,.pObj)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Do pObjArray.SetAt(pObj,key+1)
        }
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="JSONArrayToObjList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSONArray:%Library.DynamicArray,pClassName:%String,*pObjArray:%ListOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
    Try
	{
	    Set pObjList = ##class(%ListOfObjects).%New()
        Set it = pJSONArray.%GetIterator()
        While it.%GetNext(.key,.value) {
            Set tSC = ..JSONToObj(value,pClassName,.pObj)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Do pObjList.Insert(pObj)
        }
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.core.dispatcher">
<Super>apiPub.core.jsonBuilder</Super>
<TimeChanged>65644,53596.670434</TimeChanged>
<TimeCreated>65568,45530.144369</TimeCreated>

<Method name="Dispatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //Parse Request *************************************************************************
        Set pInputBody = {}
        If $Find("post put",$ZConvert(pRequest.HttpVerb,"L"))>0,$ZConvert(pRequest.ContentType,"L")["json" {
			If pRequest.Body.SizeGet()=0 Set tSC = $$$ERROR($$$GeneralError, "Body Could Not be Empty")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set pInputBody = {}.%FromJSON(pRequest.Body.Read())
        }
        Set tSC = ..GetRequestParams(pRequest.Params,.tInputParams,.tParams)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = ..GetRequestParams(pRequest.Headers,.tInputHeaders)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tMethodKey = pRequest.DispatchClass_"||"_pRequest.DispatchMethod
        Set tVerb = pRequest.HttpVerb
        //End Of Parse *************************************************************************
        Set tSuccessfulCode=""
        Set tResult = {}
        Set tHeadersResponse = {}
        Set pDelim = $Select(tParams.keyDelimiter'="":tParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(tParams.printResults'="":tParams.printResults,1:0)
        Set tSC = ##class(apiPub.core.irisMetadata).GetMethodInfo(tMethodKey,.minfo,{"printResults":0,"showClassSchemas":1})
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        If minfo.%Size()=0 Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"invalid method call ("_tMethodKey_")"))
        Set tVerb=$ZConvert(minfo.%Get("customParams").%Get("verb"),"L")
        Set tSchemas=minfo.%Get("schemas")
        If tSchemas = "" Set tSchemas = {}
        If tVerb="" Set tVerb=$Select((minfo.%Get("hasComplexParams")):"post",1:"get")
        If tVerb'=$ZConvert(tVerb,"L") {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"<Method not Alowed> invalid http verb"))
        }
        Set tServiceObj=""
        If minfo.%Get("classMethod")=0 {
            If '$Data(pInstance) {
                Set tSC = ##class(apiPub.core.irisMetadata).GetClassDefInfo($Piece(tMethodKey,"||",1),,,.tIsBS,)
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                Set tBusinessServiceName=""
                If pRequest.ServiceClass '="" Set tBusinessServiceName = $Parameter(pRequest.ServiceClass,"DispatchBSName") 
                If tBusinessServiceName="" {
                    Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId($Piece(tMethodKey,"||",1)_"||BSNAME")
                    If $IsObject(tMParam) Set tBusinessServiceName = tMParam.Default
                }
                If (tIsBS)||(tBusinessServiceName'="") {
                    If tBusinessServiceName="" Set tBusinessServiceName=$Piece(tMethodKey,"||",1)
                    Set tSC = ##Class(Ens.Director).CreateBusinessService(tBusinessServiceName,.tServiceObj)
                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                } Else {
                    Set tServiceObj=$ClassMethod($Piece(tMethodKey,"||",1),"%New")
                }
            } Else {
                If $IsObject(pInstance) Set tServiceObj=pInstance
            }
        }
        Set tClStr = ""
        Set tSuccessfulCode = minfo.%Get("successfulCode")
        Set tSingleReqBody = minfo.%Get("inputBodyParams").%Size()+minfo.%Get("byRefBodyParams").%Size()=1
        If (tSingleReqBody) {
            Set tFS = minfo.%Get($Select(minfo.%Get("inputBodyParams").%Size()>0:"inputBodyParams",1:"byRefBodyParams")).%GetIterator()
            While (tFS.%GetNext(.key,.value)) {
                Set pWrappedBody = {}.%Set(minfo.%Get("formalSpec").%Get(value).%Get("paramName"),pInputBody)
                Set pInputBody = {}.%FromJSON(pWrappedBody.%ToJSON())
                K pWrappedBody
            }
        }
        Set tOutputParams=0
        If minfo.%Get("formalSpec") {
            Set tFS = minfo.formalSpec.%GetIterator()
            While (tFS.%GetNext(.key,.value)) {
                Set tPName = value.%Get("paramName")
                Xecute ("Kill tmpZ"_$Tr(tPName,"!@#$%^&*()_- ",""))
                If minfo.%Get("resultParam")=key Continue
                Set tPType = value.%Get("pmJType")
                Set tValue=""
                If value.%Get("inputType")="header" {
                    Set tValue = tInputHeaders.%Get(tPName)
                    If tValue="" Set tValue = tInputHeaders.%Get("HTTP_"_$Tr($ZConvert(tPName,"U"),"-","_"))
                } ElseIf value.%Get("inputType")'="",$Find("application/x-www-form-urlencoded",value.%Get("inputType"))=0 {
                    Set tValue = pRequest.Body
                } Else {
                    Set tValue = tInputParams.%Get(tPName)
                }
                If value.%Get("pmJType")'="",(value.%Get("outputOnly")=1)||(value.%Get("byRef")=1) Set tOutputParams=tOutputParams+1
                If (tPType'="")//Primitive Values
                    ||((value.%Get("complexType")=1)&&(pInputBody.%Get(tPName)'="")) //Complex Values
                    ||((value.%Get("outputOnly")=1)||(value.%Get("byRef")=1)) { //Output Values
                    Set tClStr = tClStr_","_$Select((value.%Get("outputOnly")=1)||(value.%Get("byRef")=1):".",1:"")_"tmpZ"_$Tr(tPName,"!@#$%^&*()_- ","")
                    Set tIsList=$Piece(value.%Get("paramType"),"|",2)
                    Set tSchema = value.%Get("customSchema")
                    // Incorporate customSchema with pre-existent schemas
                    If tSchema'="",$IsObject(tSchema) {
                        Set tSc = tSchema.%GetIterator()
                        While (tSc.%GetNext(.sSkey,.sSvalue)) {
                            Do tSchemas.%Set(sSkey,sSvalue)
                        }
                        Set tSchema=""
                    }
                    If tSchema="" Set tSchema = tSchemas
                    Set tSchemaName = value.%Get("customSchemaName")
                    If '(value.%Get("outputOnly")),value.%Get("complexType")=1,pInputBody.%Get(tPName)'="" {
                        Set tParamType = $Piece(value.%Get("paramType"),"|",1)
                        Set reqObj=""
                        Set jsonReqObj = pInputBody.%Get(tPName)
                        If (tParamType = "%Library.DynamicObject")||(tParamType = "%Library.DynamicArray") {
                            Set reqObj={}.%FromJSON(jsonReqObj.%ToJSON())
                            If tSchemaName'="" {
                                Set tSC = ##class(apiPub.core.parser).Parse(tSchemaName,reqObj,tSchema,.tParseResult,.tParseText,{"printResults":0})
                                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
                                If tParseText'="1" {
                                    Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"<Bad Request> "_tParseText))
                                }
                            }
                        } Else {
                            If tIsList'="" {
                                Set tList = $ClassMethod(tIsList,"%New")
                                Set tLit = jsonReqObj.%GetIterator()
                                While tLit.%GetNext(.lkey,.lvalue) {
                                    If '$IsObject(lvalue) Continue
                                    Set tSC = ##Class(apiPub.core.converter).JSONToObj(lvalue,$Piece(value.%Get("paramType"),"|",1),.reqObj)
                                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
                                    If tIsList["List" Do tList.InsertAt(reqObj,lkey+1)
                                    If tIsList["Array" Do tList.SetAt(reqObj,lkey+1)
                                }
                                Set reqObj=tList
                            } Else {
                                Set tSC = ##Class(apiPub.core.converter).JSONToObj(jsonReqObj,$Piece(value.%Get("paramType"),"|",1),.reqObj)
                                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
                                Kill jsonReqObj
                            }
                        }
                        Set tCmd = "(req) Set tmpZ"_$Tr(tPName,"!@#$%^&*()_- ","")_"=req"
                        Xecute (tCmd,reqObj)
                    } Else {
                        If '(value.%Get("outputOnly")),tValue'="" {
                            If tIsList'="" {
                                Set tList = $ClassMethod(tIsList,"%New")
                                For i=1:1:$Length(tValue,",") {
                                    If tIsList="%Library.DynamicArray" Do tList.%Set(i-1,$Piece(tValue,",",i))
                                    If tIsList["List" Do tList.InsertAt($Piece(tValue,",",i),i)
                                    If tIsList["Array",tIsList'="%Library.DynamicArray" Do tList.SetAt($Piece(tValue,",",i),i)
                                }
                                Set tValue=tList
                            } Else {
                                //Stream to String
                                If $IsObject(tValue),tValue.%IsA("%Stream.Object") {
                                    If value.%Get("iConvFunction")="stream" {
                                        Set tStream = $ClassMethod(value.%Get("paramType"),"%New")
                                        Do tStream.CopyFrom(tValue)
                                        Set tValue=tStream
                                    } ElseIf tValue.SizeGet()>0,value.%Get("pmJDType")="string" {
                                        Set tStrContent = ""
                                        Do tValue.Rewind()
                                        While (tValue.AtEnd=0) {
                                            Set tStrContent = tStrContent_tValue.Read()
                                        }
                                        Set tValue=tStrContent
                                    }
                                } ElseIf value.%Get("iConvFunction")="stream" {
                                    Set tStream = $ClassMethod(value.%Get("paramType"),"%New")
                                    Do tStream.Write(tValue)
                                    Set tValue=tStream
                                } ElseIf value.%Get("iConvFunction")'="" {
                                    If $ClassMethod($Piece(value.%Get("paramType"),"|",1),"IsValid",tValue)'=1 {
                                        For i=1:1:$Length(value.%Get("iConvFunction"),",") {
                                            Set cVal = $ClassMethod($Piece(value.%Get("paramType"),"|",1),value.%Get("iConvFunction"),tValue)
                                            If $ClassMethod($Piece(value.%Get("paramType"),"|",1),"IsValid",cVal)=1 Set tValue = cVal  Quit
                                        }
                                    }
                                    If $ClassMethod($Piece(value.%Get("paramType"),"|",1),"IsValid",tValue)'=1 {
                                        Set tSC = $$$ERROR($$$GeneralError, "invalid parameter value ("_tPName_")")
                                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                                    }
                                }
                            }
                        }
                        Set tCmd = "(var) Set tmpZ"_$Tr(tPName,"!@#$%^&*()_- ","")_"=var"
                        Xecute (tCmd,tValue)
                    }
                } Else {
                    Set tClStr = tClStr_","
                }
            }
        }
        Set (tRetPName,tRetType)=""
        If minfo.%Get("resultParam")'="" {
            Set tRetPName=$Piece(minfo.%Get("formalSpec").%Get(minfo.%Get("resultParam")).%Get("paramName"),"|",1)
            Set tRetType=$Piece(minfo.%Get("formalSpec").%Get(minfo.%Get("resultParam")).%Get("paramType"),"|",1)
        }
        If tServiceObj="" Set tClStr = "$ClassMethod("""_$Piece(tMethodKey,"||",1)_""","""_$Piece(tMethodKey,"||",2)_""""_tClStr_")"
        If $IsObject(tServiceObj) Set tClStr = "$Method(tObj,"""_$Piece(tMethodKey,"||",2)_""""_tClStr_")"
        Xecute "Kill tmpZ"_$Tr(tRetPName,"!@#$%^&*()_- ","")
        Try {
            If tRetType'="" {
                Set tClStr = "(tObj) Set tmpZ"_$Tr(tRetPName,"!@#$%^&*()_- ","")_" = "_tClStr
                Xecute (tClStr,tServiceObj)
            } Else {
                Set tClStr = "(tObj) Do "_tClStr
                Xecute (tClStr,tServiceObj)
            }
        } Catch(e) {
            If 'e.AsStatus() { Throw ##Class(%Exception.StatusException).CreateFromStatus(e.AsStatus())}
        }
        Set tSingleRespBody = tOutputParams+minfo.%Get("byRefBodyParams").%Size()+minfo.%Get("outputBodyParams").%Size()=1
        If minfo.%Get("formalSpec") {
            Set tFS = minfo.formalSpec.%GetIterator()
            While (tFS.%GetNext(.key,.value)) {
                Set tPName = value.%Get("paramName")
                Set tPType = value.%Get("pmJType")
                Set tParamType = $Piece(value.%Get("paramType"),"|",1)
                Set tList=$Piece(value.%Get("paramType"),"|",2)
                If tPType'=""||value.%Get("complexType")=1,(value.%Get("outputOnly")=1||value.%Get("byRef")=1) {
                    Set tVal=""
                    Set tCmd = "(out) Set out=$Get(tmpZ"_$Tr(tPName,"!@#$%^&*()_- ","")_","""")"
                    Xecute (tCmd,.tVal)
                    If tPType="status" {
                        Set pInnerStatus = tVal
                        If value.%Get("outputType")="body" {
                            Do tResult.%Set("iris-StatusCode",$$$ISOK(tVal))
                            Do tResult.%Set("iris-StatusMessage",$Select($$$ISERR(tVal):$System.Status.GetOneErrorText(tVal),1:"OK"))
                            If '(tVal) Do tResult.%Set("iris-ErrorCode",$System.Status.GetErrorCodes(tVal))
                        } Else {
                            Do tHeadersResponse.%Set("iris-StatusCode",$$$ISOK(tVal))
                            Do tHeadersResponse.%Set("iris-StatusMessage",$Select($$$ISERR(tVal):$System.Status.GetOneErrorText(tVal),1:"OK"))
                            If '(tVal) Do tHeadersResponse.%Set("iris-ErrorCode",$System.Status.GetErrorCodes(tVal))
                        }
                        //To be Implemented Silent Mode
                        If '$$$ISOK(tVal) Throw ##Class(%Exception.StatusException).CreateFromStatus(tVal)
                    } ElseIf value.%Get("complexType")=1 {
                        If tVal'="" {
                            If (tParamType = "%Library.DynamicObject")||(tParamType = "%Library.DynamicArray") {
                                If tSingleRespBody=1 {
                                    Set tResult = tVal
                                } Else {
                                    Do tResult.%Set(tPName,tVal)
                                }
                            } Else {
                                If tList'="" {
                                    Set tJSONList = []
                                    Set tSC = ##Class(apiPub.core.converter).ObjArrayToJSONArray(tVal,.tJSONList,{"printResults":0})                      
                                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
                                    If tSingleRespBody=1 {
                                        Set tResult = tJSONList
                                    } Else {
                                        Do tResult.%Set(tPName,tJSONList)
                                    }
                                } Else {
                                    Set tSC = ##Class(apiPub.core.converter).ObjToJSON(tVal,.tJsonObj,{"printResults":0})
                                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
                                    If tSingleRespBody=1 {
                                        Set tResult = tJsonObj
                                    } Else {
                                        Do tResult.%Set(tPName,tJsonObj)
                                    }
                                }
                            }
                        }
                    } Else { //Primitive values
                        If tList'="" {
                            Set pJSONList = []
                            For i=1: 1: tVal.Count() {
                                Set tItVal=tVal.GetAt(i)
                                If value.%Get("oConvFunction")'="",tItVal'="" {
                                    Set tItVal = $ClassMethod($Piece(value.%Get("paramType"),"|",1),value.%Get("oConvFunction"),tItVal)
                                } 
                                Do pJSONList.%Push(tItVal)
                            }
                            Set tVal=pJSONList
                            Do tResult.%Set(tPName,tVal)
                        } Else {
                            //Not alocate specific values for different output type
                            If value.%Get("outputType")'="",value.%Get("outputType")'="header" {
                                Set tResult = tVal
                                Set pResponse.ContentType = value.%Get("outputType")  
                            } Else {
                                If value.%Get("oConvFunction")="stream",tVal'="",value.%Get("pmJDType")="string" {
                                    // alocate stream response on json property
                                    If tVal.SizeGet()>0 {
                                        Set tStrContent = ""
                                        Do tVal.Rewind()
                                        While (tVal.AtEnd=0) {
                                            Set tStrContent = tStrContent_tVal.Read()
                                        }
                                        Set tVal=tStrContent
                                    }
                                } ElseIf value.%Get("oConvFunction")'="",tVal'="" {
                                    Set tVal = $ClassMethod(value.%Get("paramType"),value.%Get("oConvFunction"),tVal)
                                }
                                If value.%Get("outputType")="header" {
                                    Do tHeadersResponse.%Set(tPName,tVal,$Select(tVal'="":tPType,1:""))
                                } Else {
                                    Do tResult.%Set(tPName,tVal,$Select(tVal'="":tPType,1:""))
                                }
                            }
                        } 
                    }
                }
            }
        }
        //Parse Response **********************************
		If tHeadersResponse.%Size()>0{
            Set pResponse.Headers=tHeadersResponse.%ToJSON()
        }
        If $Data(tResult),$IsObject(tResult),tResult.%IsA("%Library.DynamicAbstractObject") {
			If tResult.%Size()>0||(($ClassName(tResult)="%Library.DynamicArray")&&$IsObject(tResult)) Do pResponse.Body.Write(tResult.%ToJSON())
			Set pResponse.ContentType = "application/json"
		} ElseIf $Data(tResult),$IsObject(tResult),tResult.%IsA("%Stream.Object") {
            Do pResponse.Body.CopyFrom(tResult)
		} ElseIf $Data(tResult),'$IsObject(tResult) {
			Do pResponse.Body.Write(tResult)
        }
        If minfo.%Get("responseCharset")'="" Set pResponse.CharSet = minfo.%Get("responseCharset")
        Set pResponse.ResponseStatusCode = tSuccessfulCode
        //*************************************************
        If pPrintResults {
            If $IsObject(tResult) {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(tResult.%ToJSON(),.jsonString)
                Write jsonString
            } Else {
                Write tResult
            }
            
        }
    }
    Catch(e) {
        //w $System.Status.GetOneErrorText(e.AsStatus()),!
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.core.irisMetadata">
<Super>apiPub.core.jsonBuilder</Super>
<TimeChanged>65630,63875.741071</TimeChanged>
<TimeCreated>65556,54043.058698</TimeCreated>

<Method name="GetMethodsInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pClassName:%String,pMethodName:%String,&pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$Data(pParams) Set pParams={}
        If '$Data(pInternal) Set pInternal={"level":0,"origClass":(pClassName)}
        If '$Data(pJSON) Set pJSON={"methods":{},"customSchemas":{}}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pOrigClass = pInternal.%Get("origClass")
        set tCD=##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
        If $IsObject(tCD) {
            If tCD.Super'="" {
                For sup=1:1:$l(tCD.Super,",") {  Continue:$p(tCD.Super,",",sup)=""
                    Set tSC = ..GetMethodsInfo($Piece(tCD.Super,",",sup),pMethodName,.pJSON,pParams,{"level":(pInternal.level+1),"origClass":(pOrigClass)})
                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                }
            }
            // description of methods
            If (tCD.Methods.Count()>0) {
                Set xdataID=pClassName_"||apiPub"
                Set tCompiledXdata=##class(%Dictionary.CompiledXData).%OpenId(xdataID)
                If $IsObject(tCompiledXdata),$IsObject(tCompiledXdata.Data) {
                    Set tXDataJSON = {}.%FromJSON(tCompiledXdata.Data)
                    If $IsObject(tXDataJSON),tXDataJSON.%Get("schemas")'="" {
                        Set tProp = tXDataJSON.%Get("schemas").%GetIterator()
                        While tProp.%GetNext(.key,.value) {
                            Do ..SetByLineKey(pJSON,"customSchemas"_pDelim_key,value,,pDelim)
                        }
                    }
                    If $IsObject(tXDataJSON),tXDataJSON.%Get("info")'="" {
                        Set tProp = tXDataJSON.%Get("info").%GetIterator()
                        While tProp.%GetNext(.key,.value) {
                            Do ..SetByLineKey(pJSON,"customInfo"_pDelim_key,value,,pDelim)
                        }
                    }
                    If $IsObject(tXDataJSON),tXDataJSON.%Get("tags")'="" {
                        Set tProp = tXDataJSON.%Get("tags").%GetIterator()
                        While tProp.%GetNext(.key,.value) {
                            Do ..SetByLineKey(pJSON,"customTags"_pDelim_key,value,,pDelim)
                        }
                    }
                    If $IsObject(tXDataJSON),tXDataJSON.%Get("securitySchemes")'="" {
                        Set tProp = tXDataJSON.%Get("securitySchemes").%GetIterator()
                        While tProp.%GetNext(.key,.value) {
                            Do ..SetByLineKey(pJSON,"customSecurity"_pDelim_key,value,,pDelim)
                        }
                    }
                    If $IsObject(tXDataJSON),tXDataJSON.%Get("servers")'="" {
                        Set tProp = tXDataJSON.%Get("servers").%GetIterator()
                        While tProp.%GetNext(.key,.value) {
                            Do ..SetByLineKey(pJSON,"customServers"_pDelim_key,value,,pDelim)
                        }
                    }
                }
                Do ..SetByLineKey(pJSON,"description",tCD.Description,,pDelim)
                Set key=""
                Set tMD=tCD.Methods.GetNext(.key)
                While(key'="") {
                    If pMethodName'="",pMethodName'=tMD.Name {
                        Set tMD=tCD.Methods.GetNext(.key)
                        Continue
                    }
                    If (tMD.WebMethod),'(tMD.Internal),'(tMD.Private),..GetByLineKey(pJSON,"methods"_pDelim_tMD.Name,pDelim)="" {
                        Set tSC = ..GetMethodInfo(pClassName_"||"_tMD.Name,.mInfo,{"printResults":0})
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        Do ..SetByLineKey(pJSON,"methods"_pDelim_tMD.Name,{}.%FromJSON(mInfo.%ToJSON()),,pDelim)
                    }
                    Set tMD=tCD.Methods.GetNext(.key)
                } 
            }
        }
        If pInternal.level=0,pPrintResults {
            Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
            Do tFormatter.FormatToString(pJSON.%ToJSON(),.jsonString)
            Write jsonString
        }
    }
    Catch(e) {
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetMethodParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTag:%String,pMethodCom:%String,*pOutputParams:%Library.DynamicObject,*pOutputCom:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set pOutputParams = {}
        Set pOutputCom=pMethodCom
        While $Find(pOutputCom,pTag)>0,$Find(pOutputCom,"[")>0,$Find(pOutputCom,"]")>0 {
            Set tComm = $Piece(pOutputCom,pTag,2)
            Set tAttBlock = $Piece($Piece(tComm,"[",2,*),"]",1,*-1)
            Set pOutputCom = $Replace($Piece(pOutputCom,"[",1),pTag,"")_$Piece(pOutputCom,tAttBlock_"]",2,*)
            If $Find(tAttBlock,"{")>0,$Find(tAttBlock,"}")>0,$Find(tAttBlock,"=")=0 {
                Set pOutputParams = {}.%FromJSON(tAttBlock)
                Quit
            } ElseIf ($Find(tAttBlock,"=")>0) {
                Set tCmd = "(tVal) Set tVal ="_$Replace($Replace($Replace($Piece($Replace(tAttBlock,"\=","\*"),"=",2),"\*","="),$Char(10),""),$Char(13),"")
                Set tVal = ""
                Try {
                    Xecute (tCmd,.tVal)
                } Catch(e) { 
                    Set tSC = $$$ERROR($$$GeneralError, "invalid "_pTag_" param ["_tAttBlock_"]")
                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                }
                Do ..SetByLineKey(pOutputParams,$Tr($Piece(tAttBlock,"=",1),"""",""),tVal,,".")
            }
        }
        Set pOutputCom = $Replace($Replace(pOutputCom,$Char(10),""),$Char(13),"")
    }
    Catch(e) {
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetCacheCustomPaths">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pJSON:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //Get Last Class Modification Date
        Set tSC = ..GetClassDefInfo(pClassName,.tTimeChanged)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tDtClassDef = $Piece($Get(^TmpApipubPaths(pClassName),""),"||",1)
        If (tDtClassDef="")||(tDtClassDef'=tTimeChanged) {
            Set tSC = ..GetCustomPaths(pClassName,.pJSON,{"printResults":0})
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set ^TmpApipubPaths(pClassName)=tTimeChanged_"||"_pJSON.%ToJSON()
        } Else {
            Set pJSON = {}.%FromJSON($Piece(^TmpApipubPaths(pClassName),"||",2))
        }
    }
    Catch(e) {
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetCustomPaths">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$Data(pParams) Set pParams={}
        If '$Data(pInternal) Set pInternal={"level":0,"origClass":(pClassName)}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pOrigClass = pInternal.%Get("origClass")
        Set tCD=##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
        If pInternal.level=0 {
            Set pJSON={"paths":{}}
        }
        If $IsObject(tCD) {
            If tCD.Super'="" {
                For sup=1:1:$l(tCD.Super,",") {  Continue:$p(tCD.Super,",",sup)=""
                    Set tSC = ..GetCustomPaths($Piece(tCD.Super,",",sup),.pJSON,pParams,{"level":(pInternal.level+1),"origClass":(pOrigClass)})
                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                }
            }
            If (tCD.Methods.Count()>0) {
                Set key=""
                Set tMD=tCD.Methods.GetNext(.key)
                While(key'="") {
                    If (tMD.WebMethod),'(tMD.Internal),'(tMD.Private) {
                        Set tSC = ..GetMethodInfo(pClassName_"||"_tMD.Name,.mInfo,{"printResults":0})
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        Set tVerb=mInfo.%Get("verb")
                        Set tPath = tVerb_":/"_tMD.Name
                        If mInfo.%Get("customParams").%Get("path")'="" Set tPath = tVerb_":"_mInfo.%Get("customParams").%Get("path")
                        Set tOperationId = mInfo.%Get("customParams").%Get("operationId")
                        If pJSON.%Get("paths").%Get(tPath)'="" Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "duplicated Path on Class"_pClassName))
                        Do pJSON.%Get("paths").%Set(tPath,{"methodName":(tMD.Name)})
                        If tOperationId'="" Do pJSON.%Get("paths").%Get(tPath).%Set("operationId",tOperationId)
                    }
                    Set tMD=tCD.Methods.GetNext(.key)
                } 
            }
        }
        If pInternal.level=0 {
			Set tSC = ..GetIdxPath(pJSON,.tIdxJSON)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            Set pJSON = tIdxJSON
            If (pPrintResults) {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pJSON.%ToJSON(),.jsonString)
                Write jsonString
            }
        }
    }
    Catch(e) {
        //w $System.Status.GetOneErrorText(e.AsStatus()),!
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetMethodInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethodKey:%String,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pLevel</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$Data(pParams) Set pParams={}
        If '$Data(pJSON) Set pJSON={}
        If '$Data(pLevel) Set pLevel=0
        If pLevel'=+pLevel Set pLevel=0
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pResponseObjName = $Select(pParams.responseObjName'="":pParams.responseObjName,1:"response")
        Set pShowClassSchemas = $Select(pParams.showClassSchemas'="":pParams.showClassSchemas,1:0)
        Set pSuccessfulCode = $Select(pParams.successfulCode'="":pParams.successfulCode,1:"200")
        Set tCD=##class(%Dictionary.ClassDefinition).%OpenId($Piece(pMethodKey,"||",1))
        If $IsObject(tCD) {
            Set tMD = ##class(%Dictionary.CompiledMethod).%OpenId(pMethodKey)
            If $IsObject(tMD) {
                Set primitiveTypes = ##Class(apiPub.core.typeMapper).GetParamTypes()
                Set tSC=..GetMethodParams("@apiPub",tMD.Description,.tApiPubParams,.tMethodDesc)
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                Set tMD.Description=tMethodDesc
                Set xdataID=$Piece(pMethodKey,"||",1)_"||apiPub"
                Set tCompiledXdata=##class(%Dictionary.CompiledXData).%OpenId(xdataID)
                Set tXDataJSON={"schemas":{}}
                If $IsObject(tCompiledXdata),$IsObject(tCompiledXdata.Data) {
                    Set tXDataJSON = {}.%FromJSON(tCompiledXdata.Data)                        
                    If tXDataJSON.%Get($Piece(pMethodKey,"||",2))'="" {
                        Set tProp = tXDataJSON.%Get($Piece(pMethodKey,"||",2)).%GetIterator()
                        While tProp.%GetNext(.key,.value) {
                            Do tApiPubParams.%Set(key,value)  
                        }
                    }
                }
                Do ..SetByLineKey(pJSON,"description",tMD.Description,,pDelim)
                Do ..SetByLineKey(pJSON,"classMethod",tMD.ClassMethod,,pDelim)
                Do ..SetByLineKey(pJSON,"SoapMessageName",tMD.SoapMessageName,,pDelim)
                Do ..SetByLineKey(pJSON,"SoapNameSpace",tMD.SoapNameSpace,,pDelim)
                Do ..SetByLineKey(pJSON,"SoapRequestMessage",tMD.SoapRequestMessage,,pDelim)
                Do ..SetByLineKey(pJSON,"formalSpec",[],,pDelim)
                Do ..SetByLineKey(pJSON,"inputBodyParams",[],,pDelim)
                Do ..SetByLineKey(pJSON,"byRefBodyParams",[],,pDelim)
                Do ..SetByLineKey(pJSON,"outputBodyParams",[],,pDelim)
                Do ..SetByLineKey(pJSON,"customParams",{},,pDelim)
                If (pShowClassSchemas),tXDataJSON.%Get("schemas")'="" {
                    Do ..SetByLineKey(pJSON,"schemas",tXDataJSON.%Get("schemas"),,pDelim)
                }
                Set tResponseDescription=""
                Set tComplexSchema=0
                Set (tResponseContentType,tResponseCharSet) = ""
                If tApiPubParams.%Size()>0 {
                    Do ..SetByLineKey(pJSON,"customParams",tApiPubParams,,pDelim)
                    If ..GetByLineKey(tApiPubParams,"response.name",".")'="" Set pResponseObjName = ..GetByLineKey(tApiPubParams,"response.name",".")
                    If ..GetByLineKey(tApiPubParams,"response.outputType",".")'="" Set tResponseContentType = ..GetByLineKey(tApiPubParams,"response.outputType",".")
                    If ..GetByLineKey(tApiPubParams,"response.contentType",".")'="" Set tResponseContentType = ..GetByLineKey(tApiPubParams,"response.contentType",".")
                    If ..GetByLineKey(tApiPubParams,"response.charset",".")'="" Set tResponseCharSet = ..GetByLineKey(tApiPubParams,"response.charset",".")
                    If tResponseCharSet="",..GetByLineKey(tApiPubParams,"charset",".")'="" Set tResponseCharSet = ..GetByLineKey(tApiPubParams,"charset",".")
                    If ..GetByLineKey(tApiPubParams,"successfulCode",".")'="" Set pSuccessfulCode = ..GetByLineKey(tApiPubParams,"successfulCode",".")
                }
                Do ..SetByLineKey(pJSON,"successfulCode",pSuccessfulCode,,pDelim)
                For i=1:1:$ListLength(tMD.FormalSpecParsed) {
                    Set (tParamName,tParamDesc,tParamType,tParamInOut,tParamDefault,tParamAtts)=""
                    Set tSerParam=$ListGet(tMD.FormalSpecParsed,i)
                    For si=1:1:$ListLength(tSerParam) {
                        If si=1 Set tParamName = $ListGet(tSerParam,si)
                        If si=2 Set tParamType = $ListGet(tSerParam,si)
                        If si=3 Set tParamInOut = $ListGet(tSerParam,si)
                        If si=4 Set tParamDefault = $ListGet(tSerParam,si)
                        If si>4 Set tParamAtts = tParamAtts_$ListGet(tSerParam,si)_$Select((si#2):"=",1:"|")
                    }
                    Set tParamAtts=$Extract(tParamAtts,1,*-1)
                    Set tPMType = primitiveTypes.%Get($S($Length(tParamType,".")>1:"%",1:"")_$ZConvert($Piece(tParamType,".",*),"L"))
                    Set tXmlAdaptor=0
                    If tPMType="" {
                        Set tSC = ..GetClassDefInfo(tParamType,.dt,.tXmlAdaptor)
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                    Set tParam = tParamName
                    Set (tParamOutput,tParamInput)=""
                    If tApiPubParams.%Size()>0 {
                        If ..GetByLineKey(tApiPubParams,"params."_tParam_".name",".")'="" Set tParamName = ..GetByLineKey(tApiPubParams,"params."_tParam_".name",".")
                        If ..GetByLineKey(tApiPubParams,"params."_tParam_".outputType",".")'="" Set tParamOutput = ..GetByLineKey(tApiPubParams,"params."_tParam_".outputType",".")
                        If ..GetByLineKey(tApiPubParams,"params."_tParam_".inputType",".")'="" Set tParamInput = ..GetByLineKey(tApiPubParams,"params."_tParam_".inputType",".")
                    }
                    Set tParamObj = {
                        "param":(tParam),
                        "paramName":(tParamName),
                        "paramType":(tParamType),
                        "pmJType":($Piece(tPMType,"|",1)),
                        "pmJDType":($Piece(tPMType,"|",2)),
                        "pmJDFormat":($Piece(tPMType,"|",3)),
                        "iConvFunction":($Piece(tPMType,"|",4)),
                        "oConvFunction":($Piece(tPMType,"|",5)),
                        "complexType":(tXmlAdaptor=1),
                        "outputOnly":(tParamInOut="*"),
                        "byRef":(tParamInOut="&"),
                        "params":(tParamAtts),
                        "outputType":(tParamOutput),
                        "inputType":(tParamInput)
                    }
                    If tParamInput'="",tParamInput'="header" Do pJSON.%Set("requestContentType",tParamInput)
                    If tParamOutput'="",tParamOutput'="header" Do pJSON.%Set("responseContentType",tParamOutput)
                    If (tParamType="%Library.DynamicObject")||(tParamType="%Library.DynamicArray") Do tParamObj.%Set("complexType",1)
                    Set tElType = $Tr($Piece($Piece(tParamAtts,"ELEMENTTYPE=",2),",",1),"""","")
                    If tApiPubParams.%Get("params")'="" {
                        Set tSchema = ..GetByLineKey(tApiPubParams,"params."_tParam_".schema",".")
                        If tSchema'="" Set tComplexSchema=1
                        If $IsObject(tSchema),tSchema.%Get("items")'="" Set tComplexSchema=0
                        If (tParamObj.%Get("complexType")) {
                            If $IsObject(tXDataJSON),'$IsObject(tSchema),tXDataJSON.%Get("schemas")'="" {
                                If tXDataJSON.%Get("schemas").%Get(tSchema)'="" {
                                    Do tParamObj.%Set("customSchemaName",tSchema)
                                }
                            } ElseIf $IsObject(tSchema),tSchema.%Size()=1 {
                                Do tParamObj.%Set("customSchema",{}.%FromJSON(tSchema.%ToJSON()))
                                Set prop = tSchema.%GetIterator()
                                Do prop.%GetNext(.tKey,.tValue)
                                Do tParamObj.%Set("customSchemaName",tKey)
                            }
                            If tParamObj.%Get("customSchemaName")="",tParamType="%Library.DynamicArray",("*&"'[tParamInOut)||(tParamInOut="") {
                                Do tParamObj.%Set("complexType",0)
                                Set tElType="%String"
                            }                            
                        }
                    }
                    If tElType'="",tXmlAdaptor=0 {
                        Set tPMType = primitiveTypes.%Get($S($Length(tElType,".")>1:"%",1:"")_$ZConvert($Piece(tElType,".",*),"L"))
                        Do tParamObj.%Set("paramType",tElType_"|"_tParamType)
                        Do tParamObj.%Set("pmJType",$Piece(tPMType,"|",1))
                        Do tParamObj.%Set("pmJDType",$Piece(tPMType,"|",2))
                        Do tParamObj.%Set("pmJDFormat",$Piece(tPMType,"|",3))
                        Do tParamObj.%Set("iConvFunction",$Piece(tPMType,"|",4))
                        Do tParamObj.%Set("oConvFunction",$Piece(tPMType,"|",5))
                        Set tClassDef=##class(%Dictionary.ClassDefinition).%OpenId(tElType)
                        If $IsObject(tClassDef) {
                            Set tSC = ..GetClassDefInfo(tElType,.dt,.tXmlAdaptor)
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                            Do tParamObj.%Set("complexType",(tXmlAdaptor=1))
                        }
                    }
                    If (tParamObj.%Get("complexType")),(tParamInOut="*") Do ..SetByLineKey(pJSON,"outputBodyParams[+]",i-1,,pDelim)
                    If (tParamObj.%Get("complexType")),(tParamInOut="&") Do ..SetByLineKey(pJSON,"byRefBodyParams[+]",i-1,,pDelim)
                    If (tParamObj.%Get("complexType")),(tParamInOut="") Do ..SetByLineKey(pJSON,"inputBodyParams[+]",i-1,,pDelim)
                    Do ..SetByLineKey(pJSON,"formalSpec[+]",tParamObj,,pDelim)
                }
                If tMD.ReturnType'="" {
                    Set tType = tMD.ReturnType
                    Set tPMType = primitiveTypes.%Get($S($Length(tType,".")>1:"%",1:"")_$ZConvert($Piece(tType,".",*),"L"))
                    Set tPMClass = tType
                    If $Length(tType,".")=1,$Extract(tType,1,1)="%" Set tPMClass = "%Library."_$Tr($Extract($Piece(tType,".",*),1,*),"%","")
                    If tPMType="",$Length(tType,".")=1,$Extract(tType,1,1)'="%" Set tPMClass = $Piece(tCD.Name,".",1,*-1)_"."_$Tr($Extract($Piece(tType,".",*),1,*),"%","")
                    Set tParams = tMD.ReturnTypeParams
                    Set tXmlAdaptor = 0
                    Set tClassDef=""
                    If tPMType="" Set tClassDef=##class(%Dictionary.ClassDefinition).%OpenId(tPMClass)
                    If $IsObject(tClassDef) {
                        Set tSC = ..GetClassDefInfo(tPMClass,.dt,.tXmlAdaptor)
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                    Set tElType = $Tr($Piece($Piece(tParams,"ELEMENTTYPE=",2),",",1),"""","")
                    If tElType'="",tXmlAdaptor=0 {
                        Set tPMType = primitiveTypes.%Get($S($Length(tElType,".")>1:"%",1:"")_$ZConvert($Piece(tElType,".",*),"L"))
                        Set tPMClass=tElType_"|"_tPMClass
                        Set tClassDef=##class(%Dictionary.ClassDefinition).%OpenId(tElType)
                        If $IsObject(tClassDef) {
                            Set tSC = ..GetClassDefInfo(tElType,.dt,.tXmlAdaptor)
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        }
                    }
                    Set tRetParamObj = {
                        "param":("response"),
                        "paramName":(pResponseObjName),
                        "paramType":(tPMClass),
                        "pmJType":($Piece(tPMType,"|",1)),
                        "pmJDType":($Piece(tPMType,"|",2)),
                        "pmJDFormat":($Piece(tPMType,"|",3)),
                        "iConvFunction":($Piece(tPMType,"|",4)),
                        "oConvFunction":($Piece(tPMType,"|",5)),
                        "complexType":(tXmlAdaptor=1),
                        "outputOnly":1,
                        "byRef":0,
                        "params":(tParams),
                        "outputType":(tResponseContentType)
                    }
                    If tResponseContentType'="",tResponseContentType'="header" Do pJSON.%Set("responseContentType",tResponseContentType)
                    If (tPMClass="%Library.DynamicObject")||(tPMClass="%Library.DynamicArray") Do tRetParamObj.%Set("complexType",1)
                    Do ..SetByLineKey(pJSON,"formalSpec[+]",tRetParamObj,,pDelim)
                    Do ..SetByLineKey(pJSON,"resultParam",pJSON.%Get("formalSpec").%Size()-1,,pDelim)                    
                    If (tRetParamObj.%Get("complexType")) Do ..SetByLineKey(pJSON,"outputBodyParams[+]",pJSON.%Get("formalSpec").%Size()-1,,pDelim)                    
                    Set tIt = pJSON.%Get("formalSpec").%GetIterator()
                    While tIt.%GetNext(.key,.value) {
                        If key'=pJSON.%Get("resultParam"),(value.%Get("outputOnly")),(value.%Get("complexType")) Do ..SetByLineKey(pJSON,"outputBodyParams[+]",key,,pDelim)
                    }
                    If tApiPubParams.%Get("response")'="" {
                        Set tSchema = ..GetByLineKey(tApiPubParams,"response.schema",".")
                        If (tRetParamObj.%Get("complexType")) {
                            If '$IsObject(tSchema),tXDataJSON.%Get("schemas")'="" {
                                If tXDataJSON.%Get("schemas").%Get(tSchema)'="" {
                                    Do tRetParamObj.%Set("customSchemaName",tSchema)
                                }
                            } ElseIf tSchema.%Size()=1 {
                                Do tRetParamObj.%Set("customSchema",{}.%FromJSON(tSchema.%ToJSON()))
                                Set prop = tSchema.%GetIterator()
                                Do prop.%GetNext(.tKey,.tValue)
                                Do tRetParamObj.%Set("customSchemaName",tKey)
                            }
                        }
                    }
                } Else {
                    Do ..SetByLineKey(pJSON,"resultParam","",,pDelim)
                    Do ..SetByLineKey(pJSON,"outputBodyParams",[],,pDelim)
                }
                 If tResponseCharSet'="" Do ..SetByLineKey(pJSON,"responseCharset",tResponseCharSet,,pDelim)                 
            } Else {
                If tCD.Super'="" {
                    For sup=1:1:$l(tCD.Super,",") {  Continue:$p(tCD.Super,",",sup)=""
                        Set tSC = ..GetMethodInfo($Piece(tCD.Super,",",sup)_"||"_$Piece(pMethodKey,"||",2),.pJSON,pParams,pLevel+1)
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                }
            }
        }
        If pLevel=0,pJSON.%Size()>0 {
            Do pJSON.%Set("hasComplexParams",0)
            If (pJSON.%Get("inputBodyParams").%Size()>0)||(pJSON.%Get("byRefBodyParams").%Size()>0) {
                Do pJSON.%Set("hasComplexParams",1)
            }
            Set tVerb=$ZConvert(pJSON.%Get("customParams").%Get("verb"),"S")
            If tVerb="" Set tVerb=$Select((pJSON.%Get("hasComplexParams"))||(pJSON.%Get("requestContentType")'=""):"Post",1:"Get")
            Do pJSON.%Set("verb",tVerb)
            If (pPrintResults) {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pJSON.%ToJSON(),.jsonString)
                Write jsonString
            }
        }
    }
    Catch(e) {
        //w $System.Status.GetOneErrorText(e.AsStatus()),!
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetClassDefInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[aClassName:%String="",&timeChanged,*isXMLAdaptor,*isBusinessService,level=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
    Try
	{
        If level=0 Set (isXMLAdaptor,isBusinessService)=0
        set classDefinition=##class(%Dictionary.ClassDefinition).%OpenId(aClassName)
        if ($isobject(classDefinition)) {
            If '$Data(timeChanged) Set timeChanged = classDefinition.TimeChanged
            If $System.SQL.DATEDIFF("ms",$ZDT($Piece(timeChanged,".",1),3),$ZDT($Piece(classDefinition.TimeChanged,".",1),3))>0 Set timeChanged=classDefinition.TimeChanged
            if classDefinition.Super'="" {
                If isXMLAdaptor=0,classDefinition.Super["XML.Adaptor" Set isXMLAdaptor=1
                If isBusinessService=0,classDefinition.Super["Ens.BusinessService" Set isBusinessService=1
                for sup=1:1:$l(classDefinition.Super,",") {  continue:$p(classDefinition.Super,",",sup)=""
                    Set tSC = ..GetClassDefInfo($p(classDefinition.Super,",",sup),.timeChanged,.isXMLAdaptor,.isBusinessService,level+1)
                    If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                }
            }
        }
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="NodesFromXSD">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pXSDInfo:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
    {
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:0)
        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"", "parentType":"", "level":0, "circRefCtrl":{},"originalJSON":{},"mapTypes":{},"json":{}}
        Set pLevel = pInternal.level
        Set pJSON = pInternal.json
        Set pParentKey = pInternal.parentKey
        Set pParentType = pInternal.parentType
        Set pCircRefCtrl = pInternal.circRefCtrl
        Set pOriginalJSON = pInternal.originalJSON
        Set pMapTypes = pInternal.mapTypes
        If pParentType="" {
            Set tSC = ..ClassNameToXSD(pClassName,.pJSON,{"printResults":0})
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set pXSDInfo = {"types":{},"list":{},"circularRef":{}}
            Set tMapTypes = ##class(apiPub.core.typeMapper).GetXSDMapTypes()
            If pJSON.%Size()>0{
                Set prop = pJSON.%GetIterator()
                While prop.%GetNext(.key,.value) {
                    If $IsObject(value),value.%Get("proc")="",key'["ArrayOf" {
                        Do ..NodesFromXSD(pClassName,.pXSDInfo,pParams,{"parentKey":(key),"parentType":(key),"level":(1),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pJSON),"mapTypes":(tMapTypes),"json":(value)})
                    }
               }
            }
            If pPrintResults  {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pXSDInfo.%ToJSON(),.jsonString)
                Write jsonString,!
            }
        } Else {
            //Treat Inheritance
            If pJSON.%Get("basedOn")'="",$IsObject(pOriginalJSON.%Get(pJSON.%Get("basedOn"))) {
                Set tSC = ..NodesFromXSD(pClassName,.pXSDInfo,pParams,{"parentKey":(pParentKey),"parentType":(pParentType),"level":(pLevel),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pOriginalJSON),"mapTypes":(pMapTypes),"json":(pOriginalJSON.%Get(pJSON.%Get("basedOn")))})
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
            //Correct Auto-Reference Limitation
            Do pCircRefCtrl.%Set(pParentType_pDelim_pParentType,pParentKey)
            Set tParentCircRefCtrl = {}.%FromJSON(pCircRefCtrl.%ToJSON())
            Set prop = pJSON.%GetIterator()
            While prop.%GetNext(.key,.value) {
                If $IsObject(value) {
                    //Set As Processed Obj
                    Do value.%Set("proc",1)
                    Set tType = value.%Get("type")
                    Set tObjType = pOriginalJSON.%Get(tType)
                    Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select(key'="":key, 1:"")
                    Set tIsArrayType = value.%Get("maxOccurs")="unbounded"
                    If $IsObject(tObjType) {
                        //Set As Processed Obj
                        Do tObjType.%Set("proc",1)
                        If 'tIsArrayType Set tIsArrayType = tObjType.%Get("maxOccurs")="unbounded"
                        //Check If Its An Object Array (wrapped object)
                        Set tCircKey = tParentCircRefCtrl.%Get(pParentType_pDelim_$Select((tIsArrayType):"ArrOf",1:"")_tType)
                        If (tCircKey="")||(tKey'[tCircKey),$IsObject(tObjType) Do pCircRefCtrl.%Set(pParentType_pDelim_$Select((tIsArrayType):"ArrOf",1:"")_tType,tKey)
                        If (tIsArrayType) Do ..SetByLineKey(pXSDInfo,"list."_tKey,1,,".")  
                        If (tCircKey="")||(tKey'[tCircKey) {
                            If $IsObject(tObjType),tObjType.%Get("type")="" {
                                Do ..NodesFromXSD(pClassName,.pXSDInfo,pParams,{"parentKey":(tKey), "parentType":(tType),"level":(pLevel+1),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pOriginalJSON),"mapTypes":(pMapTypes),"json":(tObjType)})
                            } Else {
                                Set tJSONType = $Piece(pMapTypes.%Get($ZConvert(value.%Get("type"),"L")),"|",1)
                                If tJSONType="" Set tJSONType="string"
                                If "boolean number"[tJSONType Do ..SetByLineKey(pXSDInfo,"types."_tKey,tJSONType,,".")  
                            }
                        } Else {
                            If tKey[tCircKey Do ..SetByLineKey(pXSDInfo,"circularRef."_tKey,tCircKey,,".")
                        }
                    } Else {
                        If (tIsArrayType) Do ..SetByLineKey(pXSDInfo,"list."_tKey,1,,".")  
                        Set tJSONType = $Piece(pMapTypes.%Get($ZConvert(value.%Get("type"),"L")),"|",1)
                        If tJSONType="" Set tJSONType="string"
                        If "boolean number"[tJSONType Do ..SetByLineKey(pXSDInfo,"types."_tKey,tJSONType,,".")  
                    }
                }
            }
        }
    }
    Catch(e)
    {
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="ClassNameToXSDInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pXSDInfo:%Library.DynamicObject,pParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
	{
        If '$Data(pParams) Set pParams={}
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pUseCacheDefinition = $Select(pParams.useCacheDefinition'="":pParams.useCacheDefinition,1:1)
        //Get Last Class Modification Date
        Set tSC = ..GetClassDefInfo(pClassName,.tTimeChanged)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        //Cache XSD Definitions 
        Set tDtClassDef = $Piece($Get(^TmpApipubCache(pClassName),""),"||",1)
        If (tDtClassDef="")||(tDtClassDef'=tTimeChanged) {
            Set tSC = ..NodesFromXSD(pClassName,.pXSDInfo,{"printResults":0})
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set ^TmpApipubCache(pClassName)=tTimeChanged_"||"_pXSDInfo.%ToJSON()
        } Else {
            Set pXSDInfo = {}.%FromJSON($Piece(^TmpApipubCache(pClassName),"||",2))
        }
        If pPrintResults {
            Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
            Do tFormatter.FormatToString(pXSDInfo.%ToJSON(),.jsonString)
            Write jsonString,!
        }
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ClassNameToXSD">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pPrintSchema = $Select(pParams.printSchema'="":pParams.printSchema,1:0)
        Set tSw=##class(%XML.Schema).%New()
        Set tSC=tSw.AddSchemaType(pClassName)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSchema=tSw.GetSchema("")
        Set tWt=##class(%XML.Writer).%New()
        Set tWt.Indent=1
        Do tWt.OutputToStream(.tXSD)
        Do tWt.DocumentNode(tSchema)
        If pPrintSchema {
            If $IsObject(tXSD),tXSD.SizeGet()>0{
                Do tXSD.Rewind()
                While (tXSD.AtEnd=0) {
                    Write (tXSD.Read())
                }
            }
        }   
        Set tSC = ..XSDToJSON(tXSD,.pJSON,pParams)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="XSDToJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pXmlStream:%AbstractStream,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject,&pNode:%XML.Node]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try
    {
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"","extensionMap":[],"level":-1,"xmlJSON":{}}
        Set pParentKey = pInternal.parentKey
        Set pExtensionMap = pInternal.extensionMap
        Set pLevel = pInternal.level
        Set pBuild = pInternal.build
        Set pXMLJSON = pInternal.xmlJSON
        If pLevel=-1 {
            Set pInternal.level = 0
            Set tSC = ##class(%XML.Document).GetDocumentFromStream(pXmlStream,.pXMLDoc)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }

            Set pInternal={"parentKey":"","extensionMap":[],"level":0,"xmlJSON":{}}
            Set pNode = pXMLDoc.GetDocumentElement()
            Set tSC = ..XSDToJSON(pXmlStream,.pJSON,pParams,pInternal,pNode)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }

            Set pJSON = pInternal.xmlJSON
            If (pPrintResults) {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pJSON.%ToJSON(),.jsonString)
                Write jsonString
            }
        } Else {
            Set tIdx=""
            Set key = pNode.NodeData
            Do {
                If pNode.NodeType = 0 {
                    Set key = pNode.QName
                    Set tText=""
                    Set status = pNode.GetText(.tText)
                    If 'status Set tText = ""
                    Set tAttCount=pNode.GetNumberAttributes()
                    Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select((key'=""):key, 1:"")
                    Set tLineKey = $Replace($Replace($Replace($Replace($Replace($Replace($Replace($Replace($Replace(tKey,"^element",""),"^attribute",""),"^sequence",""),"^complexContent",""),"^simpleContent",""),"^extension",""),"^annotation",""),"^simpleType",""),"^restriction","")
                    If key="documentation" {
                        If $Length(tLineKey,pDelim)>2 {
                            If $Find(tText,"@apiPub")>0 {
                                Set tSC=..GetMethodParams("@apiPub",tText,.tApiPubParams,.tMethodDesc)
                                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                                Set tText=tMethodDesc
                                Set tCPar = tApiPubParams.%GetIterator()
                                While tCPar.%GetNext(.cpkey,.cpvalue) {
                                    Do ..SetByLineKey(pInternal.xmlJSON,$Piece(tLineKey,pDelim,1,*-1)_pDelim_cpkey,cpvalue,,pDelim)
                                }
                            }
                            Set tSC = ..SetByLineKey(pInternal.xmlJSON,tLineKey,tText,,pDelim)
                        }
                    }
                    If tAttCount>0 {
                        Set tMetaKey = ""
                        Set tAtt=pNode.FirstAttributeName()
                        While tAtt'="" {
                            Set tValue = pNode.GetAttributeValue(tAtt)
                            If pLevel = 1,tAtt="name" {
                                Set tKey = tValue
                            }
                            If key="extension",tAtt="base" {
                                Set tSC = ..SetByLineKey(pInternal.xmlJSON,tLineKey_pDelim_"basedOn",tValue,,pDelim)
                            }
                            If key="restriction",tAtt="base" {
                                Set tSC = ..SetByLineKey(pInternal.xmlJSON,tLineKey_pDelim_"type",$Piece(tValue,":",*),,pDelim)
                                Set tSC = ..SetByLineKey(pInternal.xmlJSON,tLineKey_pDelim_"restriction",1,,pDelim)
                            }
                            If "maxLength minLength"[key,tAtt="value" {
                                If $Length(tLineKey,pDelim)>1 {
                                    Set tSC = ..SetByLineKey(pInternal.xmlJSON,tLineKey,tValue,,pDelim)
                                }
                            }
                            If key="enumeration",tAtt="value" {
                                If $Length(tLineKey,pDelim)>1 {
                                    Set tSC = ..SetByLineKey(pInternal.xmlJSON,tLineKey_pDelim_"+",tValue,,pDelim)
                                }
                            }
                            If pLevel > 1,tAtt="name" {
                                Set tMetaKey = $Replace($Replace($Replace($Replace($Replace($Replace(tKey,"^element",""),"^attribute",""),"^sequence",""),"^complexContent",""),"^simpleContent",""),"^extension","")_pDelim_tValue
                                Set tKey = tKey_pDelim_tValue
                            }
                            Set tAtt=pNode.NextAttributeName(tAtt)
                        }
                        Set tAtt=pNode.FirstAttributeName()
                        While tAtt'="" {
                            If tAtt'="name" {
                                Set tValue = pNode.GetAttributeValue(tAtt)
                                If tMetaKey'="" {
                                    Set tSC = ..SetByLineKey(pInternal.xmlJSON,tMetaKey_pDelim_tAtt,$Piece(tValue,":",*),,pDelim)
                                    If tAtt = "type",$find(tValue,":")>0 {
                                        If tKey["^attribute^" Set tSC = ..SetByLineKey(pInternal.xmlJSON,tMetaKey_pDelim_"attribute",1,"boolean",pDelim)
                                        Set tSC = ..SetByLineKey(pInternal.xmlJSON,tMetaKey_pDelim_"namespace",$Piece(tValue,":",1),,pDelim)
                                    }
                                }    
                            }
                            Set tAtt=pNode.NextAttributeName(tAtt)
                        }
                    }  
                    If pNode.HasChildNodes() {
                        Set tNodeId = pNode.NodeId
                        Do pNode.MoveToFirstChild(1)
                        If pNode.NodeId'=tNodeId {
                            Do ..XSDToJSON(pXmlStream,.pJSON,pParams,{"parentKey":(tKey),"extensionMap":(pExtensionMap),"level":(pLevel+1),"xmlJSON":(pInternal.xmlJSON)}, pNode)
                            Do pNode.MoveToParent(1)
                        }
                    }
                }
            } While (pNode.MoveToNextSibling(1))
        }
    }
    Catch(e)
    {
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.core.jsonBuilder">
<Super>%RegisteredObject</Super>
<TimeChanged>65618,43132.385368</TimeChanged>
<TimeCreated>65556,55151.617765</TimeCreated>

<Method name="SetByLineKey">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pJSON:%Library.DynamicObject,pKey:%String,pValue:%Library.DynamicObject,pType:%String,pDelim:%String=".",pInferBoolean:%Boolean=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
    Try
	{
        Set pKey = $Tr(pKey,"[]",pDelim)
        If $Piece(pKey,pDelim,1)="+" Set $Piece(pKey,pDelim,1) = $Select('$Data(pJSON):0,1:pJSON.%Size())
        If '$Data(pJSON),$Piece(pKey,pDelim,1)=+$Piece(pKey,pDelim,1) Set pJSON=[]
        If '$Data(pJSON) Set pJSON={}  
        Set tRef=pJSON
        For i=1:1:$Length(pKey,pDelim) {
            If $Piece(pKey,pDelim,i+1)="+",tRef.%Get($Piece(pKey,pDelim,i))="" Set $Piece(pKey,pDelim,i+1)=0
            If ($ClassName(tRef)="%Library.DynamicArray")&&($Piece(pKey,pDelim,i)="+") Set $Piece(pKey,pDelim,i)=tRef.%Size()
            Set tPiece = $Tr($Piece(pKey,pDelim,i),"*","")
            Set tNextPiece = $Piece(pKey,pDelim,i+1)
            If i=$Length(pKey,pDelim) {
                If pInferBoolean,($zConvert(pValue,"L")="true")||($zConvert(pValue,"L")="false") {
                    Set pValue=$Select($zConvert(pValue,"L")="true":1,1:0)
                    Set pType = "boolean"
                }
                If $Get(pType,"")'="" {
                    Do tRef.%Set(tPiece,pValue,pType)
                } Else {
                    Do tRef.%Set(tPiece,pValue)
                }
            } Else {
                If tRef.%Get(tPiece)="" Do tRef.%Set(tPiece,$Select(tNextPiece=+tNextPiece:[],1:{}))
                Set tRef = tRef.%Get(tPiece)
            }
        }
    }
	Catch(e)
	{
        Set tSC = e.AsStatus()
	}
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetByLineKey">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSON:%Library.DynamicObject,pKey:%String,pDelim:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Set pKey = $Tr(pKey,"[]",pDelim)
        Set tRef=pJSON
        If pKey="" Quit
        For i=1:1:$Length(pKey,pDelim) {
            If $ClassName(tRef)'["%Library.Dynamic" Set tRef = ""  Quit
            If $ClassName(tRef)="%Library.DynamicArray",$Piece(pKey,pDelim,i)'=+$Piece(pKey,pDelim,i) Set tRef = ""  Quit
            Set tRef=tRef.%Get($Piece(pKey,pDelim,i))
            If tRef="" Quit
        }
    }
	Catch(e)
	{
        Set tSC = e.AsStatus()
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetJSONType">
<ClassMethod>1</ClassMethod>
<FormalSpec>pString:%RawString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    If $Length(pString)>100 Quit "string"
    If ..RegexValidation(pString,"true|false") Quit "boolean"
    If ..RegexValidation(pString,"^[0-9][A-Za-z0-9.,-]*$") Quit "number"
    Quit "string"
]]></Implementation>
</Method>

<Method name="RegexValidation">
<ClassMethod>1</ClassMethod>
<FormalSpec>pString:%String,pRegex:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set matcher=##class(%Regex.Matcher).%New(pRegex)
	Set matcher.Text = pString
	Quit matcher.Locate()
]]></Implementation>
</Method>

<Method name="JSONToFlatJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSON:%Library.DynamicObject,*pFlatJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)

        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"", "parentType":""}
        Set pParentKey = pInternal.parentKey
        Set pParentType = pInternal.parentType

		If pParentType="" {
			Set pFlatJSON = {}
			Do ..JSONToFlatJSON(pJSON,.pFlatJSON,pParams,{"parentKey":"", "parentType":($Select($ClassName(pJSON)="%Library.DynamicArray":"array",1:"object"))})
            If pPrintResults {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pFlatJSON.%ToJSON(),.jsonString)
                Write jsonString,!
            }
		} Else {
			Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
				Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select(key'="":key, 1:"")
				If $IsObject(value) {
                    Do ..JSONToFlatJSON(value,.pFlatJSON,pParams,{"parentKey":(tKey), "parentType":($Select($ClassName(value)="%Library.DynamicArray":"array",1:"object"))})
				} Else {
					Do pFlatJSON.%Set(tKey,value,pJSON.%GetTypeOf(key))
	 			}
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="JSONFromFlatJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFlatJSON:%Library.DynamicObject,*pDeepJSON:%Library.DynamicObject,pParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1) 

        Set pDeepJSON = {}
		Set prop = pFlatJSON.%GetIterator()
		Set tRef=""
		While (prop.%GetNext(.key,.value)) {
			If tRef="",$Piece(key,pDelim,1)=+$Piece(key,pDelim,1) Set pDeepJSON=[]
			Set tRef=pDeepJSON
			For i=1:1:$Length(key,pDelim) {
				Set tPiece = $Piece(key,pDelim,i)
				Set tNextPiece = $Piece(key,pDelim,i+1)
				If i=$Length(key,pDelim) {
					Do tRef.%Set(tPiece,value,pFlatJSON.%GetTypeOf(key))
				} Else {
					If tRef.%Get(tPiece)="" Do tRef.%Set(tPiece,$Select(tNextPiece=+tNextPiece:[],1:{}))  
					Set tRef = tRef.%Get(tPiece)
				}
			}
		}
        If pPrintResults {
            Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
            Do tFormatter.FormatToString(pDeepJSON.%ToJSON(),.jsonString)
            Write jsonString,!
        }
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="JSONAppend">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pJSON:%Library.DynamicObject,&pExistingJSON:%Library.DynamicObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
        Set tSC = ..JSONToFlatJSON(pJSON,.tFJSON,{"printResults":0})
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Set tM = tFJSON.%GetIterator()
        While tM.%GetNext(.mkey,.mvalue) {
            Do ..SetByLineKey(pExistingJSON,mkey,mvalue,,"^")
        }
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetIdxPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAPIMap:%Library.DynamicObject,*pIndexedMap:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		Set pIndexedMap = {}
		Set prop = pAPIMap.%Get("paths").%GetIterator()
		While (prop.%GetNext(.key,.value)) {
			Set tKey = ""
			For i=1:1:$Length(key,"/") {
				Set tParName = ""
				Set tPc = $Replace($Piece(key,"/",i),":","")
				If i=1 Set tPc = $ZConvert(tPc,"S")
				If $Find(tPc,"{")>0,$Find(tPc,"}")>0 {
					Set tParName = $Replace($Replace(tPc,"{",""),"}","")
					If tParName'="" Do ..SetByLineKey(pIndexedMap,tKey_"^@parName",tParName,,"^")
					Set tPc = "@P"
				}
				Set tKey = tKey_$Select(i=1:"",1:"^")_tPc
			}
			If $IsObject(value) {
				Do ..SetByLineKey(pIndexedMap,tKey,value,,"^")
			} Else {
				Do ..SetByLineKey(pIndexedMap,tKey,{"@operationId":(value)},,"^")
			}
			Do ..SetByLineKey(pIndexedMap,tKey_"^@path",key,,"^")
			If tParName'="" Do ..SetByLineKey(pIndexedMap,tKey_"^@parName",tParName,,"^")
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Separate Behaviour params (starts with _) from Method/Request params

]]></Content>
</UDLText>

<Method name="GetRequestParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReqParams:%String,*pParams:%Library.DynamicObject,*pBehavParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If '$Data(pParams) Set pParams = {}
        If '$Data(pBehavParams) Set pBehavParams = {}
        If pReqParams="" Set pReqParams="{}"
        Set tIter = {}.%FromJSON(pReqParams).%GetIterator()
        While tIter.%GetNext(.key,.value) {
            If $ZConvert(value,"L")="true" Set value = 1
            If $ZConvert(value,"L")="false" Set value = 0
            If $Extract(key,1,1)="_" {
                Do pBehavParams.%Set($Extract(key,2,*),value)
            } Else {
                Do pParams.%Set(key,value)
            }
        }
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.core.parser">
<Super>apiPub.core.jsonBuilder</Super>
<TimeChanged>65625,56113.83532</TimeChanged>
<TimeCreated>65581,50046.521105</TimeCreated>

<Method name="Parse">
<ClassMethod>1</ClassMethod>
<FormalSpec>pObjName:%String,pJSON:%Library.DynamicObject,pSchema:%Library.DynamicObject,*pResult:%Library.DynamicObject,*pInLineResult:%String,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)

        //Internal Params
        If '$Data(pInternal) Set pInternal={"oPKey":"","pKey":"" ,"pType":"","originalJSON":(pJSON),"level":0}
        Set pKey = pInternal.pKey
        Set pOPKey = pInternal.oPKey
        Set pParentType = pInternal.pType
        Set pLevel = pInternal.level
		If pParentType="" {
			Set pResult = {"valid":1,"invalidItems":[]}
            Set tSC = ..GetFlatSchema(pObjName,pSchema,.tFlatSchema,{"printResults":0})
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            Do ..Parse(pObjName,pJSON,tFlatSchema,.pResult,.pInLineResult,pParams,{"oPKey":(pObjName),"pKey":(pObjName), "pType":($Select($ClassName(pJSON)="%Library.DynamicArray":"array",1:"object")),"originalJSON":(pInternal.originalJSON),"level":1})
            Set tInLineText = ""
            Set tIP = pResult."invalidItems".%GetIterator()
            While (tIP.%GetNext(.pskey,.psvalue)) {
                Set tInLineText=$Select(tInLineText'="":tInLineText_"; ",1:tInLineText)_psvalue
            }
            If tInLineText="" Set tInLineText="1"
            Set pInLineResult = tInLineText
            If pPrintResults {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pResult.%ToJSON(),.jsonString)
                Write jsonString,!
            }
		} Else {
            If pSchema.%Get("required").%Get(pKey)'="" {
                Set tReq = pSchema.%Get("required").%Get(pKey).%GetIterator()
                While (tReq.%GetNext(.rkey,.rvalue)) {
                    If pJSON.%Get(rkey)="" {
                        Do pResult.%Set("valid",0)
                        Do pResult.%Get("invalidItems").%Push("Path "_$Replace($Replace(pOPKey,"^","."),".[","[")_"."_rkey_" is required")
                    }
                }
            }
			Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
				Set tKey = $Select(pKey'="":pKey_pDelim, 1:"")_$Select(key'="":$Select((pParentType="array")&&(key=+key):"0",1:key), 1:"")
				Set tOKey = $Select(pOPKey'="":pOPKey_pDelim, 1:"")_$Select(key'="":$Select((pParentType="array")&&(key=+key):"["_key_"]",1:key), 1:"")
                Set tSchemaVal = pSchema.%Get(tKey)
				If $IsObject(value) {
                    If $Piece(tSchemaVal,pDelim,1)="circRef" Set tKey=$Piece(tSchemaVal,pDelim,2,*)
                    If tSchemaVal'="" {
                        If (pResult.%Get("valid")),$Find(tSchemaVal,"*object")=0 Do ..Parse(pObjName,value,pSchema,.pResult,.pInLineResult,pParams,{"oPKey":(tOKey),"pKey":(tKey), "pType":($Select($ClassName(value)="%Library.DynamicArray":"array",1:"object")),"originalJSON":(pInternal.originalJSON),"level":(pLevel+1)})
                    }
	 			} Else {
                    If tSchemaVal'="" {
                        If pSchema.%Get(tKey_pDelim_"enum")'="" {
                            Set tList=$Listfromstring(pSchema.%Get(tKey_pDelim_"enum"),"^")
                            If $Listfind(tList,value)=0 {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid enumerator value ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        }
                        If pSchema.%Get(tKey_pDelim_"format")="date-time" {
                            If '(##class(%Library.TimeStamp).IsValid(##class(%Library.TimeStamp).XSDToLogical(value))) {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid date-time format ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        } ElseIf pSchema.%Get(tKey_pDelim_"format")="date" {
                            If '(##class(%Library.Date).IsValid(##class(%Library.Date).XSDToLogical(value))) {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid date format ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        } ElseIf pSchema.%Get(tKey_pDelim_"format")="int32" {
                            If '(##class(%Library.SmallInt).IsValid(value)) {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid int32 format ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        } ElseIf pSchema.%Get(tKey_pDelim_"format")="int64" {
                            If '(##class(%Library.BigInt).IsValid(value)) {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid int64 format ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        } ElseIf pSchema.%Get(tKey)="integer" {
                            If '(##class(%Library.BigInt).IsValid(value)) {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid integer type ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        } ElseIf pSchema.%Get(tKey)="number" {
                            If '(##class(%Library.Numeric).IsValid(value)) {
                                Do pResult.%Set("valid",0)
                                Do pResult.%Get("invalidItems").%Push("Invalid numeric type ("_value_") on: "_$Replace($Replace(tOKey,"^","."),".[","[")_" path")
                            }
                        }
                    }
                }
                If tSchemaVal="" {
                    Do pResult.%Set("valid",0)
                    Do pResult.%Get("invalidItems").%Push("Invalid path: "_$Replace($Replace(tOKey,"^","."),".[","["))
                } 
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetFlatSchema">
<ClassMethod>1</ClassMethod>
<FormalSpec>pObjName:%String,pJSON:%Library.DynamicObject,*pSchema:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)

        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"", "parentType":"","originalJSON":(pJSON),"level":0}
        Set pParentKey = pInternal.parentKey
        Set pParentType = pInternal.parentType
        Set pLevel = pInternal.level
		If pParentType="" {
			Set pSchema = {"required":{}}
            If pJSON.%Get(pObjName) = "" {
                Set tSC = $$$ERROR($$$GeneralError, "invalid schema")
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }        
			Set tSC = ..GetFlatSchema(pObjName,{}.%Set(pObjName,pJSON.%Get(pObjName)) ,.pSchema,pParams,{"parentKey":"", "parentType":($Select($ClassName(pJSON)="%Library.DynamicArray":"array",1:"object")),"originalJSON":(pInternal.originalJSON),"level":1})
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            If pPrintResults {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pSchema.%ToJSON(),.jsonString)
                Write jsonString,!
            }
		} Else {
			Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
                If pParentType="array",key=+key Set key="*"
                If key="items" Set key="0"
				Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select(key'="":key, 1:"")
				If $IsObject(value) {
                    Do ..GetFlatSchema(pObjName,value,.pSchema,pParams,{"parentKey":(tKey), "parentType":($Select($ClassName(value)="%Library.DynamicArray":"array",1:"object")),"originalJSON":(pInternal.originalJSON),"level":(pLevel+1)})
    			} Else {
                    If $Piece(tKey,pDelim,*)="$ref","allOf anyOf"[$Piece(tKey,pDelim,*-2) {
                        Set tJSON = ..GetByLineKey(pInternal.originalJSON,$Piece(value,"#/components/schemas/",2),"/")
                        If tJSON'="",$IsObject(tJSON) {
                            Set tKey = $Piece(tKey,pDelim,1,*-3)
                            If ($Length(tKey,pDelim)<5)||($Piece(tKey,pDelim,1,*-2)'[$Piece(tKey,pDelim,*-1,*)) {
                                Do ..GetFlatSchema(pObjName,tJSON,.pSchema,pParams,{"parentKey":(tKey), "parentType":"object","originalJSON":(pInternal.originalJSON),"level":(pLevel+1)})
                            } Else {
                                Set tFind = $Find(tKey,$Piece(tKey,pDelim,*-1,*))
                                Set tFValue = $Replace($Replace($Replace($Replace($Replace($Replace($Extract(tKey,1,tFind-1),"^properties",""),"^anyOf",""),"^allOf",""),"^type",""),"^*^","^"),"^*","")
                                Set tFkey=$Replace($Replace($Replace($Replace($Replace($Replace(tKey,"^properties",""),"^anyOf",""),"^allOf",""),"^type",""),"^*^","^"),"^*","")
                                Do pSchema.%Set(tFkey,"circRef"_pDelim_tFValue)
                            }
                        }
                    } Else {
					    If $Piece(tKey,pDelim,*)="$ref" {
                            Set tJSON = ..GetByLineKey(pInternal.originalJSON,$Piece(value,"#/components/schemas/",2),"/")
                            If tJSON'="",$IsObject(tJSON) {
                                Set tKey = $Piece(tKey,pDelim,1,*-1)
                                If ($Length(tKey,pDelim)<5)||($Piece(tKey,pDelim,1,*-2)'[$Piece(tKey,pDelim,*-1,*)) {
                                    Do ..GetFlatSchema(pObjName,tJSON,.pSchema,pParams,{"parentKey":(tKey), "parentType":"object","originalJSON":(pInternal.originalJSON),"level":(pLevel+1)})
                                } Else {
                                    Set tFind = $Find(tKey,$Piece(tKey,pDelim,*-1,*))
                                    Set tFValue = $Replace($Replace($Replace($Replace($Replace($Replace($Extract(tKey,1,tFind-1),"^properties",""),"^anyOf",""),"^allOf",""),"^type",""),"^*^","^"),"^*","")
                                    Set tFkey=$Replace($Replace($Replace($Replace($Replace($Replace(tKey,"^properties",""),"^anyOf",""),"^allOf",""),"^type",""),"^*^","^"),"^*","")
                                    Do pSchema.%Set(tFkey,"circRef"_pDelim_tFValue)
                                }
                            }
                        } ElseIf ("format type"[$Piece(tKey,pDelim,*))||($Piece(tKey,pDelim,*-1)="enum")||($Piece(tKey,pDelim,*-1)="required") {
                            Set tFkey=$Replace($Replace($Replace($Replace($Replace($Replace($Replace(tKey,"^properties",""),"^anyOf",""),"^allOf",""),"^type",""),"^*^","^"),"^*",""),"^required","")
                            If $Piece(tKey,pDelim,*-1)="required" { 
                               Do ..SetByLineKey(pSchema,"required."_tFkey_"."_value,1,,".")  
                            } Else {
                                Set tParent = $Piece(tFkey,pDelim,1,*-1)
                                If $Extract(pSchema.%Get(tParent),1,1)="*" Do pSchema.%Set(tParent,$Extract(pSchema.%Get(tParent),2,*))
                                Set tExValue = pSchema.%Get(tFkey)
                                If tExValue="" {
                                    Do pSchema.%Set(tFkey,$Select("object array"[value:"*",1:"")_value)
                                } Else {
                                    If tExValue'[value Do pSchema.%Set(tFkey,tExValue_"^"_value)
                                }
                            }
                        }  
                    }
	 			}
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.core.publisher">
<Super>apiPub.core.jsonBuilder</Super>
<TimeChanged>65647,36567.180242</TimeChanged>
<TimeCreated>65560,32142.701525</TimeCreated>

<Method name="GetOASFromClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pBaseURL:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$Data(pParams) Set pParams={}
        If '$Data(pBaseURL) Set pBaseURL=""
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^")
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        Set pIncludeXML = $Select(pParams.includeXML'="":pParams.includeXML,1:0)
        Set pNestedMode = $Select(pParams.nestedMode'="":pParams.nestedMode,1:0)
        Set pClassMethodOnly = $Select(pParams.classMethodOnly'="":pParams.classMethodOnly,1:0)
        Set pMethodName = $Select(pParams.methodName'="":pParams.methodName,1:"")
        Set pBasePath = $Select(pParams.basePath'="":pParams.basePath,1:"")
        Set pJSON = {}
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||SERVICENAME")
        Set tTitle=pClassName_" API"
        If $IsObject(tMParam) Set tTitle = tMParam.Default
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||TITLE")
        If $IsObject(tMParam) Set tTitle = tMParam.Default
        Set pNS=pBaseURL
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||SERVICEURL")
        If $IsObject(tMParam) Set pNS = tMParam.Default
        Set tSC = ##Class(apiPub.core.irisMetadata).GetMethodsInfo(pClassName,pMethodName,.mInfo,{"printResults":0})
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||DESCRIPTION")
        Set pDescription = pParams.description
        If $IsObject(tMParam) Set pDescription = tMParam.Default
        If pDescription="" Set pDescription = mInfo.%Get("description")
        If pDescription="" Set pDescription = tTitle
        Set tSchemas = {}
        Set tSchemaDef = {}
        Set tTitle = $Select(pParams.title'="":pParams.title,1:tTitle)
        Set tVersion = "1.0.0-oas3"
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||VERSION")
        If $IsObject(tMParam) Set tVersion = tMParam.Default
        Set tTermsOfService="http://swagger.io/terms/"
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||TERMSOFSERVICE")
        If $IsObject(tMParam) Set tTermsOfService = tMParam.Default
        Set tContactName = ""
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||CONTACTNAME")
        If $IsObject(tMParam) Set tContactName = tMParam.Default
        If tContactName'="" Do ..SetByLineKey(tSchemaDef,"info.contact.name",tContactName,,".")
        Set tContactEmail = "apiteam@swagger.io"
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||CONTACTEMAIL")
        If $IsObject(tMParam) Set tContactEmail = tMParam.Default
        Set tContactURL = ""
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||CONTACTURL")
        If $IsObject(tMParam) Set tContactURL = tMParam.Default
        Set tLicenseName = "Apache 2.0"
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||LICENSENAME")
        If $IsObject(tMParam) Set tLicenseName = tMParam.Default
        Set tLicenseURL = "http://www.apache.org/licenses/LICENSE-2.0.html"
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||LICENSEURL")
        If $IsObject(tMParam) Set tLicenseURL = tMParam.Default
        Set pTagName=pClassName
        Set (pTagDescription,pTagDocsDescription,pTagDocsUrl)=""
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||TAGNAME")
        If $IsObject(tMParam) Set pTagName = tMParam.Default
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||TAGDESCRIPTION")
        If $IsObject(tMParam) Set pTagDescription = tMParam.Default
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||TAGDOCSDESCRIPTION")
        If $IsObject(tMParam) Set pTagDocsDescription = tMParam.Default
        Set tMParam=##class(%Dictionary.ParameterDefinition).%OpenId(pClassName_"||TAGDOCSURL")
        If $IsObject(tMParam) Set pTagDocsUrl = tMParam.Default
        Set tTags=0
        Do ..SetByLineKey(tSchemaDef,"openapi","3.0.0",,".")
        If mInfo.%Get("customInfo")'="" {
            Do ..SetByLineKey(tSchemaDef,"info",mInfo.%Get("customInfo"),,".")
        } Else {
            Do ..SetByLineKey(tSchemaDef,"info.description",pDescription,,".")
            Do ..SetByLineKey(tSchemaDef,"info.version",tVersion,,".")
            Do ..SetByLineKey(tSchemaDef,"info.title",tTitle,,".")
            Do ..SetByLineKey(tSchemaDef,"info.termsOfService",tTermsOfService,,".")
            Do ..SetByLineKey(tSchemaDef,"info.contact.email", tContactEmail,,".")
            Do ..SetByLineKey(tSchemaDef,"info.contact.url", tContactURL,,".")
            Do ..SetByLineKey(tSchemaDef,"info.license.name",tLicenseName,,".")
            Do ..SetByLineKey(tSchemaDef,"info.license.url",tLicenseURL,,".")
        }
        If mInfo.%Get("customTags")'="" {
            Do ..SetByLineKey(tSchemaDef,"tags",mInfo.%Get("customTags"),,".")
            Set pTagName=mInfo.%Get("customTags").%Get(0).%Get("name")
        } Else {
            Do tSchemaDef.%Set("tags",[])
        }
        Do tSchemaDef.%Set("paths",{})
        If mInfo.%Get("customSchemas")'="" {
            Do ..SetByLineKey(tSchemaDef,"components.schemas",mInfo.%Get("customSchemas"),,".")
        }
        Set tMet = mInfo.%Get("methods").%GetIterator()
        While tMet.%GetNext(.key,.value) {
            Set (tTagDescription,tTagDocsDescription,tTagDocsUrl)=""
            If (pClassMethodOnly),'(value.%Get("classMethod")) Continue
            Set tDescription = $Select(value.%Get("description")'="":value.%Get("description"),1:"")
            If value.%Get("customParams").%Get("description")'="" Set tDescription = value.%Get("customParams").%Get("description")
            Set tSummary = tDescription
            If value.%Get("customParams").%Get("summary")'="" Set tSummary = value.%Get("customParams").%Get("summary")
            Set tVerb=$zConvert(value.%Get("verb"),"L")
            Set tDeprecated=value.%Get("customParams").%Get("deprecated")
            If $ZConvert(tDeprecated,"L")="true" Set tDeprecated = 1
            If '(tDeprecated) Set tDeprecated = 0
            Set tInBodyObjCount = value.%Get("inputBodyParams").%Size()+value.%Get("byRefBodyParams").%Size()
            If value.%Get("customParams").%Get("path")'="" {
                Set tPath = $Replace("/"_$Select(pBasePath'="":pBasePath_"/",1:"")_value.%Get("customParams").%Get("path"),"//","/")
            } Else {
                Set tPath = $Replace("/"_$Select(pBasePath'="":pBasePath_"/",1:"")_key,"//","/")
            }
            Set tOperationId = value.%Get("customParams").%Get("operationId")
            If tOperationId="" Set tOperationId=key
            Set tConsumes = value.%Get("customParams").%Get("consumes")
            Set tProduces = value.%Get("customParams").%Get("produces")
            Set tTagName=pTagName
            Set tCustomTag = value.%Get("customParams").%Get("tag")
            If tCustomTag'="",$IsObject(tCustomTag) {
                If tCustomTag.%Get("name")'="" Set tTagName = tCustomTag.%Get("name")
            }
            If tCustomTag'="",'$IsObject(tCustomTag) Set tTagName = tCustomTag
            If tTagName=pTagName {
                If tTagDescription="" Set tTagDescription=pTagDescription
                If tTagDocsDescription="" Set tTagDocsDescription=pTagDocsDescription
                If tTagDocsUrl="" Set tTagDocsUrl=pTagDocsUrl
            }
            Set tTagKey=-1
            Set tTags = tSchemaDef.%Get("tags").%GetIterator()
            While tTags.%GetNext(.tkey,.tvalue) {
                If tvalue.%Get("name")=tTagName {
                    Set tTagKey = tkey
                }
            }
            If tTagKey=-1 {
                Set tTagKey=tSchemaDef.%Get("tags").%Size()
                Do ..SetByLineKey(tSchemaDef,"tags"_pDelim_tTagKey_pDelim_"name",tTagName,,pDelim)
            }
            If tTagDescription'="" Do ..SetByLineKey(tSchemaDef,"tags"_pDelim_tTagKey_pDelim_"description",tTagDescription,,pDelim)
            If tTagDocsDescription'="" Do ..SetByLineKey(tSchemaDef,"tags"_pDelim_tTagKey_pDelim_"externalDocs"_pDelim_"description",tTagDocsDescription,,pDelim)
            If tTagDocsUrl'="" Do ..SetByLineKey(tSchemaDef,"tags"_pDelim_tTagKey_pDelim_"externalDocs"_pDelim_"url",tTagDocsUrl,,pDelim)
            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^tags[0]",tTagName,,"^")
            If tSummary'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^summary",tSummary,,"^")
            If tDescription'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^summary",tDescription,,"^")
            If (tDeprecated) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^deprecated",tDeprecated,"boolean","^")
            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^operationId",tOperationId,,"^")
            If tConsumes'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^consumes",tConsumes,,"^")
            If tProduces'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^produces",tProduces,,"^")
            Set tOutParObjCount=0
            Set (tParamDescription,tParamRequired)=""
            If value.%Get("customParams").%Get("params")'="" {
                Set tParamDescription = value.%Get("customParams").%Get("params").%Get("description")
                Set tParamRequired = value.%Get("customParams").%Get("params").%Get("required")
                If tParamRequired="" Set tParamRequired=1
            }
            Set tPar = value.%Get("formalSpec").%GetIterator()
            While tPar.%GetNext(.pkey,.pvalue) {
                Set tIsArray=($Piece(pvalue.%Get("paramType"),"|",2)'="")
                If pvalue.%Get("inputType")'="",$Find("application/x-www-form-urlencoded",pvalue.%Get("inputType"))>0 {
                    //for x-www-form-urlencoded inputType
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^type","object",,"^")
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^properties^"_pvalue.%Get("paramName")_"^type",pvalue.%Get("pmJDType"),,"^")
                    If pvalue.%Get("pmJDFormat")'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^properties^"_pvalue.%Get("paramName")_"^format",pvalue.%Get("pmJDFormat"),,"^")
                    Set tCustomParams = value.%Get("customParams").%Get("params").%Get(pvalue.%Get("param"))
                    If tCustomParams'="" {
                        If tCustomParams.%Get("description")'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^properties^"_pvalue.%Get("paramName")_"^description",tCustomParams.%Get("description"),,"^") 
                    }
                } ElseIf pvalue.%Get("inputType")'="",pvalue.%Get("inputType")'="header" {
                     //other input types  (entire body)
                    If tParamDescription'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^description",tParamDescription,,"^")
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^type",pvalue.%Get("pmJDType"),,"^")
                    If pvalue.%Get("pmJDFormat")'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^format",pvalue.%Get("pmJDFormat"),,"^")
                    Set tCustomParams = value.%Get("customParams").%Get("params").%Get(pvalue.%Get("param"))
                    If tCustomParams'="" {
                        If tCustomParams.%Get("description")'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^content^"_pvalue.%Get("inputType")_"^schema^description",tCustomParams.%Get("description"),,"^")
                    }
                } ElseIf pvalue.%Get("pmJDType")'="",'(pvalue.%Get("outputOnly")) {
                    // query and path params and header inputType
                    If tParamDescription'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^description",tParamDescription,,"^")
                    Set tInType="query"
                    If $Find(tPath,"{"_pvalue.%Get("paramName")_"}")>0 Set tInType="path"
                    If pvalue.%Get("inputType")'="" Set tInType = pvalue.%Get("inputType")
                    Set tParObj = {
                        "in":(tInType),
                        "name":(pvalue.%Get("paramName")),
                        "schema":{
                            "type":(pvalue.%Get("pmJDType"))
                        }
                    } 
                    If $Find("path",tInType)>0 Do tParObj.%Set("required",1,"boolean")
                    Set tParams = pvalue.%Get("params")
                    For i=1:1:$Length(tParams,"|") {
                        Set tAttName=$Piece($Piece(tParams,"|",i),"=",1)
                        Set tAttValue=$Piece($Piece(tParams,"|",i),"=",2)
                        If tAttName="MINVAL" Do tParObj.%Get("schema").%Set("minimum",tAttValue,pvalue.%Get("pmJType"))
                        If tAttName="MINVAL", tParams'["MAXVAL" Do tParObj.%Get("schema").%Set("exclusiveMaximum",1,"boolean")
                        If tAttName="MAXVAL" Do tParObj.%Get("schema").%Set("maximum",tAttValue,pvalue.%Get("pmJType"))
                        If tAttName="MAXVAL", tParams'["MINVAL" Do tParObj.%Get("schema").%Set("exclusiveMinimum",1,"boolean")
                        If tAttName="MINLEN" Do tParObj.%Get("schema").%Set("minLength",tAttValue,"number")
                        If tAttName="MAXLEN" Do tParObj.%Get("schema").%Set("maxLength",tAttValue,"number")
                    }
                    If pvalue.%Get("pmJDFormat")'="" Do tParObj.%Get("schema").%Set("format",pvalue.%Get("pmJDFormat"))
                    If (tIsArray) {
                        Do ..SetByLineKey(tParObj,"schema^type","array",,"^")
                        Do ..SetByLineKey(tParObj,"schema^items^type",pvalue.%Get("pmJDType"),,"^")
                        If pvalue.%Get("pmJDFormat")'="" Do ..SetByLineKey(tParObj,"schema^items^format",pvalue.%Get("pmJDFormat"),,"^")
                        Do ..SetByLineKey(tParObj,"style","form",,"^")
                        Do ..SetByLineKey(tParObj,"explode","false","boolean","^")
                    }
                    //custom params
                    If value.%Get("customParams").%Get("params")'="" {
                        Set tCustomParams = value.%Get("customParams").%Get("params").%Get(pvalue.%Get("param"))
                        If tCustomParams'="" {
                            Set tSC = ..JSONToFlatJSON(tCustomParams,.tCustomFlatParams,{"printResults":0})
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                            Set tIt = tCustomFlatParams.%GetIterator()
                            While tIt.%GetNext(.ckey,.cvalue) {
                                If $Find("inputType outputType",ckey)>0 Continue 
                                Do ..SetByLineKey(tParObj,ckey,cvalue,$Select((ckey="required")||($Find("true false",$ZConvert(cvalue,"L"))>0):"boolean",1:""),"^")
                                //change to array if string type
                                If tParObj.%Get("schema").%Get("type")="string",$Find(ckey,"schema^items^enum")>0 {
                                   Do tParObj.%Get("schema").%Set("type","array")
                                   Do tParObj.%Get("schema").%Get("items").%Set("type","string")
                                   Do tParObj.%Set("style","form")
                                   Do tParObj.%Set("explode","false","boolean")
                                }
                            }
                        }
                    }
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^parameters[+]",tParObj,,"^")
                    If (pvalue.%Get("outputOnly")=1)||(pvalue.%Get("byRef")=1) Set tOutParObjCount=tOutParObjCount+1
                }
            }
            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^description","successful operation",,"^")
            Set tOutBodyObjCount = value.%Get("byRefBodyParams").%Size()+value.%Get("outputBodyParams").%Size()
            Set tSingleOutputObj = (tOutBodyObjCount=1)&&(tOutParObjCount=0)
            If (tOutBodyObjCount+tOutParObjCount)>1 {
                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^type","object",,"^")
                If (pIncludeXML) {
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^type","object",,"^")
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^xml^name","response",,"^")
                }
            }
            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^security[0]^basicAuth",[],,"^")
            Set tPar = value.%Get("formalSpec").%GetIterator()
            While tPar.%GetNext(.pkey,.pvalue) {
                Set tIsArray=($Piece(pvalue.%Get("paramType"),"|",2)'="")
                If ((pvalue.%Get("outputOnly")=1)||(pvalue.%Get("byRef")=1)) {
                    Set tParamType = $Piece($Piece(pvalue.%Get("paramType"),"|",1),".",*)
                    If pvalue.%Get("complexType")=1,tOutBodyObjCount>0 {
                        If "DynamicObject DynamicArray"[tParamType {
                            Set tJSONSchema = pvalue.%Get("customSchema")
                            If tJSONSchema="" Set tJSONSchema = pvalue.%Get("customSchemaName")
                            Set tObjectName = pvalue.%Get("customSchemaName")
                            If tJSONSchema'="",'$IsObject(tJSONSchema) {
                                If mInfo.%Get("customSchemas").%Get(tObjectName)'="" {
                                    Set tJSONSchema={}.%Set(tObjectName,mInfo.%Get("customSchemas").%Get(tObjectName))
                                }
                            }
                            If $IsObject(tJSONSchema),tJSONSchema.%Size()=1 {
                                Do pvalue.%Set("paramType",tObjectName)
                                Set tParamType = tObjectName
                                Set jsonResp={}.%FromJSON(tJSONSchema.%ToJSON())
                                Do ..SetByLineKey(pvalue,"customObj",{}.%FromJSON(jsonResp.%ToJSON()),,pDelim)
                            } Else {
                                Set tParamType = $Select(tParamType="DynamicArray":"array", 1:"object")
                            }
                        } Else {
                            Set tSC = ..GetOpenAPISchema($Piece(pvalue.%Get("paramType"),"|",1),.jsonResp,{"printResults":0,"nestedMode":(pNestedMode)})
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                            If (tSC),jsonResp.%Size()=0 {
                                Set tParamType = $Select(tParamType="DynamicArray":"array", 1:"object")
                            }                            
                        }
                        If tParamType="object" {
                            If (tSingleOutputObj) {
                                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^type","object",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^type","object",,"^")
                            } Else {
                                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^type","object",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^type","object",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^xml^name",pvalue.%Get("paramName"),,"^")
                            }
                        } ElseIf tParamType="array" {
                            Set tArrayObj = {"anyOf":[
                                    {"type":"object"},
                                    {"type":"string"},
                                    {"type":"number"},
                                    {"type":"boolean"}
                                ]}
                            If (tSingleOutputObj) {
                                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^type","array",,"^")
                                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^items",tArrayObj,,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^type","array",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^items",tArrayObj,,"^")
                            } Else {
                                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^type","array",,"^")
                                Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^items",tArrayObj,,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^type","array",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^items",tArrayObj,,"^")
                            }
                        } Else {
                            Set tSchem = jsonResp.%GetIterator()
                            While tSchem.%GetNext(.skey,.svalue) {
                                If tParamType=skey {
                                    If (tSingleOutputObj) {
                                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                    } Else {
                                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^allOf^0^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^xml^name",pvalue.%Get("paramName"),,"^")
                                    }
                                }
                                If ..GetByLineKey(tSchemaDef,"components^schemas^"_skey,"^")="" Do ..SetByLineKey(tSchemaDef,"components^schemas^"_skey,svalue,,"^")
                                If (tParamType=skey),(tIsArray) {
                                    Do ..SetByLineKey(tSchemaDef,"components^schemas^arrayOf"_skey_"^type","array",,"^")
                                    Do ..SetByLineKey(tSchemaDef,"components^schemas^arrayOf"_skey_"^items^$ref","#/components/schemas/"_skey,,"^")
                                }
                            }
                        }
                    } ElseIf pvalue.%Get("pmJDType")'="",pvalue.%Get("pmJType")'="status",pvalue.%Get("outputType")="header" {
                        Set tParamDesc = ..GetByLineKey(value,"customParams^params^"_pvalue.%Get("param")_"^description",pDelim)
                        If tParamDesc'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^"_pvalue.%Get("paramName")_"^description",tParamDesc,,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^"_pvalue.%Get("paramName")_"^schema^type",pvalue.%Get("pmJDType"),,"^")
                        If pvalue.%Get("pmJDFormat")'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^"_pvalue.%Get("paramName")_"^schema^format",pvalue.%Get("pmJDFormat"),,"^")
                    } ElseIf pvalue.%Get("pmJDType")'="",pvalue.%Get("pmJType")'="status",pvalue.%Get("outputType")'="" {
                        Set tParamDesc = ..GetByLineKey(value,"customParams^params^"_pvalue.%Get("param")_"^description",pDelim)
                        If tParamDesc'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^description",tParamDesc,,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^"_pvalue.%Get("outputType")_"^schema^type",pvalue.%Get("pmJDType"),,"^")
                        If pvalue.%Get("pmJDFormat")'="" Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^"_pvalue.%Get("outputType")_"^schema^format",pvalue.%Get("pmJDFormat"),,"^")
                    } ElseIf pvalue.%Get("pmJDType")'="",pvalue.%Get("pmJType")'="status" {
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^type","object",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^type",$Select((tIsArray):"array",1:pvalue.%Get("pmJDType")),,"^")
                        If pvalue.%Get("pmJDFormat")'="",'tIsArray Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^format",pvalue.%Get("pmJDFormat"),,"^")
                        If (tIsArray) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^items^type",pvalue.%Get("pmJDType"),,"^")
                        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^type",$Select((tIsArray):"array",1:pvalue.%Get("pmJDType")),,"^")
                        If (pIncludeXML),(tIsArray) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^items^type",pvalue.%Get("pmJDType"),,"^")
                        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^content^application/xml^schema^xml^name","response",,"^")
                    } ElseIf pvalue.%Get("pmJDType")'="",pvalue.%Get("pmJType")="status" {
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-statuscode^description","1 For Success and 0 For Error",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-statuscode^schema^type","integer",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-statuscode^schema^format","int32",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-statusmessage^description","Display the error text for statuscode",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-statusmessage^schema^type","string",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-errorcode^description","Return an error status code with the error as specified by the internal errorcode",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-errorcode^schema^type","integer",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_value.%Get("successfulCode")_"^headers^iris-errorcode^schema^format","int32",,"^")

                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-statuscode^description","0 For Error",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-statuscode^schema^type","integer",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-statuscode^schema^format","int32",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-statusmessage^description","Display the error text for statuscode",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-statusmessage^schema^type","string",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-errorcode^description","Return an error status code with the error as specified by the internal errorcode",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-errorcode^schema^type","integer",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^headers^iris-errorcode^schema^format","int32",,"^")
                    }
                }
            }
            Set tStatusCodes = value.%Get("customParams").%Get("statusCodes")
            If tStatusCodes'="",$ClassName(tStatusCodes)="%Library.DynamicArray" {
                Set tStat = tStatusCodes.%GetIterator()
                While tStat.%GetNext(.pSkey,.pSvalue) {
                    If pSvalue.%Get("code")'="" {
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_pSvalue.%Get("code")_"^content^application/json^schema^$ref","#/components/schemas/responseStatus",,"^")
                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*"_pSvalue.%Get("code")_"^description",pSvalue.%Get("description"),,"^")
                    }
                }
            }          
            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^content^application/json^schema^$ref","#/components/schemas/responseStatus",,"^")
            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^responses^*500^description","Internal Server Error",,"^")
            //Request
            If (value.%Get("hasComplexParams")) {
                Set tSingleInputObj = (tInBodyObjCount=1)
                If '(tSingleInputObj) {
                    Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^$ref","#/components/requestBodies/"_key_"Request",,"^")
                    Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^type","object",,"^")
                    If tParamDescription'="",'$IsObject(tParamDescription) {
                        Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description",tParamDescription,,"^")
                    }
                    If tParamRequired'="",'$IsObject(tParamRequired) {
                        Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^required",tParamRequired,"boolean","^")
                    }
                    If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^type","object",,"^")
                    If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^xml^name",key_"Request",,"^")
                }
                Set tPar = value.%Get("formalSpec").%GetIterator()
                While tPar.%GetNext(.pkey,.pvalue) {
                    Set tCustomFlatParams = {}
                    If value.%Get("customParams").%Get("params")'="" {
                        Set tCustomParams = value.%Get("customParams").%Get("params").%Get(pvalue.%Get("param"))
                        If tCustomParams'="" {
                            Set tSC = ..JSONToFlatJSON(tCustomParams,.tCustomFlatParams,{"printResults":0})
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        }
                    }
                    If pvalue.%Get("complexType")=1,pvalue.%Get("outputOnly")'=1 {
                        Set tParamType = $Piece($Piece(pvalue.%Get("paramType"),"|",1),".",*)
                        If pvalue.%Get("customObj")'="" {
                            Set jsonResp = {}.%FromJSON(pvalue.%Get("customObj").%ToJSON())
                        } ElseIf "DynamicObject DynamicArray"[tParamType {
                            Set tJSONSchema = pvalue.%Get("customSchema")
                            If tJSONSchema="" Set tJSONSchema = pvalue.%Get("customSchemaName")
                            Set tObjectName = pvalue.%Get("customSchemaName")
                            If tJSONSchema'="",'$IsObject(tJSONSchema) {
                                If mInfo.%Get("customSchemas").%Get(tObjectName)'="" {
                                    Set tJSONSchema={}.%Set(tObjectName,mInfo.%Get("customSchemas").%Get(tObjectName))
                                }
                            }
                            If $IsObject(tJSONSchema),tJSONSchema.%Size()=1 {
                                Do pvalue.%Set("paramType",tObjectName)
                                Set tParamType = tObjectName
                                Set jsonResp={}.%FromJSON(tJSONSchema.%ToJSON())
                                Do ..SetByLineKey(pvalue,"customObj",{}.%FromJSON(jsonResp.%ToJSON()),,pDelim)
                            } Else {
                                Set tParamType = $Select(tParamType="DynamicArray":"array", 1:"object")
                            }
                        } ElseIf pvalue.%Get("customObj")="" {
                            Set tSC = ..GetOpenAPISchema($Piece(pvalue.%Get("paramType"),"|",1),.jsonResp,{"printResults":0,"nestedMode":(pNestedMode)})
                            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                            If (tSC),jsonResp.%Size()=0 {
                                Set tParamType = $Select(tParamType="DynamicArray":"array", 1:"object")
                            }                            
                        }
                        If tParamType="object" {
                            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^$ref","#/components/requestBodies/"_key_"Request",,"^")
                            Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description","Body Request Content",,"^")
                            If tParamDescription'="",'$IsObject(tParamDescription) {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description",tParamDescription,,"^")
                            }
                            If tParamRequired'="",'$IsObject(tParamRequired) {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^required",tParamRequired,"boolean","^")
                            }
                            If tCustomFlatParams.%Get("description")'="" Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description",tCustomFlatParams.%Get("description"),,"^")
                            If tCustomFlatParams.%Get("required")'="" Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^required",tCustomFlatParams.%Get("required"),"boolean","^")
                            If (tSingleOutputObj) {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^type","object",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^type","object",,"^")
                            } Else {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^type","object",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^type","object",,"^")
                            }
                        } ElseIf tParamType="array" {
                            Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^$ref","#/components/requestBodies/"_key_"Request",,"^")
                            Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description","Body Request Content",,"^")
                            If tParamDescription'="",'$IsObject(tParamDescription) {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description",tParamDescription,,"^")
                            }
                            If tParamRequired'="",'$IsObject(tParamRequired) {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^required",tParamRequired,"boolean","^")
                            }
                            If tCustomFlatParams.%Get("description")'="" Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^description",tCustomFlatParams.%Get("description"),,"^")
                            Set tArrayObj = {"anyOf":[
                                    {"type":"object"},
                                    {"type":"string"},
                                    {"type":"number"},
                                    {"type":"boolean"}
                                ]}
                            If (tSingleOutputObj) {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^type","array",,"^")
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^items",tArrayObj,,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^type","array",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^items",tArrayObj,,"^")
                            } Else {
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^type","array",,"^")
                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^items",tArrayObj,,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^type","array",,"^")
                                If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^items",tArrayObj,,"^")
                            }
                        } Else {
                            Set tSchem = jsonResp.%GetIterator()
                            While tSchem.%GetNext(.skey,.svalue) {
                                Set tIsArray=($Piece(pvalue.%Get("paramType"),"|",2)'="")      
                                If tParamType=skey {
                                    If (tSingleInputObj) {
                                        Do ..SetByLineKey(tSchemaDef,"paths^"_tPath_"^"_tVerb_"^requestBody^$ref","#/components/requestBodies/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                        If ..GetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey)="" {
                                            Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^content^application/json^schema^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                            If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^content^application/xml^schema^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                            Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^description","Body Request Content ("_$Select((tIsArray):"arrayOf",1:"")_skey_")",,"^")
                                            If tParamDescription'="",'$IsObject(tParamDescription) {
                                                Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^description",tParamDescription,,"^")
                                            }
                                            If tParamRequired'="",'$IsObject(tParamRequired) {
                                                 Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^required",tParamRequired,"boolean","^")
                                            }
                                            If tCustomFlatParams.%Get("description")'="" Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^description",tCustomFlatParams.%Get("description"),,"^")
                                            If tCustomFlatParams.%Get("required")'="" Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_$Select((tIsArray):"arrayOf",1:"")_skey_"^required",tCustomFlatParams.%Get("required"),"boolean","^")
                                        }
                                    } Else {
                                        Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/json^schema^properties^"_pvalue.%Get("paramName")_"^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^requestBodies^"_key_"Request^content^application/xml^schema^properties^"_pvalue.%Get("paramName")_"^$ref","#/components/schemas/"_$Select((tIsArray):"arrayOf",1:"")_skey,,"^")
                                    }
                                }
                                If ..GetByLineKey(tSchemaDef,"components^schemas^"_skey,"^")="" Do ..SetByLineKey(tSchemaDef,"components^schemas^"_skey,svalue,,"^")
                                If (tParamType=skey),(tIsArray) {
                                    Do ..SetByLineKey(tSchemaDef,"components^schemas^arrayOf"_skey_"^type","array",,"^")
                                    Do ..SetByLineKey(tSchemaDef,"components^schemas^arrayOf"_skey_"^items^$ref","#/components/schemas/"_skey,,"^")
                                }
                            }
                        }
                    }
                }
            }
        }
        Do ..SetByLineKey(tSchemaDef,"components^schemas^responseStatus^type","object",,"^")
        If (pIncludeXML) Do ..SetByLineKey(tSchemaDef,"components^schemas^responseStatus^xml^name","responseStatus",,"^")
        Do ..SetByLineKey(tSchemaDef,"components^schemas^responseStatus^properties^statusCode^type","string",,"^")
        Do ..SetByLineKey(tSchemaDef,"components^schemas^responseStatus^properties^message^type","string",,"^")
        Do ..SetByLineKey(tSchemaDef,"components^schemas^responseStatus^properties^errorCode^type","string",,"^")
        Do ..SetByLineKey(tSchemaDef,"externalDocs^description","Find out more about Swagger",,"^")
        Do ..SetByLineKey(tSchemaDef,"externalDocs^url","http://swagger.io",,"^")
        If mInfo.%Get("customServers")'="" {
            Do ..SetByLineKey(tSchemaDef,"servers",mInfo.%Get("customServers"),,".")
        } Else {
            Do ..SetByLineKey(tSchemaDef,"servers[0]^url",pNS,,"^")
            Do ..SetByLineKey(tSchemaDef,"servers[1]^url",$Replace(pNS,"http",$Select($Find(pNS,"https")>0:"http",1:"https")),,"^")
        }
        If mInfo.%Get("customSecurity")'="" {
            Do ..SetByLineKey(tSchemaDef,"components^securitySchemes",mInfo.%Get("customSecurity"),,"^")
        } Else {
            Do ..SetByLineKey(tSchemaDef,"components^securitySchemes^basicAuth^type","http",,"^")
            Do ..SetByLineKey(tSchemaDef,"components^securitySchemes^basicAuth^scheme","basic",,"^")
        }
        Do ..SetByLineKey(tSchemaDef,"components^responses^UnauthorizedError^description","Authentication information is missing or invalid",,"^")
        Set pJSON = tSchemaDef       
        If pPrintResults {
            Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
            Do tFormatter.FormatToString(pJSON.%ToJSON(),.jsonString)
            Write jsonString
        }
    }
    Catch(e) {
        w $System.Status.GetOneErrorText(e.AsStatus()),!
        Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetOpenAPISchema">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String,*pXSDInfo:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:0)
        Set pNestedMode = $Select(pParams.nestedMode'="":pParams.nestedMode,1:0)
        Set pAttributePrefix = $Select(pParams.attributePrefix'="":pParams.attributePrefix,1:"_")
        Set pCharsKey = $Select(pParams.charskey'="":pParams.charskey,1:"value")

        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"","nestedParentKey":"", "parentType":"", "level":0, "circRefCtrl":{},"originalJSON":{},"mapTypes":{},"json":{},"requiredKeys":{}}
        Set pLevel = pInternal.level
        Set pJSON = pInternal.json
        Set pParentKey = pInternal.parentKey
        Set pNestedParentKey = pInternal.nestedParentKey
        Set pParentType = pInternal.parentType
        Set pCircRefCtrl = pInternal.circRefCtrl
        Set pOriginalJSON = pInternal.originalJSON
        Set pMapTypes = pInternal.mapTypes
        Set pRequiredKeys = pInternal.requiredKeys
		If pParentType="" {
            Set tSC = ##class(apiPub.core.irisMetadata).ClassNameToXSD(pClassName,.pJSON,{"printResults":0})
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
			Set pXSDInfo = {}
            Set tMapTypes = ##class(apiPub.core.typeMapper).GetXSDMapTypes()
            If pJSON.%Size()>0{
                Set prop = pJSON.%GetIterator()
                While prop.%GetNext(.key,.value) {
                    If $IsObject(value),value.%Get("proc")="",key'["ArrayOf" {
                        Set tSC = ..GetOpenAPISchema(pClassName,.pXSDInfo,pParams,{"parentKey":(key),"nestedParentKey":(key),"parentType":(key),"level":(1),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pJSON),"mapTypes":(tMapTypes),"json":(value),"requiredKeys":(pRequiredKeys)})
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                    }
                }
            }
            If pPrintResults  {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pXSDInfo.%ToJSON(),.jsonString)
                Write jsonString,!
            }
		} Else {
            Do pJSON.%Set("proc",1)
            //Treat Inheritance
            Set tBasedOn = pJSON.%Get("basedOn")
            Set tOParentKey = pParentKey
            If tBasedOn'="",$IsObject(pOriginalJSON.%Get(tBasedOn)) {
                Set tType = pOriginalJSON.%Get(tBasedOn).%Get("type")
                If tType="" {
                    If (pNestedMode) {
                        Set tSC = ..GetOpenAPISchema(pClassName,.pXSDInfo,pParams,{"parentKey":(pParentKey),"nestedParentKey":(pNestedParentKey), "parentType":(pParentType),"level":(pLevel),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pOriginalJSON),"mapTypes":(pMapTypes),"json":(pOriginalJSON.%Get(pJSON.%Get("basedOn"))),"requiredKeys":(pRequiredKeys)})
                    } Else {
                        Set tSC = ..GetOpenAPISchema(pClassName,.pXSDInfo,pParams,{"parentKey":(tBasedOn),"nestedParentKey":(tBasedOn), "parentType":(tBasedOn),"level":(1),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pOriginalJSON),"mapTypes":(pMapTypes),"json":(pOriginalJSON.%Get(tBasedOn)),"requiredKeys":(pRequiredKeys)})
                        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                        Do ..SetByLineKey(pXSDInfo,pParentKey_pDelim_"allOf"_pDelim_"0"_pDelim_"$ref","#/components/schemas/"_tBasedOn,,pDelim)  
                        Set pParentKey=pParentKey_pDelim_"allOf"_pDelim_"1"
                    }
                } Else {
                    Set tBasedOnType = $Piece(pMapTypes.%Get($ZConvert($Piece(tType,":",2),"L")),"|",2)
                    If tBasedOnType="" Set tBasedOnType="string"
                    Set tBasedOnFormat = $Piece(pMapTypes.%Get($ZConvert($Piece(tType,":",2),"L")),"|",3)
                    Do ..SetByLineKey(pXSDInfo,pParentKey_pDelim_"properties"_pDelim_pCharsKey_pDelim_"type",tBasedOnType,,pDelim)
                    If tBasedOnFormat'="" Do ..SetByLineKey(pXSDInfo,pParentKey_pDelim_"properties"_pDelim_pCharsKey_pDelim_"format",tBasedOnFormat,,pDelim)
                }
            }
            //Correct Auto-Reference Limitation
            Do pCircRefCtrl.%Set(pParentType_pDelim_pParentType,pNestedParentKey)
            Set tParentCircRefCtrl = {}.%FromJSON(pCircRefCtrl.%ToJSON())
            If pJSON.%Get("type")="" {
                Do ..SetByLineKey(pXSDInfo,pParentKey_pDelim_"type","object",,pDelim)  
                Do ..SetByLineKey(pXSDInfo,pParentKey_pDelim_"xml"_pDelim_"name",$Piece(tOParentKey,pDelim,*),,pDelim)  
                Set pParentKey=pParentKey_pDelim_"properties"
                Set pNestedParentKey=pNestedParentKey_pDelim_"properties"
            } 
            Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
                If $IsObject(value) {
                    Do value.%Set("proc",1)
                    If (value.%Get("attribute")) Set key = pAttributePrefix_key
                    Set tIsArrayType = value.%Get("maxOccurs")="unbounded"
                    Set tType = value.%Get("type")
                    Set tRequired = (value.%Get("minOccurs")="")
                    Set tObjType = pOriginalJSON.%Get(tType)
                    Set tKey = $Select(pParentKey'="":pParentKey_pDelim, 1:"")_$Select(key'="":key, 1:"")
                    Set tNestedKey = $Select(pNestedParentKey'="":pNestedParentKey_pDelim, 1:"")_$Select(key'="":key, 1:"")
                    Set tNested = pNestedMode
                    If $IsObject(tObjType) {
                        Do tObjType.%Set("proc",1)
                        If 'tIsArrayType Set tIsArrayType = tObjType.%Get("maxOccurs")="unbounded"
                        Set tCircKey = tParentCircRefCtrl.%Get(pParentType_pDelim_$Select((tIsArrayType):"ArrOf",1:"")_tType)
                        If (tCircKey="")||(tNestedKey'[tCircKey),$IsObject(tObjType) Do pCircRefCtrl.%Set(pParentType_pDelim_$Select((tIsArrayType):"ArrOf",1:"")_tType,tNestedKey)
                        If (tRequired),pRequiredKeys.%Get($Piece(tKey,pDelim,1,*-2)_pDelim_"required[+]"_$Piece(tKey,pDelim,*))="" {
                            Do pRequiredKeys.%Set($Piece(tKey,pDelim,1,*-2)_pDelim_"required[+]"_$Piece(tKey,pDelim,*),1)
                            Do ..SetByLineKey(pXSDInfo,$Piece(tKey,pDelim,1,*-2)_pDelim_"required[+]",$Piece(tKey,pDelim,*),,pDelim)
                        }
                        If (tIsArrayType) {
                            Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"type","array",,pDelim)  
                            Set tKey=tKey_pDelim_"items"
                            Set tNestedKey=tNestedKey_pDelim_"items"
                        }
                        If (tCircKey="")||(tNestedKey'[tCircKey) {
                            Do ..SetByLineKey(pXSDInfo,tKey,{},,pDelim)  
                            If $IsObject(tObjType),tObjType.%Get("type")="" {
                                If (tType["ArrayOf")||(tType["PairOf") Set tNested=1
                                If tNested=0 Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"allOf[0]"_pDelim_"$ref","#/components/schemas/"_tType,,pDelim)
                                If value.%Get("documentation")'="" Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"description",value.%Get("documentation"),,pDelim)
                                If value.%Get("example")'="" Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"example",value.%Get("example"),,pDelim)
                                Set tSC = ..GetOpenAPISchema(pClassName,.pXSDInfo,pParams,{"parentKey":($Select((tNested=1):tKey,1:tType)),"nestedParentKey":(tNestedKey), "parentType":(tType),"level":(pLevel+1),"circRefCtrl":(pCircRefCtrl),"originalJSON":(pOriginalJSON),"mapTypes":(pMapTypes),"json":(tObjType),"requiredKeys":(pRequiredKeys)})
                                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
                            } Else {
                                Set tJSONType = $Piece(pMapTypes.%Get($ZConvert(tType,"L")),"|",2)
                                If tJSONType="" Set tJSONType="string"
                                Set tJSONFormat = $Piece(pMapTypes.%Get($ZConvert(tType,"L")),"|",3)
                                Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"type",tJSONType,,pDelim)
                                If tJSONFormat'="" Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"format",tJSONFormat,,pDelim)
                                If tBasedOn'="" {
                                    Set tBasedOnType = $Piece(pMapTypes.%Get($ZConvert($Piece(tBasedOn,":",2),"L")),"|",2)
                                    Set tBasedOnFormat = $Piece(pMapTypes.%Get($ZConvert($Piece(tBasedOn,":",2),"L")),"|",3)
                                    If tBasedOnType'="" {
                                        Do ..SetByLineKey(pXSDInfo,$Piece(tKey,pDelim,1,*-1)_pDelim_pCharsKey_pDelim_"type",tBasedOnType,,pDelim)
                                        If tBasedOnFormat'="" Do ..SetByLineKey(pXSDInfo,$Piece(tKey,pDelim,1,*-1)_pDelim_pCharsKey_pDelim_"format",tBasedOnFormat,,pDelim)
                                    }
                                }
                                If value.%Get("enumeration")'="" {
                                    If "number integer"[tJSONType {
                                        Set tEnum = value.%Get("enumeration").%GetIterator()
                                        While (tEnum.%GetNext(.enk,.vk)) {
                                            Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"enum"_pDelim_enk,+vk,"number",pDelim)
                                        }
                                    } Else {
                                        Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"enum",value.%Get("enumeration"),,pDelim)
                                    }
                                }
                            } 
                            If value.%Get("documentation")'="" Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"description",value.%Get("documentation"),,pDelim)
                            If value.%Get("example")'="" Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"example",value.%Get("example"),,pDelim)
                        } Else {
                            If tNestedKey[tCircKey {
                                If ..GetByLineKey(pXSDInfo,tKey,pDelim)="" {
                                    Set tAutoRefKey = "#/components/schemas/"_$Replace(tCircKey,"^","/")
                                    Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"$ref",tAutoRefKey,,pDelim)
                                }
                            }
                        }
                    } Else {
                        If (tRequired),pRequiredKeys.%Get($Piece(tKey,pDelim,1,*-2)_pDelim_"required[+]"_$Piece(tKey,pDelim,*))="" {
                            Do pRequiredKeys.%Set($Piece(tKey,pDelim,1,*-2)_pDelim_"required[+]"_$Piece(tKey,pDelim,*),1)
                            Do ..SetByLineKey(pXSDInfo,$Piece(tKey,pDelim,1,*-2)_pDelim_"required[+]",$Piece(tKey,pDelim,*),,pDelim)
                        }
                        If (tIsArrayType) {
                            Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"type","array",,pDelim)  
                            Set tKey=tKey_pDelim_"items"
                            Set tNestedKey=tNestedKey_pDelim_"items"
                        }
                        Set tJSONType = $Piece(pMapTypes.%Get($ZConvert(value.%Get("type"),"L")),"|",2)
                        If tJSONType="" Set tJSONType="object"
                        Set tJSONFormat = $Piece(pMapTypes.%Get($ZConvert(value.%Get("type"),"L")),"|",3)
                        Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"type",tJSONType,,pDelim)
                        If tJSONFormat'="" Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"format",tJSONFormat,,pDelim)
                        If tBasedOn'="" {
                            Set tBasedOnType = $Piece(pMapTypes.%Get($ZConvert($Piece(tBasedOn,":",2),"L")),"|",2)
                            Set tBasedOnFormat = $Piece(pMapTypes.%Get($ZConvert($Piece(tBasedOn,":",2),"L")),"|",3)
                            If tBasedOnType'="" {
                                Do ..SetByLineKey(pXSDInfo,$Piece(tKey,pDelim,1,*-1)_pDelim_pCharsKey_pDelim_"type",tBasedOnType,,pDelim)
                                If tBasedOnFormat'="" Do ..SetByLineKey(pXSDInfo,$Piece(tKey,pDelim,1,*-1)_pDelim_pCharsKey_pDelim_"format",tBasedOnFormat,,pDelim)
                            }
                        }
                        If value.%Get("enumeration")'="" {
                            If "number integer"[tJSONType {
                                Set tEnum = value.%Get("enumeration").%GetIterator()
                                While (tEnum.%GetNext(.enk,.vk)) {
                                    Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"enum"_pDelim_enk,+vk,"number",pDelim)
                                }
                            } Else {
                                Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"enum",value.%Get("enumeration"),,pDelim)
                            }
                        }
                        Set tOType = $Select("string boolean date dateTime decimal"'[value.%Get("type"):"("_value.%Get("type")_") ",1:"")
                        if tOType="(long) " Set tOType=""
                        If (value.%Get("documentation")'="")||(tOType'="") Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"description",tOType_value.%Get("documentation"),,pDelim)
                        If (value.%Get("example")'="") Do ..SetByLineKey(pXSDInfo,tKey_pDelim_"example",tOType_value.%Get("example"),,pDelim)
                    }
                }
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="TemplateToOpenApiSchema">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pJSON:%Library.DynamicObject,&pObjectName:%String,*pOpenApiJSON:%Library.DynamicObject,pParams:%Library.DynamicObject,pInternal:%Library.DynamicObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pDelim = $Select(pParams.keyDelimiter'="":pParams.keyDelimiter,1:"^") 
        Set pPrintResults = $Select(pParams.printResults'="":pParams.printResults,1:1)
        //Internal Params
        If '$Data(pInternal) Set pInternal={"parentKey":"", "parentType":""}
        Set pParentKey = pInternal.parentKey
        Set pParentType = pInternal.parentType
		If pParentType="" {
			Set pOpenApiJSON = {}
            If pObjectName="",pJSON.%Size()=1 {
                Set prop = pJSON.%GetIterator()
                Do prop.%GetNext(.key,.value)
                Set pObjectName=key
                Set pJSON = value
            } 
            If pObjectName="" {
                Set tSC = $$$ERROR($$$GeneralError, "pObjectName must be informed when there is no main node")
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
			Do ..TemplateToOpenApiSchema(pJSON,pObjectName,.pOpenApiJSON,pParams,{"parentKey":(pObjectName), "parentType":($Select($ClassName(pJSON)="%Library.DynamicArray":"array",1:"object"))})
            If pPrintResults {
                Set tFormatter = ##class(%JSON.Formatter).%New(),jsonString=""
                Do tFormatter.FormatToString(pOpenApiJSON.%ToJSON(),.jsonString)
                Write jsonString,!
            }
		} Else {
            Do ..SetByLineKey(pOpenApiJSON,pParentKey_pDelim_"type",pParentType,,pDelim)
            Set pParentKey=pParentKey_pDelim_$Select(pParentType="object":"properties",1:"items")
            Set prop = pJSON.%GetIterator()
			While (prop.%GetNext(.key,.value)) {
                Set tk = key  If pParentType="array",key=+key Set tk = ""
                Set tKey = $Select(pParentKey'="":pParentKey, 1:"")_$Select(tk'="":pDelim_tk, 1:"")
                If $IsObject(value),$Find($Piece(tKey,pDelim,*),"@")=0 {
                    Do ..TemplateToOpenApiSchema(value,pObjectName,.pOpenApiJSON,pParams,{"parentKey":(tKey), "parentType":($Select($ClassName(value)="%Library.DynamicArray":"array",1:"object"))})
				} Else {
                    If $Find($Piece(tKey,pDelim,*),"@")=0 {
                        Set tCType = pJSON.%GetTypeOf(key)
                        Set tExType = ..GetByLineKey(pOpenApiJSON,tKey_pDelim_"type",pDelim)
                        If tExType'="",tCType'=tExType Set tCType = "string"
                        Do ..SetByLineKey(pOpenApiJSON,tKey_pDelim_"type",tCType,,pDelim)
                        Do ..SetByLineKey(pOpenApiJSON,tKey_pDelim_"example",value,tCType,pDelim)
                    } Else {
                        Set tOrigProp = $Piece($Piece(tKey,pDelim,*),"@",1)
                        Set tSchemaProp = $Piece($Piece(tKey,pDelim,*),"@",2)
                        Set tKey = $Piece(tKey,pDelim,1,*-1)_pDelim_tOrigProp_pDelim_tSchemaProp
                        Do ..SetByLineKey(pOpenApiJSON,tKey,value,,pDelim)
                    }

	 			}
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.core.service">
<Super>%CSP.REST,%Projection.AbstractProjection,apiPub.core.jsonBuilder</Super>
<TimeChanged>65647,42951.329818</TimeChanged>
<TimeCreated>65587,59412.779764</TimeCreated>

<Parameter name="CONTENTTYPEJSON">
<Type>%String</Type>
<Default>application/json</Default>
</Parameter>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<Parameter name="Cors">
<Default>1</Default>
</Parameter>

<Parameter name="ReservedInboundParams">
<Type>%String</Type>
<Default>CachePassWord,CacheUserName,IRISUsername,IRISPassword,</Default>
</Parameter>

<Parameter name="ReservedOutboundParams">
<Type>%String</Type>
<Default>CachePassWord,CacheUserName,IRISUsername,IRISPassword,TargetBaseURL</Default>
</Parameter>

<Parameter name="DefaultForEmptyContentType">
<Type>%String</Type>
</Parameter>

<Parameter name="BeautifyJsonBodyResponse">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="BeautifyJsonBodyRequest">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="DispatchClass">
<Type>%String</Type>
</Parameter>

<Parameter name="DispatchBaseURL">
<Type>%String</Type>
</Parameter>

<Parameter name="OASPath">
<Type>%String</Type>
<Default>Get:/oas</Default>
</Parameter>

<Parameter name="OnlyOAS">
<Description>
Allow API Calling</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="Traceable">
<Description>
Use TracerBSName for monitoring</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="TracerBSName">
<Default>apiPub.tracer.bs</Default>
</Parameter>

<Parameter name="DispatchBSName">
<Description>
When the class is also a Business Service </Description>
<Type>%String</Type>
</Parameter>

<Parameter name="SSL">
<Type>%String</Type>
<Default>DEFAULT</Default>
</Parameter>

<Parameter name="HTTPS">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="CallerInfo">
<Default>Rest Client</Default>
</Parameter>

<Parameter name="TargetBaseURL">
</Parameter>

<Parameter name="APIDomain">
<Default>apiPub</Default>
</Parameter>

<Method name="ServiceRouter">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If pRequest.APIOperationId="getOAS",pRequest.DispatchClass'="" Return ..GetOAS(pRequest,.pResponse)
		If pRequest.DispatchClass'="",pRequest.DispatchMethod'="" Return ..Dispatch(pRequest,.pResponse)
		Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "path not mapped"))
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="Dispatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
		If (..#OnlyOAS) {
			Set tSC = $$$ERROR($$$GeneralError, "Only Documentation (OAS)")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
		}
		Set tSC = ##class(apiPub.core.dispatcher).Dispatch(pRequest,.pResponse)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetOAS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If pRequest.Params="" Set pRequest.Params="{}"
        //Separate internal behavioral params from other params
        Set tSC = ..GetRequestParams(pRequest.Params,.tBusParams,.tParams)
        Set tBasePath = tBusParams.%Get("basePath")
        Set tParams.basePath = tBasePath
        Set tParams.printResults = 0
		If ..#DispatchBaseURL'="" {
			Set tRequestURL = ..#DispatchBaseURL
			If $Find(tRequestURL,"http")=0 Set tRequestURL = $Piece(pRequest.RequestURL,"/",1,3)_$Replace("/"_..#DispatchBaseURL,"//","/")
		}
		If ..#DispatchBaseURL="" {
			Set tRequestURL = $Piece(pRequest.RequestURL,$Piece(..#OASPath,":",2),1)
			If tRequestURL="" Set tRequestURL = $Piece(pRequest.RequestURL,"/",1,*-1)
		}
        Set tSC = ##class(apiPub.core.publisher).GetOASFromClass(pRequest.DispatchClass,.tJsonResponse,tParams,tRequestURL)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Do pResponse.Body.Write(tJsonResponse.%ToJSON())
        Set pResponse.ContentType =  "application/json"
        Set pResponse.ResponseStatusCode = 200
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="HttpCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>pURLPaths...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try 
	{
		Set tRequestParams = {
        	"targetBaseURL":(..#TargetBaseURL)
			,"apiDomain":(..#APIDomain)
			,"callerInfo":(..#CallerInfo)
			,"reservedInboundParams":(..#ReservedInboundParams)
			,"beautifyJsonBodyRequest":(..#BeautifyJsonBodyRequest)
		}
		Set tSC = ..HttpRequestToMsgRequest(%request,tRequestParams,.tRequest, pURLPaths...)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		If (..#Traceable) {
			Set tSC = ..CallBS(..#TracerBSName,tRequest,.tResponse)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		} Else {
			Set tResponse = ##class(apiPub.service.message).%New()
			Set tSC = ..DirectMethodCall(tRequest,.tResponse)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		Set tResponseParams = {
			"defaultForEmptyContentType":(..#DefaultForEmptyContentType)
			,"beautifyJsonBodyResponse":(..#BeautifyJsonBodyResponse)
		}
		Set tSC = ..TreatMsgResponse(tRequest,.tResponse,tResponseParams)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set tSC = ..MsgResponseToHttpResponse(tResponse)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
	}
	Catch(e) {
		Do ..ErrorHandler(e, .tSC)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="DirectMethodCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set tSC = ..ServiceRouter(pRequest,.pResponse)
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="ProxyHttpCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
		Set tRequestParams = {
        	"targetBaseURL":(..#TargetBaseURL)
			,"https":(..#HTTPS)
			,"ssl":(..#SSL)
			,"reservedOutboundParams":(..#ReservedOutboundParams)
		}
        Set tSC = ..MsgRequestToHttpRequest(pRequest,tRequestParams,.tHttpRequest,.tURL)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Set tSC = $Method(tHttpRequest,pRequest.HttpVerb,tURL)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Set tSC = ..HttpResponseToMsgResponse(tURL,tHttpRequest,pRequest,.pResponse)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="TreatMsgResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRequest:apiPub.service.message,&pResponse:apiPub.service.message,pParams:%Library.DynamicObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If '$Data(pParams) Set pParams={}
        Set pDefaultForEmptyContentType = $Select(pParams.defaultForEmptyContentType'="":pParams.defaultForEmptyContentType,1:"")
        Set pBeautifyJsonBodyResponse = $Select(pParams.beautifyJsonBodyResponse'="":pParams.beautifyJsonBodyResponse,1:0)
		If pResponse.ResponseReasonPhrase="" {
        	Set pResponse.ResponseReasonPhrase = ..GetResponseReasonPhrase(pResponse.ResponseStatusCode)
        }
        If pResponse.ContentType="" Set pResponse.ContentType = pDefaultForEmptyContentType
        If $IsObject(pResponse.Body),pResponse.Body.SizeGet()>0{
            If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))),(pBeautifyJsonBodyResponse),pResponse.ContentType'="",$Find($ZConvert(pResponse.ContentType,"L"),"json")>0,$Find(pResponse.Body.Read(),"{")>0 {
        		Set tFormatter = ##class(%JSON.Formatter).%New()
                Set pBodyResponse = ##class(%DynamicObject).%FromJSON(pResponse.Body)
                Set tSC = tFormatter.FormatToStream(pBodyResponse,pResponse.Body)
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            }
        }
        If $Data(pRequest),pRequest'="" {
            Set pResponse.APIPath = pRequest.APIPath
            Set pResponse.HttpVerb = pRequest.HttpVerb
            Set pResponse.CallerInfo = pRequest.CallerInfo
            Set pResponse.APIOperationId = pRequest.APIOperationId
            Set pResponse.APIDomain = pRequest.APIDomain
        }
	}
    Catch(e) {
		Set tSC = e.AsStatus()
    }
	Quit tSC
]]></Implementation>
</Method>

<Method name="HttpResponseToMsgResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>pURL:%String,pHttpRequest:%Net.HttpRequest,pMessageRequest:apiPub.service.message,*pMessageResponse:apiPub.service.message,*pBodyResponse:%Library.DynamicObject,*pHeadersResponse:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set pResponse = pHttpRequest.HttpResponse
        Set pMessageResponse = ##class(apiPub.service.message).%New()
        Set pBodyResponse = {}
        If $IsObject(pResponse.Data),pResponse.Data.SizeGet()>0{
			Do pResponse.Data.Rewind()
			While (pResponse.Data.AtEnd=0) {
				Do pMessageResponse.Body.Write(pResponse.Data.Read())
			}
        }
        Set tHeaders = {}
        Set tIdx = pResponse.GetNextHeader("")
        While tIdx'="" {
            Set tValue = pResponse.GetHeader(tIdx)
            If tValue'="" Do tHeaders.%Set(tIdx,tValue)
            Set tIdx = pResponse.GetNextHeader(tIdx)
        }
        If tHeaders.%Size()>0 {
            Set tHeaderStr = ""
			If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))) {
        		Set tFormatter = ##class(%JSON.Formatter).%New()
				Set tSC = tFormatter.FormatToString(tHeaders.%ToJSON(),.tHeaderStr) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			} Else {
				Set tHeaderStr = tHeaders.%ToJSON()			
			}
            Set pMessageResponse.Headers = tHeaderStr
            Set pHeadersResponse = tHeaders
        }
		Set tParams={}
		Set tIdx = pHttpRequest.NextParam("")
		While tIdx'="" {
            Set tValue = $Get(pHttpRequest.GetParam(tIdx))
            If tValue'="" Do tParams.%Set(tIdx,tValue)
			Set tIdx = pHttpRequest.NextParam(tIdx)
		}
        If tParams.%Size()>0 {
            Set tParamsStr = ""
			If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))) {
        		Set tFormatter = ##class(%JSON.Formatter).%New()
				Set tSC = tFormatter.FormatToString(tParams.%ToJSON(),.tParamsStr) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
				Set pMessageResponse.Params = tParamsStr
			} Else {
				Set tParamsStr = tParams.%ToJSON()			
			}
        }
        Set pMessageResponse.RequestURL = pURL
        Set pMessageResponse.ResponseStatusCode = pResponse.StatusCode
        Set pMessageResponse.ResponseStatusLine = pResponse.StatusLine
        Set pMessageResponse.ResponseReasonPhrase = pResponse.ReasonPhrase
		Set pMessageResponse.ContentType = pResponse.ContentType
        Set pMessageResponse.ContentInfo = pResponse.ContentInfo
        Set pMessageResponse.ContentLength = pResponse.ContentLength
        Set pMessageResponse.ContentBoundary = pResponse.ContentBoundary
   }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
	Quit tSC
]]></Implementation>
</Method>

<Method name="MsgResponseToHttpResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		kill %objlasterror
		If pResponse.CharSet'="" Set %response.CharSet = pResponse.CharSet
		Set %response.ContentType = pResponse.ContentType
		Set %response.Status = pResponse.ResponseStatusCode
		If pResponse.Headers'="" {
			Set tJSONHeader = {}.%FromJSON(pResponse.Headers)
			Set tProp = tJSONHeader.%GetIterator()
			While (tProp.%GetNext(.key,.value)) {
		   		Do %response.SetHeader(key,value)
			}
		}
        If $IsObject(pResponse.Body),pResponse.Body.SizeGet()>0{
			Do pResponse.Body.Rewind()
			While (pResponse.Body.AtEnd=0) {
				Write pResponse.Body.Read()
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ErrorHandler">
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatusException:%Exception.StatusException,*pSC:%Status</FormalSpec>
<Implementation><![CDATA[
	Set %response.ContentType = ..#CONTENTTYPEJSON
	Set tMessage = $Select($$$ISERR(pStatusException.AsStatus()):$System.Status.GetOneErrorText(pStatusException.AsStatus()),1:"OK")
	Set tErrorCode = +$System.Status.GetErrorCodes(pStatusException.AsStatus())
	If $Find($zConvert(tMessage,"L"),"<204>")>0 {
		Set tMessage = $Replace(tMessage,"<204>","")
		Set %response.Status = ..#HTTP204NOCONTENT
	} ElseIf $Find($zConvert(tMessage,"L"),"<304>")>0 {
		Set %response.Status = ..#HTTP304NOTMODIFIED
		Set tMessage = $Replace(tMessage,"<304>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<400>")>0 {
		Set %response.Status = ..#HTTP400BADREQUEST
		Set tMessage = $Replace(tMessage,"<400>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<401>")>0 {
		Set %response.Status = ..#HTTP401UNAUTHORIZED
		Set tMessage = $Replace(tMessage,"<401>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<403>")>0 {
		Set %response.Status = ..#HTTP403FORBIDDEN
		Set tMessage = $Replace(tMessage,"<403>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<404>")>0 {
		Set %response.Status = ..#HTTP404NOTFOUND
		Set tMessage = $Replace(tMessage,"<404>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<405>")>0 {
		Set %response.Status = ..#HTTP405METHODNOTALLOWED
		Set tMessage = $Replace(tMessage,"<405>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<406>")>0 {
		Set %response.Status = ..#HTTP406NOTACCEPTABLE
		Set tMessage = $Replace(tMessage,"<406>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<409>")>0 {
		Set %response.Status = ..#HTTP409CONFLICT
		Set tMessage = $Replace(tMessage,"<409>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<415>")>0 {
		Set %response.Status = ..#HTTP415UNSUPPORTEDMEDIATYPE
		Set tMessage = $Replace(tMessage,"<415>","")
	} ElseIf $Find($zConvert(tMessage,"L"),"<423>")>0 {
		Set %response.Status = ..#HTTP423LOCKED
		Set tMessage = $Replace(tMessage,"<423>","")
	} Else {
		Set %response.Status = ..#HTTP500INTERNALSERVERERROR
	}
	If $Find(tMessage,":")>0 Set tMessage = $Piece(tMessage,":",2)
	While $Find(tMessage,"  ")>0 {
		Set tMessage = $Replace(tMessage,"  "," ")
	}
	If $Extract(tMessage,1,1)=" " Set tMessage = $Extract(tMessage,2,*)
	Set tErrorTrap={
			"statusCode":($$$ISOK(pStatusException.AsStatus())),
			"message":(tMessage),
			"errorCode":(tErrorCode)
	}
	Do %response.SetHeader("iris-statuscode",$$$ISOK(pStatusException.AsStatus()))
	Do %response.SetHeader("iris-statusmessage",tMessage)
	Do %response.SetHeader("iris-errorCode",tErrorCode)
	Write tErrorTrap.%ToJSON()
	Set pSC = $$$OK
]]></Implementation>
</Method>

<Method name="GetResponseReasonPhrase">
<ClassMethod>1</ClassMethod>
<FormalSpec>statusCode:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        If statusCode = 200 Quit "OK"
        If statusCode = 201 Quit "Created"
        If statusCode = 202 Quit "Accepted"
        If statusCode = 204 Quit "No Content"
        If statusCode = 304 Quit "Not Modified"
        If statusCode = 400 Quit "Bad Request"
        If statusCode = 401 Quit "Unauthorized"
        If statusCode = 403 Quit "Forbidden"
        If statusCode = 404 Quit "Not Found"
        If statusCode = 405 Quit "Method Not Allowed"
        If statusCode = 406 Quit "Not Acceptable"
        If statusCode = 409 Quit "Conflict"
        If statusCode = 415 Quit "Unsupported Media Type"
        If statusCode = 422 Quit "Unprocessable Entity"
        If statusCode = 423 Quit "Locked"
        If statusCode = 500 Quit "Internal Server Error"
        Quit ""
]]></Implementation>
</Method>

<Method name="GetRouterMap">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
	Quit {
		"paths":{
		}
	}
]]></Implementation>
</Method>

<Method name="GetPathInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHttpVerb:%String,pOrigPath:%String,pIdxMap:%Library.DynamicObject,*pAPIInfo:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		Set pHttpVerb = $ZConvert(pHttpVerb,"S")
		Set tPath = pHttpVerb_":"_pOrigPath
		Set tPoint = pIdxMap
		Set tParams = {}
		For i=1:1:$Length(tPath,"/") {
			Set tParValue = ""
			Set tPc = $Replace($Piece(tPath,"/",i),":","")
			If i=1 Set tPc = $ZConvert(tPc,"S")
			Set tF = tPoint.%Get(tPc)
			If tF="" {
				Set tF = tPoint.%Get("@P")
				If tF="" Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "path "_tPath_" not mapped"))
				Do tParams.%Set(tPoint.%Get("@parName"),tPc)
			}
			Set tPoint=tF
		}
		Set pAPIInfo = {}
		If '$IsObject(tPoint) Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "path "_tPath_" not mapped"))
		Set prop = tPoint.%GetIterator()
		While (prop.%GetNext(.key,.value)) {
			If '$IsObject(value),key'="@parName" {
				Do pAPIInfo.%Set($Tr(key,"@",""),value)			
			}
		}
		Do pAPIInfo.%Set("urlParams",tParams)	
	}
	Catch(e)
	{
		//w $System.Status.GetOneErrorText(e.AsStatus()),!
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="HttpRequestToMsgRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:%CSP.Request,pParams:%Library.DynamicObject,*pRestRequest:apiPub.service.message,pURLPaths...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pAPIDomain = $Select(pParams.apiDomain'="":pParams.apiDomain,1:"")
        Set pTargetBaseURL = $Select(pParams.targetBaseURL'="":pParams.targetBaseURL,1:"")
        Set pCallerInfo = $Select(pParams.callerInfo'="":pParams.callerInfo,1:"")
        Set pBeautifyJsonBodyRequest = $Select(pParams.beautifyJsonBodyRequest'="":pParams.beautifyJsonBodyRequest,1:0)
        Set pReservedInboundParams = $Select(pParams.reservedInboundParams'="":pParams.reservedInboundParams,1:"")
		If pAPIDomain = "" {
			Set tSC = $$$ERROR($$$GeneralError, "param apiDomain is Required")
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		#Dim pRequest As %CSP.Request
		Set pRestRequest = ##Class(apiPub.service.message).%New()
		Set tParams={}
		Set tIdx = pRequest.Next("")
		While tIdx'="" {
            Set tValue = $Get(pRequest.Data(tIdx,1))
            If tValue'="" Do tParams.%Set(tIdx,tValue)
			Set tIdx = pRequest.Next(tIdx)
		}
		Set tHeaders = {}
		Set tIdx = pRequest.NextCgiEnv("")
		While tIdx'="" {
            Set tValue = pRequest.CgiEnvs(tIdx)
            If tValue'="" Do tHeaders.%Set(tIdx,tValue)
			Set tIdx = pRequest.NextCgiEnv(tIdx)
		}
		If tHeaders.%Size()>0 {
			Set tStrHeaders = ""
			If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))) {
        		Set tFormatter = ##class(%JSON.Formatter).%New()
				Set tSC = tFormatter.FormatToString(tHeaders.%ToJSON(),.tStrHeaders) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			} Else {
				Set tStrHeaders = tHeaders.%ToJSON()
			}
			Set pRestRequest.Headers = tStrHeaders
		}
		Set tCookies = {}
		Set tIdx = pRequest.NextCookie("")
		While tIdx'="" {
            Set tValue = pRequest.GetCookie(tIdx)
            If tValue'="" Do tCookies.%Set(tIdx,tValue)
			Set tIdx = pRequest.NextCookie(tIdx)
		}
		If tCookies.%Size()>0 {
			Set tStrCookies=""
			If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))) {
        		Set tFormatter = ##class(%JSON.Formatter).%New()
				Set tSC = tFormatter.FormatToString(tCookies.%ToJSON(),.tStrCookies) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			} Else {
				Set tStrCookies = tCookies.%ToJSON()
			}
			Set pRestRequest.Cookies = tStrCookies 
		}
		Set tIdx = pRequest.NextMimeData("")
		While tIdx'="" {
			Do pRestRequest.InsertMimeData(tIdx, pRequest.GetMimeData(tIdx))
			Set tIdx = pRequest.NextMimeData(tIdx)
		}
		Set pRestRequest.ServiceClass = $This
		Set pRestRequest.HttpVerb = $ZConvert(tHeaders."REQUEST_METHOD","S")
		Set pRestRequest.ContentType = tHeaders."CONTENT_TYPE"
		Set pRestRequest.RequestURL = tHeaders."REQUEST_SCHEME"_"://"_tHeaders."HTTP_HOST"_tHeaders."REQUEST_URI"
		If $IsObject(pRequest.Content),pRequest.Content.SizeGet()>0{
			If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))),(pBeautifyJsonBodyRequest),$Find($ZConvert(pRestRequest.ContentType,"L"),"json") {
				Set tSC = tFormatter.FormatToStream(pRequest.Content,pRestRequest.Body) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			} Else {
				Do pRestRequest.Body.CopyFrom(pRequest.Content)
			}
		}
		Set pRestRequest.APIDomain = pAPIDomain
		If pCallerInfo '= "" Set pRestRequest.CallerInfo = pCallerInfo
		If tHeaders."HTTP_USER_AGENT"'="" Set pRestRequest.CallerInfo = pRestRequest.CallerInfo_$Select(pCallerInfo'="":" (",1:"")_tHeaders."HTTP_USER_AGENT"_$Select(pCallerInfo'="":")",1:"")
		Set tOriginalPath = ""
		If $Data(pURLPaths) {
			For i=1:1:pURLPaths {
				Set tOriginalPath=tOriginalPath_"/"_pURLPaths(i)
			}
		}
		//Get Indexed route map from dispatch class
		Set tIdxMap={}
		If ..#DispatchClass'="" {
			If '$IsObject(##class(%Dictionary.ClassDefinition).%OpenId(..#DispatchClass)) {
				Set tSC = $$$ERROR($$$GeneralError, ..#DispatchClass_" is not a valid class")
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			}
			Set tSC = ##class(apiPub.core.irisMetadata).GetCacheCustomPaths(..#DispatchClass,.tIdxMap)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		//Add Documentation Path
		If ..#OASPath'="",..#DispatchClass'="" {
			Set tOASAPIMap = {"paths":{}}
			Do tOASAPIMap.%Get("paths").%Set(..#OASPath,{"operationId":"getOAS","className":(..#DispatchClass)})
			Set tSC = ..GetIdxPath(tOASAPIMap,.tOASIdxMap)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			Set tSC = ..JSONAppend(tOASIdxMap,.tIdxMap)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		//Add Local Path Route
		Set tLocalAPIMap = ..GetRouterMap()
		If tLocalAPIMap.%Get("paths").%Size()>0 {
			Set tSC = ..GetIdxPath(tLocalAPIMap,.tLocalIdxMap)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			Set tSC = ..JSONAppend(tLocalIdxMap,.tIdxMap)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		Set tSC = ..GetPathInfo(pRestRequest.HttpVerb,tOriginalPath,tIdxMap,.tAPIInfo)
       	If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		If $IsObject(tAPIInfo) {
			If tAPIInfo.%Get("className")'="" Set pRestRequest.DispatchClass = tAPIInfo.%Get("className")
			If tAPIInfo.%Get("methodName")'="" Set pRestRequest.DispatchMethod = tAPIInfo.%Get("methodName")
			If tAPIInfo.%Get("urlParams").%Get("className")'="" Set pRestRequest.DispatchClass = tAPIInfo.%Get("urlParams").%Get("className")
			If tAPIInfo.%Get("urlParams").%Get("methodName")'="" Set pRestRequest.DispatchMethod = tAPIInfo.%Get("urlParams").%Get("methodName")
			Set pRestRequest.APIOperationId = tAPIInfo.%Get("operationId")
			If pRestRequest.APIOperationId="" Set pRestRequest.APIOperationId = pRestRequest.DispatchMethod
			If pRestRequest.DispatchClass="" Set pRestRequest.DispatchClass = ..#DispatchClass
			Set pRestRequest.APIPath = tAPIInfo.%Get("path")
		}
		Set tURLParams = tAPIInfo.%Get("urlParams").%GetIterator()
		While tURLParams.%GetNext(.ukey,.uvalue) {
			Do tParams.%Set(ukey,uvalue)
		}
		If pTargetBaseURL'="" Set pRestRequest.TargetBaseURL = pTargetBaseURL 
		For i=1:1:$Length(pReservedInboundParams,",") {
			Set tParName = $Piece(pReservedInboundParams,",",i)
			If tParName'="",tParams.%Get(tParName)'="" Do tParams.%Remove(tParName)
		}
		If tParams.%Size()>0 {
			Set tStrParams = ""
			If ($IsObject(##class(%Dictionary.ClassDefinition).%OpenId("%JSON.Formatter"))) {
				Set tSC = tFormatter.FormatToString(tParams.%ToJSON(),.tStrParams) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			} Else {
				Set tStrParams = tParams.%ToJSON()
			}
			Set pRestRequest.Params = tStrParams
		}
	}
	Catch(e)
	{
        Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="MsgRequestToHttpRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageRequest:apiPub.service.message,pParams:%Library.DynamicObject,*pHttpRequest:%Net.HttpRequest,*tURL:%String,pGetToken:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If '$Data(pParams) Set pParams={}
        Set pTargetBaseURL = $Select(pParams.targetBaseURL'="":pParams.targetBaseURL,1:"")
        Set pHTTPS = $Select(pParams.https'="":pParams.https,1:0)
        Set pSSL = $Select(pParams.ssl'="":pParams.ssl,1:"")
        Set pReservedOutboundParams = $Select(pParams.reservedOutboundParams'="":pParams.reservedOutboundParams,1:"")

        Set tURL = ""
        Set pHttpRequest = ##class(%Net.HttpRequest).%New()
        Set pHttpRequest.Server = pTargetBaseURL
        Set pHttpRequest.Https = pHTTPS
        Set pHttpRequest.SSLConfiguration = pSSL
        Set tJSONHeaders = {}.%FromJSON(pMessageRequest.Headers)
        Set tProp = tJSONHeaders.%GetIterator()
        While (tProp.%GetNext(.key,.value)) {
            Do pHttpRequest.SetHeader(key,value)
        }
        Set tAPIPath = pMessageRequest.APIPath
		Set tJSONParams = {}
        If $Length(pMessageRequest.Params)>0 Set tJSONParams = {}.%FromJSON(pMessageRequest.Params)
        Set tProp = tJSONParams.%GetIterator()
        While (tProp.%GetNext(.key,.value)) {
            If $Find(pReservedOutboundParams,key)=0 {
                If $Find(tAPIPath,"{"_key_"}")>0 {
                    Set tAPIPath = $Replace(tAPIPath,"{"_key_"}",value)
                } Else {
                    Do pHttpRequest.SetParam(key,value)
                }
            }
        }
        Do pHttpRequest.EntityBody.Write(pMessageRequest.Body.Read())
        Set tTargetBaseURL = pMessageRequest.TargetBaseURL
        If tTargetBaseURL="" Set tTargetBaseURL = pTargetBaseURL
        Set tURL = $Select($Extract(tTargetBaseURL,*)="/":$Extract(tTargetBaseURL,1,*-1),1:tTargetBaseURL)_tAPIPath
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallBS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pBSName:%String="apiPub.tracer.bs",pRequest:apiPub.service.message,*pOutput:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
		Set tSC = ##Class(Ens.Director).CreateBusinessService(pBSName,.tBS)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set tSC = tBS.ProcessInput(pRequest,.tResponse)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set pOutput = tResponse
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/" Method="GET" Call="HttpCall"/>
<Route Url="/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/" Method="POST" Call="HttpCall"/>
<Route Url="/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/" Method="PUT" Call="HttpCall"/>
<Route Url="/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
</Routes>
]]></Data>
</XData>
</Class>


<Class name="apiPub.core.typeMapper">
<Super>%RegisteredObject</Super>
<TimeChanged>65625,35540.240589</TimeChanged>
<TimeCreated>65556,55472.707194</TimeCreated>

<Method name="GetParamTypes">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Quit {
            "%status":"status|string"
            ,"%binary":"string|string|string"
            ,"%base64binary":"string|string|string"
            ,"%boolean":"boolean|boolean||XSDToLogical|LogicalToXSD"
            ,"%date":"string|string|date|XSDToLogical|LogicalToXSD"
            ,"%posixtime":"string|string|date-time|XSDToLogical|LogicalToXSD"
            ,"%stringtimestamp":"string|string|date-time|XSDToLogical|LogicalToXSD"
            ,"%timestamp":"string|string|date-time|XSDToLogical|LogicalToXSD"
            ,"%datetime":"string|string|date-time|XSDToLogical|LogicalToXSD"
            ,"%currency":"number|number"
            ,"%float":"number|number"
            ,"%decimal":"number|number"
            ,"%numeric":"number|number"
            ,"%double":"number|number"
            ,"%float":"number|number"
            ,"%bigint":"number|integer|int64"
            ,"%int":"number|integer|"
            ,"%long":"number|integer|int64"
            ,"%integer":"number|integer"
            ,"%smallint":"number|integer|int32"
            ,"%time":"string|string||XSDToLogical|LogicalToXSD"
            ,"%tinyint":"number|integer|int32"
            ,"%byte":"number|integer|int32"
            ,"%string":"string|string"
            ,"%filebinary":"string|string|binary|stream|stream"
            ,"%filecharacter":"string|string||stream|stream"
            ,"%globalbinary":"string|string|binary|stream|stream"
            ,"%globalcharacter":"string|string||stream|stream"
    }
]]></Implementation>
</Method>

<Method name="GetXSDMapTypes">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Quit {
        "string":"string|string"
        ,"int":"number|integer"
        ,"integer":"number|integer"
        ,"long":"number|integer|int64"
        ,"negativeinteger":"number|integer"
        ,"nonnegativeinteger":"number|integer"
        ,"nonpositiveinteger":"number|integer"
        ,"positiveinteger":"number|integer"
        ,"short":"number|integer"
        ,"unsignedlong":"number|integer|int64"
        ,"unsignedint":"number|integer"
        ,"unsignedshort":"number|integer"
        ,"decimal":"number|number"
        ,"double":"number|number"
        ,"numeric":"number|number"
        ,"boolean":"boolean|boolean"
        ,"base64binary":"string|string|binary"
        ,"hexbinary":"string|string|binary"
        ,"unsignedbyte":"string|string|byte"
        ,"byte":"number|integer"
        ,"datetime":"string|string|date-time"
        ,"date":"string|string|date"
        ,"duration":"string|string"
        ,"gday":"string|string"
        ,"gmonth":"string|string"
        ,"gmonthday":"string|string"
        ,"gyear":"string|string"
        ,"gyearmonth":"string|string"
        ,"time":"number|integer"
    }
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.samples.ApiResponse">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65596,63231.826297</TimeChanged>
<TimeCreated>65596,63231.826297</TimeCreated>

<Property name="Code">
<Type>%Integer</Type>
</Property>

<Property name="Type">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Message">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="apiPub.samples.Category">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65617,37930.087472</TimeChanged>
<TimeCreated>65596,60025.520111</TimeCreated>

<Property name="id">
<Type>%Integer</Type>
</Property>

<Property name="name">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Index name="idIDX">
<Properties>id</Properties>
<Unique>1</Unique>
</Index>

<Index name="nameIDX">
<Properties>name</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^apiPub.samples.CategoryD</DataLocation>
<DefaultData>CategoryDefaultData</DefaultData>
<IdLocation>^apiPub.samples.CategoryD</IdLocation>
<IndexLocation>^apiPub.samples.CategoryI</IndexLocation>
<StreamLocation>^apiPub.samples.CategoryS</StreamLocation>
<Data name="CategoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>id</Value>
</Value>
<Value name="3">
<Value>name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="apiPub.samples.Order">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65612,65109.304019</TimeChanged>
<TimeCreated>65596,56595.910333</TimeCreated>

<Property name="id">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="petId">
<Type>%Integer</Type>
</Property>

<Property name="pet">
<Type>apiPub.samples.Pet</Type>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="none"/>
</Property>

<Property name="quantity">
<Type>%SmallInt</Type>
</Property>

<Property name="shipDate">
<Type>%DateTime</Type>
<InitialExpression>$ZDateTime($Horolog, 3)</InitialExpression>
</Property>

<Property name="status">
<Type>%String</Type>
<InitialExpression>"placed"</InitialExpression>
<Parameter name="VALUELIST" value=",placed,approved,delivered"/>
</Property>

<Property name="complete">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Index name="idIDX">
<Properties>id</Properties>
<Unique>1</Unique>
</Index>

<Method name="petIdSet">
<FormalSpec>value:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK
    Set pPet = ##class(apiPub.samples.Pet).idIDXOpen(value)
    Set $this.pet = ""
    Set i%petId = ""
    If $IsObject(pPet) {
        Set $this.pet = pPet
        Set i%petId = value
    }
    Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^apiPub.samples.OrderD</DataLocation>
<DefaultData>OrderDefaultData</DefaultData>
<IdLocation>^apiPub.samples.OrderD</IdLocation>
<IndexLocation>^apiPub.samples.OrderI</IndexLocation>
<StreamLocation>^apiPub.samples.OrderS</StreamLocation>
<Data name="OrderDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>petId</Value>
</Value>
<Value name="3">
<Value>quantity</Value>
</Value>
<Value name="4">
<Value>shipDate</Value>
</Value>
<Value name="5">
<Value>status</Value>
</Value>
<Value name="6">
<Value>complete</Value>
</Value>
<Value name="7">
<Value>id</Value>
</Value>
<Value name="8">
<Value>id2</Value>
</Value>
<Value name="9">
<Value>pet</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="apiPub.samples.Pet">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65633,48527.606265</TimeChanged>
<TimeCreated>65596,60483.185118</TimeCreated>

<Property name="id">
<Type>%Integer</Type>
</Property>

<Property name="category">
<Type>apiPub.samples.Category</Type>
</Property>

<Property name="name">
<Description>
@apiPub[example="doggie"]</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="photoUrls">
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="element"/>
</Property>

<Property name="tags">
<Type>apiPub.samples.Tag</Type>
<Cardinality>many</Cardinality>
<Inverse>pet</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="element"/>
</Property>

<Property name="status">
<Description>
pet status in the store</Description>
<Type>%String</Type>
<InitialExpression>"available"</InitialExpression>
<Parameter name="VALUELIST" value=",available,pending,sold"/>
</Property>

<Index name="idIDX">
<Properties>id</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^apiPub.samples.PetD</DataLocation>
<DefaultData>PetDefaultData</DefaultData>
<IdLocation>^apiPub.samples.PetD</IdLocation>
<IndexLocation>^apiPub.samples.PetI</IndexLocation>
<StreamLocation>^apiPub.samples.PetS</StreamLocation>
<Data name="PetDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>id</Value>
</Value>
<Value name="3">
<Value>category</Value>
</Value>
<Value name="4">
<Value>name</Value>
</Value>
<Value name="5">
<Value>photoUrls</Value>
</Value>
<Value name="6">
<Value>status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="apiPub.samples.Tag">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65612,46131.48016</TimeChanged>
<TimeCreated>65596,60901.117421</TimeCreated>

<Property name="id">
<Type>%Integer</Type>
</Property>

<Property name="name">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="pet">
<Type>apiPub.samples.Pet</Type>
<Cardinality>one</Cardinality>
<Inverse>tags</Inverse>
<Relationship>1</Relationship>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Index name="petIdx">
<Properties>pet</Properties>
</Index>

<Index name="nameIdx">
<Properties>name</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^apiPub.samples.TagD</DataLocation>
<DefaultData>TagDefaultData</DefaultData>
<IdLocation>^apiPub.samples.TagD</IdLocation>
<IndexLocation>^apiPub.samples.TagI</IndexLocation>
<StreamLocation>^apiPub.samples.TagS</StreamLocation>
<Data name="TagDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>id</Value>
</Value>
<Value name="3">
<Value>name</Value>
</Value>
<Value name="4">
<Value>pet</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="apiPub.samples.User">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65616,50260.067754</TimeChanged>
<TimeCreated>65596,60272.930719</TimeCreated>

<Property name="id">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="username">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="firstName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="lastName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="email">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="password">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="phone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="userStatus">
<Description>
User Status</Description>
<Type>%SmallInt</Type>
</Property>

<Index name="idIDX">
<Properties>id</Properties>
<Unique>1</Unique>
</Index>

<Index name="usernameIDX">
<Properties>username</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^apiPub.samples.UserD</DataLocation>
<DefaultData>UserDefaultData</DefaultData>
<IdLocation>^apiPub.samples.UserD</IdLocation>
<IndexLocation>^apiPub.samples.UserI</IndexLocation>
<StreamLocation>^apiPub.samples.UserS</StreamLocation>
<Data name="UserDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>id</Value>
</Value>
<Value name="3">
<Value>username</Value>
</Value>
<Value name="4">
<Value>firstName</Value>
</Value>
<Value name="5">
<Value>lastName</Value>
</Value>
<Value name="6">
<Value>email</Value>
</Value>
<Value name="7">
<Value>password</Value>
</Value>
<Value name="8">
<Value>phone</Value>
</Value>
<Value name="9">
<Value>userStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="apiPub.samples.api">
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeChanged>65647,36752.50642</TimeChanged>
<TimeCreated>65596,63305.409729</TimeCreated>

<Method name="addPet">
<Description>
Add a new pet to the store
@apiPub[path="/pet"]
@apiPub[params.description="Pet object that needs to be added to the store"]</Description>
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If $IsObject(##class(apiPub.samples.Pet).idIDXOpen(pPet.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) Already Exists"))
        }
        Set tSC = ..savePet(pPet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updatePet">
<Description>
Update an existing pet
@apiPub[path="/pet"]
@apiPub[params.description="Pet object that needs to be added/updated to the store"]
@apiPub[verb="put"]</Description>
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(##class(apiPub.samples.Pet).idIDXOpen(pPet.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set tSC = ..savePet(pPet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="savePet">
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(pPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Invalid Object"))
        }
        Set tCat = ##class(apiPub.samples.Category).idIDXOpen(pPet.category.id)
        If $IsObject(pPet.category) {
            Set tCat = ##class(apiPub.samples.Category).idIDXOpen(pPet.category.id)
            If '$IsObject(tCat) {
                Set tCat = ##class(apiPub.samples.Category).%New()
                Set tCat.id = pPet.category.id
                Set tCat.name = pPet.category.name
                Set tSC = tCat.%Save()
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
            Set pPet.category=tCat
        }
        Set tExPet = ##class(apiPub.samples.Pet).idIDXOpen(pPet.id)
        If $IsObject(tExPet) {
            Set tExPet.name=pPet.name
            Set tExPet.category=pPet.category
            Set tExPet.status=pPet.status
            Set tSC = tExPet.%Save()
        } Else {
            Set tSC = pPet.%Save()
        }
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="findByStatus">
<Description>
Finds Pets by status
@apiPub[path="/pet/findByStatus"]
@apiPub[params.description="Multiple status values can be provided with comma separated strings"]
@apiPub[params.pStatus.description="Status values that need to be considered for filter"]
@apiPub[params.pStatus.schema.items.enum=["available","pending","sold"]]
@apiPub[params.pStatus.schema.default="available"]</Description>
<FormalSpec>pStatus:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<WebMethod>1</WebMethod>
<ReturnTypeParams>ELEMENTTYPE="apiPub.samples.Pet"</ReturnTypeParams>
<Implementation><![CDATA[
	Set sql = "SELECT ID1 FROM apiPub_samples.Pet WHERE status in ('"_$Replace(pStatus,",","','")_"')"
	Set stat = ##class(%SQL.Statement).%New()
	Set Status = stat.%Prepare(sql)
	Set rset = stat.%Execute()
    Set ret = ##class(%ListOfObjects).%New()
	While rset.%Next() {
        Do ret.Insert(##class(apiPub.samples.Pet).%OpenId(rset.ID1))
	}
    Return ret
]]></Implementation>
</Method>

<Method name="findByTags">
<Description>
Finds Pets by tags
@apiPub[path="/pet/findByTags"]
@apiPub[params.description="Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."]
@apiPub[params.pTags.description="Tags to filter by"]
@apiPub[deprecated="true"]</Description>
<FormalSpec>pTags:%Library.DynamicArray</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<WebMethod>1</WebMethod>
<ReturnTypeParams>ELEMENTTYPE="apiPub.samples.Pet"</ReturnTypeParams>
<Implementation><![CDATA[
    set tags=""
    Set tIter = pTags.%GetIterator()
    While tIter.%GetNext(.key,.value) {
        Set tags = tags_$Select(key=0:"",1:",")_"'"_value_"'"
    }
	Set sql = "SELECT ID1 FROM apiPub_samples.Pet WHERE ID1 in (SELECT pet FROM apiPub_samples.Tag WHERE name in ("_tags_"))"
    Set stat = ##class(%SQL.Statement).%New()
	Set Status = stat.%Prepare(sql)
	Set rset = stat.%Execute()
    Set ret = ##class(%ListOfObjects).%New()
	While rset.%Next() {
        Do ret.Insert(##class(apiPub.samples.Pet).%OpenId(rset.ID1))
	}
    Return ret
]]></Implementation>
</Method>

<Method name="getPetById">
<Description>
Find pet by ID
@apiPub[path="/pet/{petId}"]
@apiPub[params.pId.description="ID of pet to return"]
@apiPub[params.pId.name="petId"]
@apiPub[statusCodes=[
    {"code":"400","description":"Invalid ID supplied"}
    ,{"code":"404","description":"Pet not found"}]
]</Description>
<FormalSpec>pId:%Integer</FormalSpec>
<ReturnType>apiPub.samples.Pet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    If pId'=+pId {Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Invalid ID supplied"))}
    Set tPet = ##class(apiPub.samples.Pet).idIDXOpen(pId)
    If '$IsObject(tPet) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<404> Pet not found"))
    }
    Return tPet
]]></Implementation>
</Method>

<Method name="uploadImage">
<Description>
uploads an image
@apiPub[path="/pet/{petId}/uploadImage"]
@apiPub[params.pId.name="petId"]
@apiPub[params.pContent.inputType="application/octet-stream"]</Description>
<FormalSpec>pId:%Integer,pContent:%Stream.GlobalBinary</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set tPet = ##class(apiPub.samples.Pet).idIDXOpen(pId)
        If '$IsObject(tPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set tFile = ##class(%Stream.FileBinary).%New()
        Set tSC = tFile.FilenameSet("/users/claudiodevecchi/downloads/petImage"_pId_".jpg")
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = tFile.CopyFromAndSave(pContent)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tUrl = "file:///Users/claudiodevecchi/Downloads/petImage"_pId_".jpg"
	    Set photoUrl = ##class(%ListOfDataTypes).%New()
        Do photoUrl.Insert(tUrl)
        Set tPet.photoUrls=photoUrl
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = tPet.%Save()
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updatePetForm">
<Description>
Updates a pet in the store with form data
@apiPub[path="/pet/{petId}"]
@apiPub[operationId="updatePetWithForm"]
@apiPub[params.petId.description="ID of pet that needs to be updated"]
@apiPub[params.name.description="Updated name of the pet"]
@apiPub[params.name.inputType="application/x-www-form-urlencoded"]
@apiPub[params.status.description="Updated status of the pet"]
@apiPub[params.status.inputType="application/x-www-form-urlencoded"]</Description>
<FormalSpec>petId:%Integer,name:%String,status:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set pet = ##class(apiPub.samples.Pet).idIDXOpen(petId)
        If '$IsObject(pet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set pet.name = name
        Set pet.status = status
        Set tSC = ..savePet(pet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="deletePet">
<Description>
Deletes a Pet
@apiPub[path="/pet/{petId}"]
@apiPub[verb="delete"]
@apiPub[params.id.description="Pet id to delete"]
@apiPub[params.id.name="petId"]
@apiPub[params.apikey.inputType="header"]
@apiPub[params.apikey.name="api_key"]</Description>
<FormalSpec>apikey:%String,id:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set pPet = ##class(apiPub.samples.Pet).idIDXOpen(id)
        If '$IsObject(pPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set sql = "Delete FROM apiPub_samples.Tag WHERE pet = ?"
        Set stat = ##class(%SQL.Statement).%New()
        Set tSC = stat.%Prepare(sql)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set rset = stat.%Execute(pPet.%Id())
        Set tSC = ##class(apiPub.samples.Pet).%DeleteId(pPet.%Id())
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="getInventory">
<Description>
Returns pet inventories by status
@apiPub[tag="store"]
@apiPub[path="/store/inventory"]
@apiPub[params.description="Returns a map of status codes to quantities"]
@apiPub[response.schema="Inventory"]</Description>
<ReturnType>%Library.DynamicObject</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set sql = "SELECT LOWER(status) status,count(*) ct FROM apiPub_samples.Pet GROUP BY LOWER(status)"
    Set stat = ##class(%SQL.Statement).%New()
	Set Status = stat.%Prepare(sql)
	Set rset = stat.%Execute()
    Set ret = {}
	While rset.%Next() {
        do ret.%Set(rset.status,rset.ct)
	}
    Return ret
]]></Implementation>
</Method>

<Method name="placeOrder">
<Description>
Place an order for a pet
@apiPub[path="/store/order"]
@apiPub[tag="store"]
@apiPub[params.description="order placed for purchasing the pet"]</Description>
<FormalSpec>pOrder:apiPub.samples.Order</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    If $IsObject(##class(apiPub.samples.Order).idIDXOpen(pOrder.id)) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Order (id) Already Exists"))
    }
    If '$IsObject(pOrder.pet) Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Invalid Pet (id)"))
    Quit pOrder.%Save()
]]></Implementation>
</Method>

<Method name="getOrderById">
<Description><![CDATA[
Find purchase order by ID
@apiPub[path="/store/order/{orderId}"]
@apiPub[tag="store"]
@apiPub[params.description="For valid response try integer IDs with value >\= 1 and <\= 10. Other values will generated exceptions"]
@apiPub[params.orderId.description="ID of the order that needs to be fetched"]]]></Description>
<FormalSpec>orderId:%Integer(MINVAL=1,MAXVAL=10)</FormalSpec>
<ReturnType>apiPub.samples.Order</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set order = ##class(apiPub.samples.Order).idIDXOpen(orderId)
    If '$IsObject(order) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Order (id) doesn't Exist"))
    }
    Quit order
]]></Implementation>
</Method>

<Method name="deleteOrder">
<Description>
Delete purchase order by ID
@apiPub[path="/store/order/{orderId}"]
@apiPub[tag="store"]
@apiPub[verb="delete"]
@apiPub[params.description="For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"]
@apiPub[params.orderId.description="ID of the order that needs to be deleted"]</Description>
<FormalSpec>orderId:%Integer(MINVAL=1)</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set order = ##class(apiPub.samples.Order).idIDXOpen(orderId)
        If '$IsObject(order) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Order (id) doesn't Exist"))
        }
        Set tSC = ##class(apiPub.samples.Order).%DeleteId(order.%Id())
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUser">
<Description>
Create user
@apiPub[path="/user"]
@apiPub[tag="user"]
@apiPub[params.description="This can only be done by the logged in user."]
@apiPub[successfulCode="201"]</Description>
<FormalSpec>pUser:apiPub.samples.User</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If $IsObject(##class(apiPub.samples.User).idIDXOpen(pUser.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (id) Already Exists"))
        }
        Set tSC = ..saveUser(pUser)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUsersWithArrayInput">
<Description>
Creates list of users with given input array
@apiPub[path="/user/createWithArray"]
@apiPub[tag="user"]
@apiPub[params.description="List of user object"]</Description>
<FormalSpec>pArrayOfUsers:%ArrayOfObjects(ELEMENTTYPE="apiPub.samples.User")</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //Validate Array
        For i=1: 1: pArrayOfUsers.Count() {
            Set tUser=pArrayOfUsers.GetAt(i)
            If $IsObject(##class(apiPub.samples.User).idIDXOpen(tUser.id)) {
                Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (id) Already Exists"))
            }
        }
        //Save
        For i=1: 1: pArrayOfUsers.Count() {
            Set tUser=pArrayOfUsers.GetAt(i)
            Set tSC = ..saveUser(tUser)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUsersWithListInput">
<Description>
Creates list of users with given input array
@apiPub[path="/user/createWithList"]
@apiPub[tag="user"]
@apiPub[params.description="List of user object"]</Description>
<FormalSpec>pListOfUsers:%ListOfObjects(ELEMENTTYPE="apiPub.samples.User")</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //Validate List
        For i=1: 1: pListOfUsers.Count() {
            Set tUser=pListOfUsers.GetAt(i)
            If $IsObject(##class(apiPub.samples.User).idIDXOpen(tUser.id)) {
                Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (id) Already Exists"))
            }
        }
        //Save
        For i=1: 1: pListOfUsers.Count() {
            Set tUser=pListOfUsers.GetAt(i)
            Set tSC = ..saveUser(tUser)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updateUser">
<Description>
Update user
@apiPub[path="/user/{username}"]
@apiPub[verb="put"]
@apiPub[tag="user"]
@apiPub[params.description="This can only be done by the logged in user."]
@apiPub[params.pUserName.name="username"]</Description>
<FormalSpec>pUserName:%String,pUser:apiPub.samples.User</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(##class(apiPub.samples.User).usernameIDXOpen(pUserName)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (username) doesn't Exist"))
        }
        Set tSC = ..saveUser(pUser)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updateUserUsingOASSchema">
<Description>
Update user using OAS schema
@apiPub[path="/user"]
@apiPub[verb="put"]
@apiPub[tag="user"]
@apiPub[params.description="This can only be done by the logged in user."]
@apiPub[params.user.schema="User"]</Description>
<FormalSpec>username:%String,user:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(##class(apiPub.samples.User).usernameIDXOpen(username)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (username) doesn't Exist"))
        }
        Set tSC = ##class(apiPub.core.converter).JSONToObj(user, "apiPub.samples.User", .pUser)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = ..saveUser(pUser)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="saveUser">
<FormalSpec>pUser:apiPub.samples.User</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(pUser) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Invalid Object"))
        }
        Set tExUser = ##class(apiPub.samples.User).idIDXOpen(pUser.id)
        If $IsObject(tExUser) {
            Set tExUser.username=pUser.username
            Set tExUser.firstName=pUser.firstName
            Set tExUser.lastName=pUser.lastName
            Set tExUser.email=pUser.email
            Set tExUser.password=pUser.password
            Set tExUser.phone=pUser.phone
            Set tSC = tExUser.%Save()
        } Else {
            Set tSC = pUser.%Save()
        }
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="getUserByName">
<Description>
Get user by user name
@apiPub[tag="user"]
@apiPub[path="/user/{username}"]
@apiPub[params.pUserName.description="The name that needs to be fetched"]
@apiPub[params.pUserName.name="username"]</Description>
<FormalSpec>pUserName:%String</FormalSpec>
<ReturnType>apiPub.samples.User</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tUser = ##class(apiPub.samples.User).usernameIDXOpen(pUserName)
    If '$IsObject(tUser) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "username doesn't Exist"))
    }
    Return tUser
]]></Implementation>
</Method>

<Method name="deleteUser">
<Description>
Delete user
@apiPub[tag="user"]
@apiPub[verb="delete"]
@apiPub[path="/user/{username}"]
@apiPub[params.pUserName.description="The name that needs to be deleted"]
@apiPub[params.pUserName.name="username"]</Description>
<FormalSpec>pUserName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set tUser = ##class(apiPub.samples.User).usernameIDXOpen(pUserName)
        If '$IsObject(tUser) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "username doesn't Exist"))
        }
        Set tSC = ##class(apiPub.samples.User).%DeleteId(tUser.%Id())
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="loginUser">
<Description>
Logs user into the system
@apiPub[tag="user"]
@apiPub[path="/user/login"]
@apiPub[params.username.required="true"]
@apiPub[params.username.description="The user name for login"]
@apiPub[params.password.required="true"]
@apiPub[params.password.description="The password for login in clear text"]
@apiPub[params.expiresAfter.outputType="header"]
@apiPub[params.expiresAfter.description="date in UTC when token expires"]
@apiPub[params.expiresAfter.name="X-Expires-After"]
@apiPub[params.rateLimit.outputType="header"]
@apiPub[params.rateLimit.description="calls per hour allowed by the user"]
@apiPub[params.rateLimit.name="X-Rate-Limit"]
@apiPub[response.outputType="text/plain"]</Description>
<FormalSpec>username:%String,password:%String,*expiresAfter:%DateTime,*rateLimit:%BigInt</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    Quit $Horolog
]]></Implementation>
</Method>

<Method name="logoutUser">
<Description>
Logs out current logged in user session
@apiPub[path="/user/logout"]
@apiPub[tag="user"]</Description>
<WebMethod>1</WebMethod>
</Method>

<XData name="apiPub">
<MimeType>application/json</MimeType>
<Data><![CDATA[
{
        "info" : {
            "description" : "This is a sample Petstore server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
            "version" : "1.0.0",
            "title" : "IRIS Petstore (Dev First)",
            "termsOfService" : "http://swagger.io/terms/",
            "contact" : {
            "email" : "apiteam@swagger.io"
            },
            "license" : {
            "name" : "Apache 2.0",
            "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
        },
        "tags" : [ {
            "name" : "pet",
            "description" : "Everything about your Pets",
            "externalDocs" : {
            "description" : "Find out more",
            "url" : "http://swagger.io"
            }
        }, {
            "name" : "store",
            "description" : "Access to Petstore orders"
        }, {
            "name" : "user",
            "description" : "Operations about user",
            "externalDocs" : {
            "description" : "Find out more about our store",
            "url" : "http://swagger.io"
            }
        } ],
        "schemas": {
            "Inventory": {
                "type" : "object",
                "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                }
            },
            "User": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "userStatus": {
                        "type": "integer",
                        "description": "(short) User Status"
                    }
                }
            }            
        }
    }
]]></Data>
</XData>
</Class>


<Class name="apiPub.samples.apiBeforeCustom">
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeChanged>65636,57330.046986</TimeChanged>
<TimeCreated>65636,57330.046986</TimeCreated>

<Method name="addPet">
<Description>
Add a new pet to the store</Description>
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If $IsObject(##class(apiPub.samples.Pet).idIDXOpen(pPet.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) Already Exists"))
        }
        Set tSC = ..savePet(pPet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updatePet">
<Description>
Update an existing pet</Description>
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(##class(apiPub.samples.Pet).idIDXOpen(pPet.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set tSC = ..savePet(pPet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="savePet">
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(pPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Invalid Object"))
        }
        Set tCat = ##class(apiPub.samples.Category).idIDXOpen(pPet.category.id)
        If $IsObject(pPet.category) {
            Set tCat = ##class(apiPub.samples.Category).idIDXOpen(pPet.category.id)
            If '$IsObject(tCat) {
                Set tCat = ##class(apiPub.samples.Category).%New()
                Set tCat.id = pPet.category.id
                Set tCat.name = pPet.category.name
                Set tSC = tCat.%Save()
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
            Set pPet.category=tCat
        }
        Set tExPet = ##class(apiPub.samples.Pet).idIDXOpen(pPet.id)
        If $IsObject(tExPet) {
            Set tExPet.name=pPet.name
            Set tExPet.category=pPet.category
            Set tExPet.status=pPet.status
            Set tSC = tExPet.%Save()
        } Else {
            Set tSC = pPet.%Save()
        }
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="findByStatus">
<Description>
Finds Pets by status</Description>
<FormalSpec>pStatus:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<WebMethod>1</WebMethod>
<ReturnTypeParams>ELEMENTTYPE="apiPub.samples.Pet"</ReturnTypeParams>
<Implementation><![CDATA[
	Set sql = "SELECT ID1 FROM apiPub_samples.Pet WHERE status in ('"_$Replace(pStatus,",","','")_"')"
	Set stat = ##class(%SQL.Statement).%New()
	Set Status = stat.%Prepare(sql)
	Set rset = stat.%Execute()
    Set ret = ##class(%ListOfObjects).%New()
	While rset.%Next() {
        Do ret.Insert(##class(apiPub.samples.Pet).%OpenId(rset.ID1))
	}
    Return ret
]]></Implementation>
</Method>

<Method name="findByTags">
<Description>
Finds Pets by tags</Description>
<FormalSpec>pTags:%Library.DynamicArray</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<WebMethod>1</WebMethod>
<ReturnTypeParams>ELEMENTTYPE="apiPub.samples.Pet"</ReturnTypeParams>
<Implementation><![CDATA[
    set tags=""
    Set tIter = pTags.%GetIterator()
    While tIter.%GetNext(.key,.value) {
        Set tags = tags_$Select(key=0:"",1:",")_"'"_value_"'"
    }
	Set sql = "SELECT ID1 FROM apiPub_samples.Pet WHERE ID1 in (SELECT pet FROM apiPub_samples.Tag WHERE name in ("_tags_"))"
    Set stat = ##class(%SQL.Statement).%New()
	Set Status = stat.%Prepare(sql)
	Set rset = stat.%Execute()
    Set ret = ##class(%ListOfObjects).%New()
	While rset.%Next() {
        Do ret.Insert(##class(apiPub.samples.Pet).%OpenId(rset.ID1))
	}
    Return ret
]]></Implementation>
</Method>

<Method name="getPetById">
<Description>
Find pet by ID</Description>
<FormalSpec>pId:%Integer</FormalSpec>
<ReturnType>apiPub.samples.Pet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tPet = ##class(apiPub.samples.Pet).idIDXOpen(pId)
    If '$IsObject(tPet) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
    }
    Return tPet
]]></Implementation>
</Method>

<Method name="uploadImage">
<Description>
uploads an image</Description>
<FormalSpec>pId:%Integer,pContent:%Stream.GlobalBinary</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set tPet = ##class(apiPub.samples.Pet).idIDXOpen(pId)
        If '$IsObject(tPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set tFile = ##class(%Stream.FileBinary).%New()
        Set tSC = tFile.FilenameSet("/users/claudiodevecchi/downloads/petImage"_pId_".jpg")
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = tFile.CopyFromAndSave(pContent)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tUrl = "file:///Users/claudiodevecchi/Downloads/petImage"_pId_".jpg"
	    Set photoUrl = ##class(%ListOfDataTypes).%New()
        Do photoUrl.Insert(tUrl)
        Set tPet.photoUrls=photoUrl
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tSC = tPet.%Save()
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updatePetForm">
<Description>
Updates a pet in the store with form data</Description>
<FormalSpec>petId:%Integer,name:%String,status:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set pet = ##class(apiPub.samples.Pet).idIDXOpen(petId)
        If '$IsObject(pet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set pet.name = name
        Set pet.status = status
        Set tSC = ..savePet(pet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="deletePet">
<Description>
Deletes a Pet</Description>
<FormalSpec>apikey:%String,id:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set pPet = ##class(apiPub.samples.Pet).idIDXOpen(id)
        If '$IsObject(pPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) doesn't Exist"))
        }
        Set sql = "Delete FROM apiPub_samples.Tag WHERE pet = ?"
        Set stat = ##class(%SQL.Statement).%New()
        Set tSC = stat.%Prepare(sql)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set rset = stat.%Execute(pPet.%Id())
        Set tSC = ##class(apiPub.samples.Pet).%DeleteId(pPet.%Id())
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="getInventory">
<Description>
Returns pet inventories by status</Description>
<ReturnType>%Library.DynamicObject</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set sql = "SELECT LOWER(status) status,count(*) ct FROM apiPub_samples.Pet GROUP BY LOWER(status)"
    Set stat = ##class(%SQL.Statement).%New()
	Set Status = stat.%Prepare(sql)
	Set rset = stat.%Execute()
    Set ret = {}
	While rset.%Next() {
        do ret.%Set(rset.status,rset.ct)
	}
    Return ret
]]></Implementation>
</Method>

<Method name="placeOrder">
<Description>
Place an order for a pet</Description>
<FormalSpec>pOrder:apiPub.samples.Order</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    If $IsObject(##class(apiPub.samples.Order).idIDXOpen(pOrder.id)) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Order (id) Already Exists"))
    }
    If '$IsObject(pOrder.pet) Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Invalid Pet (id)"))
    Quit pOrder.%Save()
]]></Implementation>
</Method>

<Method name="getOrderById">
<Description>
Find purchase order by ID</Description>
<FormalSpec>orderId:%Integer(MINVAL=1,MAXVAL=10)</FormalSpec>
<ReturnType>apiPub.samples.Order</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set order = ##class(apiPub.samples.Order).idIDXOpen(orderId)
    If '$IsObject(order) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Order (id) doesn't Exist"))
    }
    Quit order
]]></Implementation>
</Method>

<Method name="deleteOrder">
<Description>
Delete purchase order by ID</Description>
<FormalSpec>orderId:%Integer(MINVAL=1)</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set order = ##class(apiPub.samples.Order).idIDXOpen(orderId)
        If '$IsObject(order) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Order (id) doesn't Exist"))
        }
        Set tSC = ##class(apiPub.samples.Order).%DeleteId(order.%Id())
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUser">
<Description>
Create user</Description>
<FormalSpec>pUser:apiPub.samples.User</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If $IsObject(##class(apiPub.samples.User).idIDXOpen(pUser.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (id) Already Exists"))
        }
        Set tSC = ..saveUser(pUser)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUsersWithArrayInput">
<Description>
Creates list of users with given input array</Description>
<FormalSpec>pArrayOfUsers:%ArrayOfObjects(ELEMENTTYPE="apiPub.samples.User")</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //Validate Array
        For i=1: 1: pArrayOfUsers.Count() {
            Set tUser=pArrayOfUsers.GetAt(i)
            If $IsObject(##class(apiPub.samples.User).idIDXOpen(tUser.id)) {
                Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (id) Already Exists"))
            }
        }
        //Save
        For i=1: 1: pArrayOfUsers.Count() {
            Set tUser=pArrayOfUsers.GetAt(i)
            Set tSC = ..saveUser(tUser)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUsersWithListInput">
<Description>
Creates list of users with given input array</Description>
<FormalSpec>pListOfUsers:%ListOfObjects(ELEMENTTYPE="apiPub.samples.User")</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //Validate List
        For i=1: 1: pListOfUsers.Count() {
            Set tUser=pListOfUsers.GetAt(i)
            If $IsObject(##class(apiPub.samples.User).idIDXOpen(tUser.id)) {
                Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (id) Already Exists"))
            }
        }
        //Save
        For i=1: 1: pListOfUsers.Count() {
            Set tUser=pListOfUsers.GetAt(i)
            Set tSC = ..saveUser(tUser)
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updateUser">
<Description>
Update user</Description>
<FormalSpec>pUserName:%String,pUser:apiPub.samples.User</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(##class(apiPub.samples.User).usernameIDXOpen(pUserName)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "User (username) doesn't Exist"))
        }
        Set tSC = ..saveUser(pUser)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="saveUser">
<FormalSpec>pUser:apiPub.samples.User</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(pUser) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Invalid Object"))
        }
        Set tExUser = ##class(apiPub.samples.User).idIDXOpen(pUser.id)
        If $IsObject(tExUser) {
            Set tExUser.username=pUser.username
            Set tExUser.firstName=pUser.firstName
            Set tExUser.lastName=pUser.lastName
            Set tExUser.email=pUser.email
            Set tExUser.password=pUser.password
            Set tExUser.phone=pUser.phone
            Set tSC = tExUser.%Save()
        } Else {
            Set tSC = pUser.%Save()
        }
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="getUserByName">
<Description>
Get user by user name</Description>
<FormalSpec>pUserName:%String</FormalSpec>
<ReturnType>apiPub.samples.User</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tUser = ##class(apiPub.samples.User).usernameIDXOpen(pUserName)
    If '$IsObject(tUser) {
        Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "username doesn't Exist"))
    }
    Return tUser
]]></Implementation>
</Method>

<Method name="deleteUser">
<Description>
Delete user</Description>
<FormalSpec>pUserName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        Set tUser = ##class(apiPub.samples.User).usernameIDXOpen(pUserName)
        If '$IsObject(tUser) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "username doesn't Exist"))
        }
        Set tSC = ##class(apiPub.samples.User).%DeleteId(tUser.%Id())
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="loginUser">
<Description>
Logs user into the system</Description>
<FormalSpec>username:%String,password:%String,*expiresAfter:%DateTime,*rateLimit:%BigInt</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    Quit $Horolog
]]></Implementation>
</Method>

<Method name="logoutUser">
<Description>
Logs out current logged in user session
@apiPub[path="/user/logout"]
@apiPub[tag="user"]</Description>
<WebMethod>1</WebMethod>
</Method>

<XData name="apiPub">
<MimeType>application/json</MimeType>
<Data><![CDATA[
{
    }
]]></Data>
</XData>
</Class>


<Class name="apiPub.samples.apiFirst">
<Description>
Methods spec projected using API first approach mode
All of the schemas and information needed on XDATA block were imported from Swagger Spec file
All of schemas ared automatically parsed by apiPub tool</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeChanged>65626,58583.168235</TimeChanged>
<TimeCreated>65625,37314.561171</TimeCreated>

<Method name="addPet">
<Description>
Add a new pet to the store.
@apiPub[path="/pet"]
@apiPub[params.description="Pet object that needs to be added to the store"]
@apiPub[params.pet.schema="Pet"]</Description>
<FormalSpec>pet:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updatePet">
<Description>
Update an existing pet
@apiPub[path="/pet"]
@apiPub[params.description="Pet object that needs to be added/updated to the store"]
@apiPub[verb="put"]
@apiPub[params.pet.schema="Pet"]</Description>
<FormalSpec>pet:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="findPetsByStatus">
<Description>
Finds Pets by status
@apiPub[path="/pet/findByStatus"]
@apiPub[params.description="Multiple status values can be provided with comma separated strings"]
@apiPub[params.status.description="Status values that need to be considered for filter"]
@apiPub[params.status.schema.items.enum=["available","pending","sold"]]
@apiPub[params.status.schema.default="available"]
@apiPub[response.schema={"findByStatus_response":{"type":"array","items":{"$ref":"#/components/schemas/Pet"}}}]</Description>
<FormalSpec>status:%String</FormalSpec>
<ReturnType>%Library.DynamicArray</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="findByTags">
<Description>
Finds Pets by tags
@apiPub[path="/pet/findByTags"]
@apiPub[params.description="Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."]
@apiPub[params.tags.description="Tags to filter by"]
@apiPub[response.schema={"findByTags_response":{"type":"array","items":{"$ref":"#/components/schemas/Pet"}}}]
@apiPub[deprecated="true"]</Description>
<FormalSpec>tags:%String</FormalSpec>
<ReturnType>%Library.DynamicArray</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="getPetById">
<Description>
Find pet by ID
@apiPub[path="/pet/{petId}"]
@apiPub[params.petId.description="ID of pet to return"]
@apiPub[response.schema="Pet"]</Description>
<FormalSpec>petId:%Integer</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="uploadImage">
<Description>
uploads an image
@apiPub[path="/pet/{petId}/uploadImage"]
@apiPub[params.content.inputType="application/octet-stream"]</Description>
<FormalSpec>petId:%Integer,content:%Stream.GlobalBinary</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updatePetWithForm">
<Description>
Updates a pet in the store with form data
@apiPub[path="/pet/{petId}"]
@apiPub[params.petId.description="ID of pet that needs to be updated"]
@apiPub[params.name.description="Updated name of the pet"]
@apiPub[params.name.inputType="application/x-www-form-urlencoded"]
@apiPub[params.status.description="Updated status of the pet"]
@apiPub[params.status.inputType="application/x-www-form-urlencoded"]</Description>
<FormalSpec>petId:%Integer,name:%String,status:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="deletePet">
<Description>
Deletes a Pet
@apiPub[path="/pet/{petId}"]
@apiPub[verb="delete"]
@apiPub[params.apikey.inputType="header"]
@apiPub[params.apikey.name="api_key"]
@apiPub[params.petId.description="Pet id to delete"]</Description>
<FormalSpec>apikey:%String,petId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="getInventory">
<Description>
Returns pet inventories by status
@apiPub[tag="store"]
@apiPub[path="/store/inventory"]
@apiPub[params.description="Returns a map of status codes to quantities"]
@apiPub[response.schema={
        "getInventory_response":{
            "type":"object",
            "additionalProperties":{
                "type":"integer",
                "format":"int32"
            }
        }
}]</Description>
<ReturnType>%Library.DynamicObject</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="placeOrder">
<Description>
Place an order for a pet
@apiPub[path="/store/order"]
@apiPub[tag="store"]
@apiPub[params.description="order placed for purchasing the pet"]
@apiPub[params.pOrder.schema="Order"]</Description>
<FormalSpec>order:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="getOrderById">
<Description><![CDATA[
Find purchase order by ID
@apiPub[path="/store/order/{orderId}"]
@apiPub[tag="store"]
@apiPub[params.description="For valid response try integer IDs with value >\= 1 and <\= 10. Other values will generated exceptions"]
@apiPub[params.orderId.description="ID of pet that needs to be fetched"]
@apiPub[response.schema="Order"]]]></Description>
<FormalSpec>orderId:%Integer(MINVAL=1,MAXVAL=10)</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="deleteOrder">
<Description>
Delete purchase order by ID
@apiPub[path="/store/order/{orderId}"]
@apiPub[tag="store"]
@apiPub[verb="delete"]
@apiPub[params.description="For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"]
@apiPub[params.orderId.description="ID of the order that needs to be deleted"]</Description>
<FormalSpec>orderId:%Integer(MINVAL=1)</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUser">
<Description>
Create user
@apiPub[path="/user"]
@apiPub[tag="user"]
@apiPub[params.description="This can only be done by the logged in user."]
@apiPub[params.user.schema="User"]</Description>
<FormalSpec>user:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="createUsersWithArrayInput">
<Description>
Creates list of users with given input array
@apiPub[path="/user/createWithArray"]
@apiPub[tag="user"]
@apiPub[params.description="List of user object"]
@apiPub[params.userArray.schema={"UserArray":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}]</Description>
<FormalSpec>userArray:%Library.DynamicArray</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="createUsersWithListInput">
<Description>
Creates list of users with given input array
@apiPub[path="/user/createWithList"]
@apiPub[tag="user"]
@apiPub[params.description="List of user object"]
@apiPub[params.userArray.schema={"UserArray":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}]</Description>
<FormalSpec>userArray:%Library.DynamicArray</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="updateUser">
<Description>
Update use
@apiPub[path="/user/{username}"]
@apiPub[verb="put"]
@apiPub[tag="user"]
@apiPub[params.description="This can only be done by the logged in user."]
@apiPub[params.user.schema="User"]
@apiPub[params.username.description="name that need to be updated"]</Description>
<FormalSpec>username:%String,user:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="getUserByName">
<Description>
Get user by user name
@apiPub[tag="user"]
@apiPub[path="/user/{username}"]
@apiPub[params.username.description="The name that needs to be fetched"]
@apiPub[response.schema="User"]</Description>
<FormalSpec>username:%String</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[    //your code here
]]></Implementation>
</Method>

<Method name="deleteUser">
<Description>
Delete user
@apiPub[tag="user"]
@apiPub[verb="delete"]
@apiPub[path="/user/{username}"]
@apiPub[params.username.description="The name that needs to be deleted"]</Description>
<FormalSpec>username:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {    
        //your code here
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="loginUser">
<Description>
Logs user into the system
@apiPub[tag="user"]
@apiPub[path="/user/login"]
@apiPub[params.username.required="true"]
@apiPub[params.username.description="The user name for login"]
@apiPub[params.password.required="true"]
@apiPub[params.password.description="The password for login in clear text"]
@apiPub[params.XExpiresAfter.outputType="header"]
@apiPub[params.XExpiresAfter.description="date in UTC when token expires"]
@apiPub[params.XExpiresAfter.name="X-Expires-After"]
@apiPub[params.XRateLimit.outputType="header"]
@apiPub[params.XRateLimit.description="calls per hour allowed by the user"]
@apiPub[params.XRateLimit.name="X-Rate-Limit"]
@apiPub[response.outputType="text/plain"]</Description>
<FormalSpec>username:%String,password:%String,*XExpiresAfter:%DateTime,*XRateLimit:%BigInt</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[       //your code here
]]></Implementation>
</Method>

<Method name="logoutUser">
<Description>
Logs out current logged in user session
@apiPub[path="/user/logout"]
@apiPub[tag="user"]</Description>
<WebMethod>1</WebMethod>
</Method>

<XData name="apiPub">
<MimeType>application/json</MimeType>
<Data><![CDATA[
{
        "info" : {
            "description" : "This is a sample Petstore server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
            "version" : "1.0.0",
            "title" : "IRIS Petstore (API First)",
            "termsOfService" : "http://swagger.io/terms/",
            "contact" : {
            "email" : "apiteam@swagger.io"
            },
            "license" : {
            "name" : "Apache 2.0",
            "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
        },
        "tags" : [ {
            "name" : "pet",
            "description" : "Everything about your Pets",
            "externalDocs" : {
            "description" : "Find out more",
            "url" : "http://swagger.io"
            }
        }, {
            "name" : "store",
            "description" : "Access to Petstore orders"
        }, {
            "name" : "user",
            "description" : "Operations about user",
            "externalDocs" : {
            "description" : "Find out more about our store",
            "url" : "http://swagger.io"
            }
        } ],
        "schemas" : {
            "Order" : {
                "type" : "object",
                "properties" : {
                "id" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "petId" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "quantity" : {
                    "type" : "integer",
                    "format" : "int32"
                },
                "shipDate" : {
                    "type" : "string",
                    "format" : "date-time"
                },
                "status" : {
                    "type" : "string",
                    "description" : "Order Status",
                    "enum" : [ "placed", "approved", "delivered" ]
                },
                "complete" : {
                    "type" : "boolean",
                    "default" : false
                }
                },
                "xml" : {
                "name" : "Order"
                }
            },
            "Category" : {
                "type" : "object",
                "properties" : {
                "id" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "name" : {
                    "type" : "string"
                }
                },
                "xml" : {
                "name" : "Category"
                }
            },
            "User" : {
                "type" : "object",
                "properties" : {
                "id" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "username" : {
                    "type" : "string"
                },
                "firstName" : {
                    "type" : "string"
                },
                "lastName" : {
                    "type" : "string"
                },
                "email" : {
                    "type" : "string"
                },
                "password" : {
                    "type" : "string"
                },
                "phone" : {
                    "type" : "string"
                },
                "userStatus" : {
                    "type" : "integer",
                    "format" : "int32",
                    "description" : "User Status"
                }
                },
                "xml" : {
                "name" : "User"
                }
            },
            "Tag" : {
                "type" : "object",
                "properties" : {
                "id" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "name" : {
                    "type" : "string"
                }
                },
                "xml" : {
                "name" : "Tag"
                }
            },
            "Pet" : {
                "type" : "object",
                "required" : [ "name", "photoUrls" ],
                "properties" : {
                "id" : {
                    "type" : "integer",
                    "format" : "int64"
                },
                "category" : {
                    "$ref" : "#/components/schemas/Category"
                },
                "name" : {
                    "type" : "string",
                    "example" : "doggie"
                },
                "photoUrls" : {
                    "type" : "array",
                    "xml" : {
                    "name" : "photoUrl",
                    "wrapped" : true
                    },
                    "items" : {
                    "type" : "string"
                    }
                },
                "tags" : {
                    "type" : "array",
                    "xml" : {
                    "name" : "tag",
                    "wrapped" : true
                    },
                    "items" : {
                    "$ref" : "#/components/schemas/Tag"
                    }
                },
                "status" : {
                    "type" : "string",
                    "description" : "pet status in the store",
                    "enum" : [ "available", "pending", "sold" ]
                }
                },
                "xml" : {
                "name" : "Pet"
                }
            },
            "ApiResponse" : {
                "type" : "object",
                "properties" : {
                "code" : {
                    "type" : "integer",
                    "format" : "int32"
                },
                "type" : {
                    "type" : "string"
                },
                "message" : {
                    "type" : "string"
                }
                }
            }
            },
            "requestBodies" : {
            "Pet" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                    }
                },
                "application/xml" : {
                    "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                    }
                }
                },
                "description" : "Pet object that needs to be added to the store",
                "required" : true
            },
            "UserArray" : {
                "content" : {
                "application/json" : {
                    "schema" : {
                    "type" : "array",
                    "items" : {
                        "$ref" : "#/components/schemas/User"
                    }
                    }
                }
                },
                "description" : "List of user object",
                "required" : true
            }
        }
    }
]]></Data>
</XData>
</Class>


<Class name="apiPub.samples.petServices">
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeChanged>65632,54296.36435</TimeChanged>
<TimeCreated>65632,54296.36435</TimeCreated>

<Method name="addPet">
<Description>
Add a new pet to the store</Description>
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If $IsObject(##class(apiPub.samples.Pet).idIDXOpen(pPet.id)) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "Pet (id) Already Exists"))
        }
        Set tSC = ..savePet(pPet)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="savePet">
<FormalSpec>pPet:apiPub.samples.Pet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $System.Status.OK()
    Try {
        If '$IsObject(pPet) {
            Throw ##Class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError, "<400> Invalid Object"))
        }
        Set tCat = ##class(apiPub.samples.Category).idIDXOpen(pPet.category.id)
        If $IsObject(pPet.category) {
            Set tCat = ##class(apiPub.samples.Category).idIDXOpen(pPet.category.id)
            If '$IsObject(tCat) {
                Set tCat = ##class(apiPub.samples.Category).%New()
                Set tCat.id = pPet.category.id
                Set tCat.name = pPet.category.name
                Set tSC = tCat.%Save()
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            }
            Set pPet.category=tCat
        }
        Set tExPet = ##class(apiPub.samples.Pet).idIDXOpen(pPet.id)
        If $IsObject(tExPet) {
            Set tExPet.name=pPet.name
            Set tExPet.category=pPet.category
            Set tExPet.status=pPet.status
            Set tSC = tExPet.%Save()
        } Else {
            Set tSC = pPet.%Save()
        }
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
    }
    Catch(e) {
        Set tSC = e.AsStatus()      
    }
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.samples.services">
<Super>apiPub.core.service</Super>
<TimeChanged>65647,44358.833756</TimeChanged>
<TimeCreated>65596,61722.645303</TimeCreated>

<Parameter name="OASPath">
<Type>%String</Type>
<Default>Get:/doc</Default>
</Parameter>

<Parameter name="DispatchClass">
<Type>%String</Type>
<Default>apiPub.samples.api</Default>
</Parameter>

<Parameter name="DispatchBSName">
<Description>
When the Dispatch class is also a Business Service Component and has a different name</Description>
<Type>%String</Type>
</Parameter>

<Parameter name="DispatchBaseURL">
<Description>
Useful to treat documentation and api (urls) separately (different web applications)</Description>
<Type>%String</Type>
</Parameter>

<Parameter name="OnlyOAS">
<Description>
If false allows API Calling</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="Traceable">
<Description>
Use TracerBSName for monitoring</Description>
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="TracerBSName">
<Default>apiPub.tracer.bs</Default>
</Parameter>

<Parameter name="APIDomain">
<Default>samples</Default>
</Parameter>
</Class>


<Class name="apiPub.service.api">
<Super>apiPub.core.service</Super>
<TimeChanged>65596,61658.36113</TimeChanged>
<TimeCreated>65587,62215.41894</TimeCreated>

<Parameter name="OnlyOAS">
<Description>
If false allows API Calling</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="OASPath">
<Type>%String</Type>
<Default>Get:/oas</Default>
</Parameter>

<Parameter name="DispatchClass">
<Type>%String</Type>
<Default>apiPub.samples.api</Default>
</Parameter>

<Parameter name="Traceable">
<Description>
Use TracerBSName for monitoring</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="TracerBSName">
<Default>apiPub.tracer.bs</Default>
</Parameter>

<Parameter name="APIDomain">
<Default>Samples</Default>
</Parameter>
</Class>


<Class name="apiPub.service.message">
<Super>Ens.Response,Ens.Request</Super>
<TimeChanged>65631,49005.416923</TimeChanged>
<TimeCreated>65560,30570.443099</TimeCreated>

<Property name="CallerInfo">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="APIDomain">
<Type>%String</Type>
</Property>

<Property name="APIOperationId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="APIPath">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TargetBaseURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HttpVerb">
<Type>%String</Type>
</Property>

<Property name="RequestURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Headers">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ContentType">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CharSet">
<Type>%String</Type>
</Property>

<Property name="Body">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="Params">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Cookies">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MimeData">
<Type>%RawString</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="ContentLength">
<Type>%String</Type>
</Property>

<Property name="ContentInfo">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ContentBoundary">
<Type>%String</Type>
</Property>

<Property name="HttpVersion">
<Type>%String</Type>
</Property>

<Property name="ResponseStatusCode">
<Type>%Integer</Type>
</Property>

<Property name="ResponseStatusLine">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ResponseReasonPhrase">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DispatchClass">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DispatchMethod">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ServiceClass">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Method name="GetMimeData">
<Description>
Retrieves the named multipart MIME stream.</Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>name:%String,default:%Stream.Object="",index:%Integer=1</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[$get(i%MimeData(name,index),default)
]]></Implementation>
</Method>

<Method name="InsertMimeData">
<Description>
Inserts a multipart MIME stream by name into the collection.</Description>
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>name:%String,value:%Stream.Object</FormalSpec>
<Implementation><![CDATA[
	If value="" Quit
	Set i%MimeData(name,$order(i%MimeData(name,""),-1)+1)=value
]]></Implementation>
</Method>

<Method name="IsDefinedMimeData">
<Description>
Returns true if the named multipart MIME stream exists in the collection, false otherwise.</Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>name:%String,index:%Integer=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$data(i%MimeData(name,index))
]]></Implementation>
</Method>

<Method name="CountMimeData">
<Description>
Returns the count of multipart MIME streams with this name.</Description>
<Final>1</Final>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#Dim count,i
	
	Quit:'$data(i%MimeData(name)) 0
	Set count=0 Set i="" For  Set i=$order(i%MimeData(name,i)) Quit:i=""  Set count=count+1
	Quit count
]]></Implementation>
</Method>

<Method name="NextMimeData">
<Description>
Retrieves name of the next multipart MIME stream stored in the request object.</Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$order(i%MimeData(name))
]]></Implementation>
</Method>

<Method name="NextMimeDataIndex">
<Description>
Return the index number of the next multipart MIME stream stored in the request object.</Description>
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>name:%String,index:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$order(i%MimeData(name,index))
]]></Implementation>
</Method>

<Method name="DeleteMimeData">
<Description><![CDATA[
Removes this multipart MIME stream from the collection. Returns the number
of nodes it has removed. If <var>name</var> is not defined then it will
remove the entire set of MimeData, if <var>name</var> is defined but <var>index</var>
is not then it will remove all items stored under <var>name</var>.]]></Description>
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>name:%String="",index:%Integer=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#Dim defined
	If name="" {
		Set defined=0
		Set name=$order(i%MimeData(""))
		While name'="" {
			Set index=$order(i%MimeData(name,""))
			While index'="" { Set defined=defined+1,index=$order(i%MimeData(name,index)) }
			Set name=$Order(i%MimeData(name))
		}
		Kill i%MimeData
		Quit defined
	} ElseIf index="" {
		Set defined=0
		Set index=$order(i%MimeData(name,""))
		While index'="" { Set defined=defined+1,index=$order(i%MimeData(name,index)) }
		Kill i%MimeData(name)
		Quit defined
	} ElseIf $Data(i%MimeData(name,index)) {
		Kill i%MimeData(name,index)
		Quit 1
	}
	Quit 0
]]></Implementation>
</Method>

<Method name="GetParams">
<FormalSpec>pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        If $Length(..Params)=0 Return tRef
        Set tJson = {}.%FromJSON(..Params)
        Set tRef = ##class(APITracer.utils.json).GetByLineKey(tJson,pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetHeaders">
<FormalSpec>pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        If $Length(..Headers)=0 Return tRef
        Set tJson = {}.%FromJSON(..Headers)
        Set tRef = ##class(APITracer.utils.json).GetByLineKey(tJson,pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetBody">
<FormalSpec>pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Do ..Body.Rewind()
        If $Length(..Body.Read())=0 Return tRef
        Do ..Body.Rewind()
        Set tJson = {}.%FromJSON(..Body)
        Set tRef = ##class(APITracer.utils.json).GetByLineKey(tJson,pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetHeadersProp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID,pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Set tObj = ..%OpenId(pID)
        Set tRef = tObj.GetHeaders(pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetBodyProp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID,pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Set tObj = ..%OpenId(pID)
        Set tRef = tObj.GetBody(pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetParamsProp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID,pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Set tObj = ..%OpenId(pID)
        Set tRef = tObj.GetParams(pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>messageDefaultData</DefaultData>
<Data name="messageDefaultData">
<Subscript>"message"</Subscript>
<Value name="1">
<Value>CallerInfo</Value>
</Value>
<Value name="2">
<Value>APIDomain</Value>
</Value>
<Value name="3">
<Value>APIOperationId</Value>
</Value>
<Value name="4">
<Value>APIPath</Value>
</Value>
<Value name="5">
<Value>TargetBaseURL</Value>
</Value>
<Value name="6">
<Value>HttpVerb</Value>
</Value>
<Value name="7">
<Value>RequestURL</Value>
</Value>
<Value name="8">
<Value>Headers</Value>
</Value>
<Value name="9">
<Value>ContentType</Value>
</Value>
<Value name="10">
<Value>CharSet</Value>
</Value>
<Value name="11">
<Value>Body</Value>
</Value>
<Value name="12">
<Value>Params</Value>
</Value>
<Value name="13">
<Value>Cookies</Value>
</Value>
<Value name="14">
<Value>MimeData</Value>
</Value>
<Value name="15">
<Value>ContentLength</Value>
</Value>
<Value name="16">
<Value>ContentInfo</Value>
</Value>
<Value name="17">
<Value>ContentBoundary</Value>
</Value>
<Value name="18">
<Value>HttpVersion</Value>
</Value>
<Value name="19">
<Value>ResponseStatusCode</Value>
</Value>
<Value name="20">
<Value>ResponseStatusLine</Value>
</Value>
<Value name="21">
<Value>ResponseReasonPhrase</Value>
</Value>
<Value name="22">
<Value>DispatchClass</Value>
</Value>
<Value name="23">
<Value>DispatchMethod</Value>
</Value>
<Value name="24">
<Value>ServiceClass</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="apiPub.service.rest">
<Super>%CSP.REST</Super>
<TimeChanged>65587,61847.896216</TimeChanged>
<TimeCreated>65560,30654.302206</TimeCreated>

<Parameter name="CHARSET">
<Type>%String</Type>
<Default>UTF-8</Default>
</Parameter>

<Parameter name="CONTENTTYPEJSON">
<Type>%String</Type>
<Default>application/json</Default>
</Parameter>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<Parameter name="Cors">
<Default>1</Default>
</Parameter>

<Parameter name="ReservedInboundParams">
<Type>%String</Type>
<Default>CachePassWord,CacheUserName,IRISUsername,IRISPassword,</Default>
</Parameter>

<Parameter name="ReservedOutboundParams">
<Type>%String</Type>
<Default>CachePassWord,CacheUserName,IRISUsername,IRISPassword,TargetBaseURL</Default>
</Parameter>

<Parameter name="DefaultForEmptyContentType">
<Type>%String</Type>
</Parameter>

<Parameter name="BeautifyJsonBodyResponse">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="BeautifyJsonBodyRequest">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="Traceable">
<Description>
Use TracerBSName for monitoring</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="TracerBSName">
<Default>apiPub.tracer.bs</Default>
</Parameter>

<Parameter name="SSL">
<Type>%String</Type>
<Default>DEFAULT</Default>
</Parameter>

<Parameter name="HTTPS">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="CallerInfo">
<Default>Rest Client</Default>
</Parameter>

<Parameter name="TargetBaseURL">
</Parameter>

<Parameter name="APIDomain">
<Default>apiPub</Default>
</Parameter>

<Method name="GetAPIMap">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
	Quit {
        "Get:/echo": "GetEcho"
        ,"Post:/echo": "PostEcho"
        ,"Get:/openapi/{className}": "GetOpenAPISpec"
        ,"Get:/openapi/{serviceName}/{operation}": "CallIRISAPI"
        ,"Post:/openapi/{serviceName}/{operation}": "CallIRISAPI"
        ,"Put:/openapi/{serviceName}/{operation}": "CallIRISAPI"
        ,"Delete:/openapi/{serviceName}/{operation}": "CallIRISAPI"
        ,"Patch:/openapi/{serviceName}/{operation}": "CallIRISAPI"
    }
]]></Implementation>
</Method>

<Method name="GetEcho">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set tSC = ##Class(apiPub.core.converter).ObjToJSON(pRequest,.tJSON,{"printResults":0})
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Do pResponse.Body.Write(tJSON.%ToJSON())
        Set pResponse.ResponseStatusCode = 200
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="CallIRISApi">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set tBodyRequest = {}
        If "Post Put"[pRequest.HttpVerb,$ZConvert(pRequest.ContentType,"L")["json" {
			If pRequest.Body.SizeGet()=0 Set tSC = $$$ERROR($$$GeneralError, "Body Could Not be Empty")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set tBodyRequest = {}.%FromJSON(pRequest.Body.Read())
            Set pResponse.ContentType =  "application/json"
        } ElseIf "Post Put"[pRequest.HttpVerb,$ZConvert(pRequest.ContentType,"L")["xml" {
            If pRequest.Body.SizeGet()=0 Set tSC = $$$ERROR($$$GeneralError, "Body Could Not be Empty")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
            Set tBodyRequest = pRequest.Body.Read()
            Set pResponse.ContentType =  "application/xml"
        } ElseIf "Post Put"[pRequest.HttpVerb {
            Set tSC = $$$ERROR($$$GeneralError, "Invalid Content Type")
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        }
        Set tSC = ..GetRestParams(pRequest.Params,.tParams,.tMethodParams)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)}
        Set tParams.printResults=0
		Set innerStat = {}
		Set pRequest.APIDomain = tMethodParams.%Get("serviceName")
		Set pRequest.APIOperationId = tMethodParams.%Get("operation")
		Set pSuccessfulCode=""
		Set tSC = ##class(apiPub.core.dispatcher).JSONCall(tMethodParams.%Get("serviceName")_"||"_tMethodParams.%Get("operation"),,pRequest.HttpVerb,tBodyRequest,tMethodParams,.jsonResult,tParams,.innerStat,.pInnerStat,.pSuccessfulCode)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        If innerStat.%Size()>0{
            Set pResponse.Headers={
                "iris-StatusCode":(innerStat.%Get("statusCode")),
                "iris-StatusMessage":(innerStat.%Get("message")),
                "iris-ErrorCode":(innerStat.%Get("errorCode"))
            }.%ToJSON()
        }
        If $Data(jsonResult) {
			If jsonResult.%Size()>0 Do pResponse.Body.Write(jsonResult.%ToJSON())
			Set pResponse.ContentType = "application/json"
        } ElseIf $Data(xmlResult) {
			If xmlResult.SizeGet()>0 Do pResponse.Body.Write(xmlResult.Read())
			Set pResponse.ContentType = "application/xml"
		}
        Set pResponse.ResponseStatusCode = pSuccessfulCode
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetOpenAPISpec">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If pRequest.Params="" Set pRequest.Params="{}"
        //Separate internal behavioral params from other params
        Set tSC = ..GetRestParams(pRequest.Params,.tParams,.tBusParams)
        Set tParams.printResults = 0
		Set tParams.basePath = "openapi"
        Set tSC = ##class(apiPub.core.publisher).GetOASFromClass(tBusParams.%Get("className"),.tJsonResponse,tParams,pRequest.RequestURL)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Do pResponse.Body.Write(tJsonResponse.%ToJSON())
        Set pResponse.ContentType =  "application/json"
        Set pResponse.ResponseStatusCode = 200
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="ServiceRouter">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If pRequest.APIOperationId [ "Echo" Set tSC = ##class(apiPub.service.rest).GetEcho(pRequest,.pResponse)
        If pRequest.APIOperationId = "GetOpenAPISpec" Set tSC = ##class(apiPub.service.rest).GetOpenAPISpec(pRequest,.pResponse)
        If $Piece(pRequest.APIPath,"/",2) = "openapi",$Piece(pRequest.APIPath,"/",3)=pRequest.APIDomain Set pRequest.APIOperationId="CallIRISAPI"
        If pRequest.APIOperationId = "CallIRISAPI" Set tSC = ##class(apiPub.service.rest).CallIRISApi(pRequest,.pResponse)
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="HttpCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>pURLPaths...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try 
	{
		Set tRequestParams = {
        	"targetBaseURL":(..#TargetBaseURL)
			,"apiDomain":(..#APIDomain)
			,"callerInfo":(..#CallerInfo)
			,"reservedInboundParams":(..#ReservedInboundParams)
			,"beautifyJsonBodyRequest":(..#BeautifyJsonBodyRequest)
		}
		Set tSC = ..HttpRequestToMsgRequest(%request,tRequestParams,.tRequest, pURLPaths...)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		If (..#Traceable) {
			Set tSC = ..CallBS(..#TracerBSName,tRequest,.tResponse)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		} Else {
			Set tResponse = ##class(apiPub.service.message).%New()
			Set tSC = ..DirectMethodCall(tRequest,.tResponse)
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		Set tResponseParams = {
			"defaultForEmptyContentType":(..#DefaultForEmptyContentType)
			,"beautifyJsonBodyResponse":(..#BeautifyJsonBodyResponse)
		}
		Set tSC = ..TreatMsgResponse(tRequest,.tResponse,tResponseParams)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set tSC = ..MsgResponseToHttpResponse(tResponse)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
	}
	Catch(e) {
		Do ..ErrorHandler(e, .tSC)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="DirectMethodCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set tSC = ..ServiceRouter(pRequest,.pResponse)
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="ProxyHttpCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
		Set tRequestParams = {
        	"targetBaseURL":(..#TargetBaseURL)
			,"https":(..#HTTPS)
			,"ssl":(..#SSL)
			,"reservedOutboundParams":(..#ReservedOutboundParams)
		}
        Set tSC = ..MsgRequestToHttpRequest(pRequest,tRequestParams,.tHttpRequest,.tURL)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Set tSC = $Method(tHttpRequest,pRequest.HttpVerb,tURL)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
        Set tSC = ..HttpResponseToMsgResponse(tURL,tHttpRequest,pRequest,.pResponse)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Separate Behaviour params (starts with _) from Method/Request params

]]></Content>
</UDLText>

<Method name="GetRestParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRestParams:%String,*pParams:%Library.DynamicObject,*pRequestParams:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If '$Data(pRequestParams) Set pRequestParams = {}
        If '$Data(pParams) Set pParams = {}
        If pRestParams="" Set pRestParams="{}"
        Set tIter = {}.%FromJSON(pRestParams).%GetIterator()
        While tIter.%GetNext(.key,.value) {
            If $ZConvert(value,"L")="true" Set value = 1
            If $ZConvert(value,"L")="false" Set value = 0
            If $Extract(key,1,1)="_" {
                Do pParams.%Set($Extract(key,2,*),value)
            } Else {
                Do pRequestParams.%Set(key,value)
            }
        }
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="TreatMsgResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRequest:apiPub.service.message,&pResponse:apiPub.service.message,pParams:%Library.DynamicObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If '$Data(pParams) Set pParams={}
        Set pDefaultForEmptyContentType = $Select(pParams.defaultForEmptyContentType'="":pParams.defaultForEmptyContentType,1:"")
        Set pBeautifyJsonBodyResponse = $Select(pParams.beautifyJsonBodyResponse'="":pParams.beautifyJsonBodyResponse,1:0)
		If pResponse.ResponseReasonPhrase="" {
        	Set pResponse.ResponseReasonPhrase = ..GetResponseReasonPhrase(pResponse.ResponseStatusCode)
        }
        Set tFormatter = ##class(%JSON.Formatter).%New()
        If pResponse.ContentType="" Set pResponse.ContentType = pDefaultForEmptyContentType
        If $IsObject(pResponse.Body),pResponse.Body.SizeGet()>0{
            If (pBeautifyJsonBodyResponse),pResponse.ContentType'="",$Find($ZConvert(pResponse.ContentType,"L"),"json")>0,$Find(pResponse.Body.Read(),"{")>0 {
                Set pBodyResponse = ##class(%DynamicObject).%FromJSON(pResponse.Body)
                Set tSC = tFormatter.FormatToStream(pBodyResponse,pResponse.Body)
                If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            }
        }
        If $Data(pRequest),pRequest'="" {
            Set pResponse.APIPath = pRequest.APIPath
            Set pResponse.HttpVerb = pRequest.HttpVerb
            Set pResponse.CallerInfo = pRequest.CallerInfo
            Set pResponse.APIOperationId = pRequest.APIOperationId
            Set pResponse.APIDomain = pRequest.APIDomain
        }
	}
    Catch(e) {
		Set tSC = e.AsStatus()
    }
	Quit tSC
]]></Implementation>
</Method>

<Method name="HttpResponseToMsgResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>pURL:%String,pHttpRequest:%Net.HttpRequest,pMessageRequest:apiPub.service.message,*pMessageResponse:apiPub.service.message,*pBodyResponse:%Library.DynamicObject,*pHeadersResponse:%Library.DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set pResponse = pHttpRequest.HttpResponse
        Set pMessageResponse = ##class(apiPub.service.message).%New()
        Set pBodyResponse = {}
        Set tFormatter = ##class(%JSON.Formatter).%New()
        If $IsObject(pResponse.Data),pResponse.Data.SizeGet()>0{
			Do pResponse.Data.Rewind()
			While (pResponse.Data.AtEnd=0) {
				Do pMessageResponse.Body.Write(pResponse.Data.Read())
			}
        }
        Set tHeaders = {}
        Set tIdx = pResponse.GetNextHeader("")
        While tIdx'="" {
            Set tValue = pResponse.GetHeader(tIdx)
            If tValue'="" Do tHeaders.%Set(tIdx,tValue)
            Set tIdx = pResponse.GetNextHeader(tIdx)
        }
        If tHeaders.%Size()>0 {
            Set tHeaderStr = ""
            Set tSC = tFormatter.FormatToString(tHeaders.%ToJSON(),.tHeaderStr) 
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            Set pMessageResponse.Headers = tHeaderStr
            Set pHeadersResponse = tHeaders
        }
		Set tParams={}
		Set tIdx = pHttpRequest.NextParam("")
		While tIdx'="" {
            Set tValue = $Get(pHttpRequest.GetParam(tIdx))
            If tValue'="" Do tParams.%Set(tIdx,tValue)
			Set tIdx = pHttpRequest.NextParam(tIdx)
		}
        If tParams.%Size()>0 {
            Set tParamsStr = ""
            Set tSC = tFormatter.FormatToString(tParams.%ToJSON(),.tParamsStr) 
            If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
            Set pMessageResponse.Params = tParamsStr
        }
        Set pMessageResponse.RequestURL = pURL
        Set pMessageResponse.ResponseStatusCode = pResponse.StatusCode
        Set pMessageResponse.ResponseStatusLine = pResponse.StatusLine
        Set pMessageResponse.ResponseReasonPhrase = pResponse.ReasonPhrase
		Set pMessageResponse.ContentType = pResponse.ContentType
        Set pMessageResponse.ContentInfo = pResponse.ContentInfo
        Set pMessageResponse.ContentLength = pResponse.ContentLength
        Set pMessageResponse.ContentBoundary = pResponse.ContentBoundary
   }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
	Quit tSC
]]></Implementation>
</Method>

<Method name="MsgResponseToHttpResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		kill %objlasterror
		If pResponse.CharSet'="" Set %response.CharSet = pResponse.CharSet
		Set %response.ContentType = pResponse.ContentType
		Set %response.Status = pResponse.ResponseStatusCode
		If pResponse.Headers'="" {
			Set tJSONHeader = {}.%FromJSON(pResponse.Headers)
			Set tProp = tJSONHeader.%GetIterator()
			While (tProp.%GetNext(.key,.value)) {
		   		Do %response.SetHeader(key,value)
			}
		}
        If $IsObject(pResponse.Body),pResponse.Body.SizeGet()>0{
			Do pResponse.Body.Rewind()
			While (pResponse.Body.AtEnd=0) {
				Write pResponse.Body.Read()
			}
		}
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ErrorHandler">
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatusException:%Exception.StatusException,*pSC:%Status</FormalSpec>
<Implementation><![CDATA[
	Set %response.ContentType = ..#CONTENTTYPEJSON
	Set tMessage = $Select($$$ISERR(pStatusException.AsStatus()):$System.Status.GetOneErrorText(pStatusException.AsStatus()),1:"OK")
	Set tErrorCode = +$System.Status.GetErrorCodes(pStatusException.AsStatus())
	If $zConvert(tMessage,"L")["<bad request>" {
		Set %response.Status = ..#HTTP400BADREQUEST
	} ElseIf $zConvert(tMessage,"L")["<method not alowed>" {
		Set %response.Status = ..#HTTP405METHODNOTALLOWED
	} Else {
		Set %response.Status = ..#HTTP500INTERNALSERVERERROR
	}
	Set tErrorTrap={
			"statusCode":($$$ISOK(pStatusException.AsStatus())),
			"message":(tMessage),
			"errorCode":(tErrorCode)
	}
	Write tErrorTrap.%ToJSON()
	Set pSC = $$$OK
]]></Implementation>
</Method>

<Method name="GetResponseReasonPhrase">
<ClassMethod>1</ClassMethod>
<FormalSpec>statusCode:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        If statusCode = 200 Quit "OK"
        If statusCode = 201 Quit "Created"
        If statusCode = 202 Quit "Accepted"
        If statusCode = 204 Quit "No Content"
        If statusCode = 304 Quit "Not Modified"
        If statusCode = 400 Quit "Bad Request"
        If statusCode = 401 Quit "Unauthorized"
        If statusCode = 403 Quit "Forbidden"
        If statusCode = 404 Quit "Not Found"
        If statusCode = 405 Quit "Method Not Allowed"
        If statusCode = 406 Quit "Not Acceptable"
        If statusCode = 409 Quit "Conflict"
        If statusCode = 415 Quit "Unsupported Media Type"
        If statusCode = 422 Quit "Unprocessable Entity"
        If statusCode = 423 Quit "Locked"
        If statusCode = 500 Quit "Internal Server Error"
        Quit ""
]]></Implementation>
</Method>

<Method name="GetOperationId">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHttpVerb:%String,pOrigPath:%String,*pAPIOperationId:%String,*pPath:%String,*pParamName:%String,*pValue:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		Set pValue = ""
		Set pPath = pOrigPath
		Set pParamName = ""
		Set pAPIOperationId = pHttpVerb_" "_pOrigPath
		Set tPath = pHttpVerb_":"_pOrigPath
		Set tAPIMap = ..GetAPIMap()
		Set prop = tAPIMap.%GetIterator()
		While (prop.%GetNext(.key,.value)) {
			If tPath=key {
				Set pAPIOperationId = value
				Return tSC
			}
		}
		Set prop = tAPIMap.%GetIterator()
		While (prop.%GetNext(.key,.value)) {
			Set tPath = pHttpVerb_":"_pOrigPath
			If $Length(key,"/")=$Length(tPath,"/"),$Piece(tPath,":/",1) = $Piece(key,":/",1),key["{" {
				Set tKey = key
				Set tSec = 0
				While $Find(tKey,"{")>0 {
					Set tPieceRef = $Length($Piece(tKey,"{",1),"/")
					Set tVarKey = $Piece(tKey,"/",tPieceRef)
					Set tVarPath = $Piece(tPath,"/",tPieceRef)
					If tVarPath'="?" {
						Set pValue = pValue_$Select(pValue'="":"|"_tVarPath,1:tVarPath)
						Set pParamName = pParamName_$Select(pParamName'="":"|"_tVarKey,1:tVarKey) 
						Set pParamName=$Translate(pParamName,"{}","")
					}
					Set $Piece(tKey,"/",tPieceRef) = "?"
					Set $Piece(tPath,"/",tPieceRef) = "?"
					If tKey=tPath {
						Set pPath = "/"_$Piece(key,":/",2)
						Set pAPIOperationId = value
						Return tSC
					}
				}
				Set (pValue,pParamName) = ""
			}
		}
		Set tSC = $$$ERROR($$$GeneralError, "API Not Mapped "_pHttpVerb_":"_pOrigPath)
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="HttpRequestToMsgRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:%CSP.Request,pParams:%Library.DynamicObject,*pRestRequest:apiPub.service.message,pURLPaths...</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
        //If not Defined The Params Set the Default Values
        If '$Data(pParams) Set pParams={}
        Set pAPIDomain = $Select(pParams.apiDomain'="":pParams.apiDomain,1:"")
        Set pTargetBaseURL = $Select(pParams.targetBaseURL'="":pParams.targetBaseURL,1:"")
        Set pCallerInfo = $Select(pParams.callerInfo'="":pParams.callerInfo,1:"")
        Set pBeautifyJsonBodyRequest = $Select(pParams.beautifyJsonBodyRequest'="":pParams.beautifyJsonBodyRequest,1:0)
        Set pReservedInboundParams = $Select(pParams.reservedInboundParams'="":pParams.reservedInboundParams,1:"")
		If pAPIDomain = "" {
			Set tSC = $$$ERROR($$$GeneralError, "param apiDomain is Required")
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		}
		#Dim pRequest As %CSP.Request
		Set pRestRequest = ##Class(apiPub.service.message).%New()
		Set tFormatter = ##class(%JSON.Formatter).%New()
		Set tParams={}
		Set tIdx = pRequest.Next("")
		While tIdx'="" {
            Set tValue = $Get(pRequest.Data(tIdx,1))
            If tValue'="" Do tParams.%Set(tIdx,tValue)
			Set tIdx = pRequest.Next(tIdx)
		}
		Set tHeaders = {}
		Set tIdx = pRequest.NextCgiEnv("")
		While tIdx'="" {
            Set tValue = pRequest.CgiEnvs(tIdx)
            If tValue'="" Do tHeaders.%Set(tIdx,tValue)
			Set tIdx = pRequest.NextCgiEnv(tIdx)
		}
		If tHeaders.%Size()>0 {
			Set tStrHeaders = ""
			Set tSC = tFormatter.FormatToString(tHeaders.%ToJSON(),.tStrHeaders) 
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			Set pRestRequest.Headers = tStrHeaders
		}
		Set tCookies = {}
		Set tIdx = pRequest.NextCookie("")
		While tIdx'="" {
            Set tValue = pRequest.GetCookie(tIdx)
            If tValue'="" Do tCookies.%Set(tIdx,tValue)
			Set tIdx = pRequest.NextCookie(tIdx)
		}
		If tCookies.%Size()>0 {
			Set tStrCookies=""
			Set tSC = tFormatter.FormatToString(tCookies.%ToJSON(),.tStrCookies) 
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			Set pRestRequest.Cookies = tStrCookies 
		}
		Set tMimeData = {}
		Set tIdx = pRequest.NextMimeData("")
		While tIdx'="" {
            Set tValue = pRequest.GetMimeData(tIdx)
			If $Find($ClassName(tValue),"Stream")>0 {
				Do tValue.Rewind()
				Do tMimeData.%Set(tIdx,tValue.Read())
			} Else {
            	If tValue'="" Do tMimeData.%Set(tIdx,tValue)
			}
			Set tIdx = pRequest.NextMimeData(tIdx)
		}
		If tMimeData.%Size()>0 {
			Set tStrMimeData = ""
			Set tSC = tFormatter.FormatToString(tMimeData.%ToJSON(),.tStrMimeData) 
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			Set pRestRequest.MimeData = tStrMimeData
		}
		Set pRestRequest.HttpVerb = $ZConvert(tHeaders."REQUEST_METHOD","S")
		Set pRestRequest.ContentType = tHeaders."CONTENT_TYPE"
		Set pRestRequest.RequestURL = tHeaders."REQUEST_SCHEME"_"://"_tHeaders."HTTP_HOST"_tHeaders."REQUEST_URI"
		If $IsObject(pRequest.Content),pRequest.Content.SizeGet()>0{
			If (pBeautifyJsonBodyRequest),$Find($ZConvert(pRestRequest.ContentType,"L"),"json") {
				Set tSC = tFormatter.FormatToStream(pRequest.Content,pRestRequest.Body) 
				If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			} Else {
				Do pRequest.Content.Rewind()
				While (pRequest.Content.AtEnd=0) {
					Do pRestRequest.Body.Write(pRequest.Content.Read())
				}
			}
		}
		Set pRestRequest.APIDomain = pAPIDomain
		If pCallerInfo '= "" Set pRestRequest.CallerInfo = pCallerInfo
		If tHeaders."HTTP_USER_AGENT"'="" Set pRestRequest.CallerInfo = pRestRequest.CallerInfo_$Select(pCallerInfo'="":" (",1:"")_tHeaders."HTTP_USER_AGENT"_$Select(pCallerInfo'="":")",1:"")
		Set tOriginalPath = ""
		If $Data(pURLPaths) {
			For i=1:1:pURLPaths {
				Set tOriginalPath=tOriginalPath_"/"_pURLPaths(i)
			}
		}
		Set tSC = ..GetOperationId(pRestRequest.HttpVerb,tOriginalPath,.tAPIOperationId,.tPath,.tParamName,.tParamValue)
       	If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set pRestRequest.APIOperationId = tAPIOperationId
		Set pRestRequest.APIPath = tPath
		For i=1:1:$Length(tParamName,"|") {
			Set tParName = $Piece(tParamName,"|",i)
			Set tParVal = $Piece(tParamValue,"|",i)
			If tParVal'="" Do tParams.%Set(tParName,tParVal)
		}
		If pRestRequest.APIOperationId="CallIRISAPI" {
			Set pRestRequest.APIOperationId = tParams.%Get("operation")
			Set pRestRequest.APIDomain = tParams.%Get("serviceName")
			Set pRestRequest.APIPath = "/openapi/"_tParams.%Get("serviceName")_"/"_tParams.%Get("operation")
		}
		If pTargetBaseURL'="" Set pRestRequest.TargetBaseURL = pTargetBaseURL 
		For i=1:1:$Length(pReservedInboundParams,",") {
			Set tParName = $Piece(pReservedInboundParams,",",i)
			If tParName'="",tParams.%Get(tParName)'="" Do tParams.%Remove(tParName)
		}
		If tParams.%Size()>0 {
			Set tStrParams = ""
			Set tSC = tFormatter.FormatToString(tParams.%ToJSON(),.tStrParams) 
			If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
			Set pRestRequest.Params = tStrParams
		}
	}
	Catch(e)
	{
        Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="MsgRequestToHttpRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageRequest:apiPub.service.message,pParams:%Library.DynamicObject,*pHttpRequest:%Net.HttpRequest,*tURL:%String,pGetToken:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        If '$Data(pParams) Set pParams={}
        Set pTargetBaseURL = $Select(pParams.targetBaseURL'="":pParams.targetBaseURL,1:"")
        Set pHTTPS = $Select(pParams.https'="":pParams.https,1:0)
        Set pSSL = $Select(pParams.ssl'="":pParams.ssl,1:"")
        Set pReservedOutboundParams = $Select(pParams.reservedOutboundParams'="":pParams.reservedOutboundParams,1:"")

        Set tURL = ""
        Set pHttpRequest = ##class(%Net.HttpRequest).%New()
        Set pHttpRequest.Server = pTargetBaseURL
        Set pHttpRequest.Https = pHTTPS
        Set pHttpRequest.SSLConfiguration = pSSL
        Set tJSONHeaders = {}.%FromJSON(pMessageRequest.Headers)
        Set tProp = tJSONHeaders.%GetIterator()
        While (tProp.%GetNext(.key,.value)) {
            Do pHttpRequest.SetHeader(key,value)
        }
        Set tAPIPath = pMessageRequest.APIPath
		Set tJSONParams = {}
        If $Length(pMessageRequest.Params)>0 Set tJSONParams = {}.%FromJSON(pMessageRequest.Params)
        Set tProp = tJSONParams.%GetIterator()
        While (tProp.%GetNext(.key,.value)) {
            If $Find(pReservedOutboundParams,key)=0 {
                If $Find(tAPIPath,"{"_key_"}")>0 {
                    Set tAPIPath = $Replace(tAPIPath,"{"_key_"}",value)
                } Else {
                    Do pHttpRequest.SetParam(key,value)
                }
            }
        }
        Do pHttpRequest.EntityBody.Write(pMessageRequest.Body.Read())
        Set tTargetBaseURL = pMessageRequest.TargetBaseURL
        If tTargetBaseURL="" Set tTargetBaseURL = pTargetBaseURL
        Set tURL = $Select($Extract(tTargetBaseURL,*)="/":$Extract(tTargetBaseURL,1,*-1),1:tTargetBaseURL)_tAPIPath
    }
    Catch(e) {
        //Write $System.Status.DisplayError(e.AsStatus())
		Set tSC = e.AsStatus()
    }
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallBS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pBSName:%String="apiPub.tracer.bs",pRequest:apiPub.service.message,*pOutput:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{
		Set tSC = ##Class(Ens.Director).CreateBusinessService(pBSName,.tBS)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set tSC = tBS.ProcessInput(pRequest,.tResponse)
		If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set pOutput = tResponse
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/" Method="GET" Call="HttpCall"/>
<Route Url="/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path/:path" Method="GET" Call="HttpCall"/>
<Route Url="/" Method="POST" Call="HttpCall"/>
<Route Url="/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="POST" Call="HttpCall"/>
<Route Url="/" Method="PUT" Call="HttpCall"/>
<Route Url="/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="PUT" Call="HttpCall"/>
<Route Url="/" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="DELETE" Call="HttpCall"/>
<Route Url="/" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
<Route Url="/:path/:path/:path/:path/:path/:path/:path/:path" Method="PATCH" Call="HttpCall"/>
</Routes>
]]></Data>
</XData>
</Class>


<Class name="apiPub.tracer.bm">
<Super>Ens.BusinessMetric</Super>
<TimeChanged>65560,65155.931475</TimeChanged>
<TimeCreated>65560,65155.931475</TimeCreated>

<Property name="LastRun">
<Type>Ens.DataType.Metric</Type>
</Property>

<Property name="IncomingMessages">
<Type>Ens.DataType.Metric</Type>
<MultiDimensional>1</MultiDimensional>
<Parameter name="AUTOHISTORY" value="60"/>
</Property>

<Property name="Errors">
<Type>Ens.DataType.Metric</Type>
<MultiDimensional>1</MultiDimensional>
<Parameter name="AUTOHISTORY" value="60"/>
</Property>

<Property name="Expired">
<Type>Ens.DataType.Metric</Type>
<MultiDimensional>1</MultiDimensional>
<Parameter name="AUTOHISTORY" value="60"/>
</Property>

<Property name="Cube">
<Type>%String</Type>
<InitialExpression>"apiPub"</InitialExpression>
</Property>

<Property name="TimeForExpiration">
<Type>%Integer</Type>
<InitialExpression>120</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>Cube,TimeForExpiration</Default>
</Parameter>

<Method name="OnCalculateMetrics">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		// Check messages that were visited but were still running one more time
		Set tStmt = ##class(%SQL.Statement).%New()
		Set tSC = tStmt.%Prepare("Select ID,SessionId,Status,IsError From Ens.MessageHeader mh Where ID = ?")
		Set tExpired = 0
		Quit:$$$ISERR(tSC)
		Set tID = $Order(^apiPub.tracer(""),1,tDate)
		While tID {
			Set tRS = tStmt.%Execute(tID), tDelete = 1
			If tRS.%Next() {
				If (tRS.Status = $$$eMessageStatusCompleted) || (tRS.IsError) || (tRS.Status = $$$eMessageStatusError) || (tRS.Status = $$$eMessageStatusDiscarded) {
					Set tSC = ..SaveFact(tRS.ID)
					Quit:$$$ISERR(tSC)
				}
				ElseIf ($System.SQL.DATEDIFF("SS",tDate,$Horolog) > ..TimeForExpiration) {
					Set tExpired = tExpired + 1
					Set tSC = ..SaveFact(tRS.ID,1,..TimeForExpiration)
					Quit:$$$ISERR(tSC)
				}
				ElseIf (tRS.Status '= $$$eMessageStatusSuspended) {
					Set tDelete = 0
				}
			}
			If tDelete {
				Kill ^apiPub.tracer(tID)
			}
			Set tID = $Order(^apiPub.tracer(tID),1,tDate)
		}
		Quit:$$$ISERR(tSC)
		// Continue From Last Run
		Set tLastID = $Get(^apiPub.tracer,0)
		Set (tIncoming, tErrors) = 0
		Set tStmt = ##class(%SQL.Statement).%New()
		Set tSC = tStmt.%Prepare("Select ID,SessionId,Status,IsError From Ens.MessageHeader mh Where ID > ? And Type = ?")
		Quit:$$$ISERR(tSC)
		Set tRS = tStmt.%Execute(tLastID, $$$eMessageTypeRequest)
		While tRS.%Next() {
            If tRS.ID = tRS.SessionId { // Incoming Message
				Set tIncoming = tIncoming + 1
			}
            If tRS.IsError || (tRS.Status = $$$eMessageStatusError) {
                Set tSC = ..SaveFact(tRS.ID)
                Quit:$$$ISERR(tSC)
                Set tErrors = tErrors + 1
            }
            Else {
                If tRS.Status = $$$eMessageStatusCompleted {
                    Set tSC = ..SaveFact(tRS.ID)
                    Quit:$$$ISERR(tSC)
                }
                ElseIf tRS.Status '= $$$eMessageStatusAborted { // Still processing
                    Set ^apiPub.tracer(tRS.ID) = $Horolog
                }
                Else {
                    Set tSC = ..SaveFact(tRS.ID)
                    Quit:$$$ISERR(tSC)
                }
            }
            Set ^apiPub.tracer = tRS.ID
            Quit:$$$ISERR(tSC)
		}
	}
	Catch tError {
		Set tSC = tError.AsStatus()
	}
	If $$$ISOK(tSC) {
		Set ..LastRun = $ZDateTime($Horolog,3)
		Set ..IncomingMessages = tIncoming
		Set ..Errors = tErrors
		Set ..Expired = tExpired
		If ..Cube '= "" {
			Job ##class(%DeepSee.Utils).%SynchronizeCube(..Cube)
		}
	}		
	Quit tSC
]]></Implementation>
</Method>

<Method name="SaveFact">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMessageId:%Integer,pExpired:%Boolean=0,pTimeForExpiration:%Integer=120</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
        Set tMsgReq = ##class(Ens.MessageHeader).%OpenId(pMessageId)
        If $IsObject(tMsgReq) {
            Set tID = ""
            &sql(SELECT ID INTO :tID FROM apiPub_tracer.message where reqId = :pMessageId)
            Set tFact = ##class(apiPub.tracer.message).%New()
            If SQLCODE=0,tID'="" Set tFact = ##class(apiPub.tracer.message).%OpenId(tID)
            Set tFact.reqId = pMessageId
            Set tFact.sessionId = tMsgReq.SessionId
            Set tFact.intType = $Select(tMsgReq.SessionId=tMsgReq.%Id():1,tMsgReq.TargetBusinessType=3:3,1:2)
            Set tFact.intBusinessType = $Select(tMsgReq.SourceBusinessType=1:"BS",tMsgReq.SourceBusinessType=2:"BP",1:"BO")_"|"_$Select(tMsgReq.TargetBusinessType=1:"BS",tMsgReq.TargetBusinessType=2:"BP",1:"BO")
            Set tFact.intBusinessComponent = tMsgReq.SourceConfigName_"|"_tMsgReq.TargetConfigName
            Set tFact.reqDt = $System.SQL.DATEADD("HH",-3,tMsgReq.TimeCreated)
            Set tFact.timeToComplete = $System.SQL.DATEDIFF("MS", $System.SQL.DATEADD("HH",-3,tMsgReq.TimeCreated), $ZDT($H,3))/1000
            Set tFact.msgStatus = tMsgReq.Status
            Set tFact.respIsError = 0
            Set tFact.respErrorMsg = ""
            If tMsgReq.MessageBodyClassName = "apiPub.service.message" {
                Set tBodyReq = ##class(apiPub.service.message).%OpenId(tMsgReq.MessageBodyId)
                If $IsObject(tBodyReq) {
                    Set tFact.reqBodyId = tMsgReq.MessageBodyId
                    Set tFact.callerInfo = tBodyReq.CallerInfo
                    Set tFact.apiOperationId = tBodyReq.APIOperationId
                    Set tFact.apiDomain = tBodyReq.APIDomain
                    Set tFact.targetBaseURL = tBodyReq.TargetBaseURL
                    Set tFact.apiPath = tBodyReq.APIPath
                    Set tFact.reqHttpVerb = tBodyReq.HttpVerb
                    Set tFact.reqHttpURL = tBodyReq.RequestURL
                    Set tFact.reqHttpParams = tBodyReq.Params
                    Set tFact.reqHttpHeaders = tBodyReq.Headers
                    Set tFact.reqHttpBody = tBodyReq.Body
                }
            }
            If tMsgReq.CorrespondingMessageId'="" {
                Set tMsgResp = ##class(Ens.MessageHeader).%OpenId(tMsgReq.CorrespondingMessageId)
                If $IsObject(tMsgResp) {
                    Set tFact.intBusinessType = $Select(tMsgReq.SourceBusinessType=1:"BS",tMsgReq.SourceBusinessType=2:"BP",1:"BO")_"|"_$Select(tMsgResp.SourceBusinessType=1:"BS",tMsgResp.SourceBusinessType=2:"BP",1:"BO")
                    Set tFact.intBusinessComponent = tMsgReq.SourceConfigName_"|"_tMsgResp.SourceConfigName
                    Set tFact.respDt = $System.SQL.DATEADD("HH",-3,tMsgResp.TimeCreated)
                    If tMsgResp.TimeProcessed'="" Set tFact.timeToComplete = $System.SQL.DATEDIFF("MS", tMsgReq.TimeCreated, tMsgResp.TimeProcessed)/1000
                    Set tFact.msgStatus = tMsgResp.Status
                    Set tFact.respIsError = tMsgResp.IsError
                    If tMsgResp.ErrorStatus'=$$$OK {
                        Set tErrorText = $System.Status.GetErrorText(tMsgResp.ErrorStatus)
                        Set tFact.respErrorMsg = $Select($Find(tErrorText," > ")>0:$Piece(tErrorText," > ",2),1:tErrorText)
                        Set tFact.respErrorCode = $System.Status.GetErrorCodes(tMsgResp.ErrorStatus)
                    }
                    If tMsgResp.MessageBodyClassName = "apiPub.service.message" {
                        Set tBodyResp = ##class(apiPub.service.message).%OpenId(tMsgResp.MessageBodyId)
                        If $IsObject(tBodyResp) {
                            Set tFact.respBodyId = tMsgResp.MessageBodyId
                            Set tFact.respHttpHeaders = tBodyResp.Headers
                            Set tFact.respHttpBody = tBodyResp.Body
                            Set tFact.respHttpURL = tBodyResp.RequestURL
                            Set tFact.respHttpStatusCode = tBodyResp.ResponseStatusCode
                            Set tFact.respHttpStatusLine = tBodyResp.ResponseStatusLine
                            Set tFact.respHttpReasonPhrase = tBodyResp.ResponseReasonPhrase
                        }
                    }
                    //Treat Response Status
                    //**********************************************
                    Set tFact.responseStatus = 0 //Not Defined
                    If tFact.respIsError {
                        Set tFact.responseStatus = 3 //Error
                        If +tFact.respErrorCode=0,tFact.respErrorMsg["#",tFact.respErrorMsg[":" {
                            Set tFact.respErrorCode = $Piece($Piece(tFact.respErrorMsg,"#",2),":",1)
                        }
                        If +tFact.respErrorCode>=83,+tFact.respErrorCode<=5001 Set tFact.responseStatus = 2 // Business Error
                    } ElseIf tFact.respHttpStatusCode'="" {
                        Set tFact.responseStatus = 1 //Success
                        If tFact.respHttpStatusCode>202 {
                            Set tFact.responseStatus = 3 
                            Set tFact.respErrorMsg = tFact.respHttpStatusLine_" "_tFact.respHttpReasonPhrase
                            If tFact.respErrorCode = "" Set tFact.respErrorCode = tFact.respHttpStatusCode
                        }
                    }
                }
            }
            //Treat Status
            //**********************************************
            If pExpired {
                Set tFact.status = 4 // Expired
                Set tFact.timeToComplete = $System.SQL.DATEDIFF("MS",tMsgReq.TimeCreated, $ZDateTime($Horolog,3))/1000 // Expired
            }
            Else {
                If tMsgReq.Status = $$$eMessageStatusCompleted {
                    Set tFact.status = 1
                }
                ElseIf tMsgReq.Status = $$$eMessageStatusError || tMsgReq.IsError {
                    Set tFact.status = 2
                }
                Else {
                    Set tFact.status = 3 // Aborted
                }
                If tMsgReq.TimeProcessed'="" Set tFact.timeToComplete = $System.SQL.DATEDIFF("MS", tMsgReq.TimeCreated, tMsgReq.TimeProcessed)/1000
            }
            Set tSC = tFact.%Save()
		    Quit:$$$ISERR(tSC)
            Write "Saving...",pMessageId,!
        }
	}
	Catch(e)
	{
		Write $System.Status.DisplayError(e.AsStatus())
        Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetByLineKey">
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSON:%Library.DynamicObject,pKey:%String,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(apiPub.core.jsonBuilder).GetByLineKey(pJSON,pKey,pKeyDelimiter)
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.tracer.bo">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65645,61625.282631</TimeChanged>
<TimeCreated>65560,65586.225121</TimeCreated>

<Property name="DefaultForEmptyContentType">
<Type>%String</Type>
<InitialExpression>"application/json"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="BeautifyJsonBodyResponse">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>DefaultForEmptyContentType:APIConfig,BeautifyJsonBodyResponse:APIConfig,</Default>
</Parameter>

<Method name="BORouter">
<FormalSpec>pRequest:apiPub.service.message,*pResponse:apiPub.service.message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK 
    Try {
        Set pResponse = ##class(apiPub.service.message).%New()
        Set tSC = $ClassMethod(pRequest.ServiceClass,"ServiceRouter",pRequest,.pResponse)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
		Set tResponseParams = {
            "defaultForEmptyContentType":(..DefaultForEmptyContentType)
			,"beautifyJsonBodyResponse":(..BeautifyJsonBodyResponse)
        }
        Set tSC = $ClassMethod(pRequest.ServiceClass,"TreatMsgResponse",pRequest,.pResponse,tResponseParams)
        If 'tSC { Throw ##Class(%Exception.StatusException).CreateFromStatus(tSC) }
    }
    Catch(e) {
		Set tSC = e.AsStatus()
    }
    Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
    <MapItem MessageType="apiPub.service.message">
        <Method>BORouter</Method>
    </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="apiPub.tracer.bs">
<Super>Ens.BusinessService</Super>
<TimeChanged>65560,64604.373316</TimeChanged>
<TimeCreated>65560,64604.373316</TimeCreated>

<Property name="TargetConfigName">
<Type>Ens.DataType.ConfigName</Type>
<InitialExpression>"apiPub.tracer.bo"</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default><![CDATA[TargetConfigName:Basic:selector?context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId},]]></Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:apiPub.service.message,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{	
		If ..TargetConfigName="" {
			Set tSC = $$$ERROR($$$GeneralError, "Message not processed - TargetConfigName setting not defined on business host")
			Quit
		}
		Set tSC = ..SendRequestSync(..TargetConfigName,pInput,.pOutput)
	}
	Catch(e)
	{
		Set tSC = e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.tracer.cube">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65645,50714.658267</TimeChanged>
<TimeCreated>65560,64164.224115</TimeCreated>
<DependsOn>apiPub.tracer.message</DependsOn>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="apiPub" displayName="apiPub Monitor" disabled="false" abstract="false" sourceClass="apiPub.tracer.message" actionClass="apiPub.tracer.kpi" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0" disableListingGroups="false">
  <dimension name="Date" disabled="false" hasAll="false" allCaption="All Date" allDisplayName="Date" sourceProperty="reqDt" type="time" calendar="gregorian" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="Year" disabled="false" timeFunction="Year" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="Month" disabled="false" timeFunction="MonthYear" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="Day" disabled="false" timeFunction="DayMonthYear" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="Hour" disabled="false" timeFunction="HourNumber" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="Minute" disabled="false" timeFunction="MinuteNumber" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="IntType" disabled="false" hasAll="false" allCaption="All IntType" allDisplayName="Interact Type" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="intType" disabled="false" sourceProperty="intType" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="intBusinessType" disabled="false" sourceProperty="intBusinessType" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="intBusinessComponent" disabled="false" sourceProperty="intBusinessComponent" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="SourceComponent" disabled="false" hasAll="false" allCaption="All Source Component" allDisplayName="Source Component" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="sourceType" disabled="false" sourceExpression="$Piece(%source.intBusinessType,&quot;|&quot;,1)" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="sourceComponentName" disabled="false" sourceExpression="$Piece(%source.intBusinessComponent,&quot;|&quot;,1)" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="TargetComponent" disabled="false" hasAll="false" allCaption="All Target Component" allDisplayName="Target Component" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="targetType" disabled="false" sourceExpression="$Piece(%source.intBusinessType,&quot;|&quot;,2)" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="targetComponentName" disabled="false" sourceExpression="$Piece(%source.intBusinessComponent,&quot;|&quot;,2)" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="MsgStatus" disabled="false" hasAll="false" allCaption="All MsgStatus" allDisplayName="MsgStatus" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="MsgStatus" disabled="false" sourceProperty="msgStatus" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="InteropStatus" disabled="false" hasAll="false" allCaption="All InteropStatus" allDisplayName="InteropStatus" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="InteropStatus" disabled="false" sourceProperty="status" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="ResponseStatus" disabled="false" hasAll="false" allCaption="All ResponseStatus" allDisplayName="ResponseStatus" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="ResponseStatus" disabled="false" sourceProperty="responseStatus" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="API" disabled="false" hasAll="false" allCaption="All API" allDisplayName="API" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="APIDomain" disabled="false" sourceProperty="apiDomain" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="APIOperationId" disabled="false" sourceProperty="apiOperationId" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="ErrorMessage" disabled="false" hasAll="false" allCaption="All ErrorMessage" allDisplayName="ErrorMessage" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="ErrorCode" disabled="false" sourceProperty="respErrorCode" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="ErrorMessage" disabled="false" sourceProperty="respErrorMsg" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="CallerInfo" disabled="false" hasAll="false" allCaption="All CallerInfo" allDisplayName="CallerInfo" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="CallerInfo" disabled="false" sourceProperty="callerInfo" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Http Params" disabled="false" hasAll="false" allCaption="All Http Params" allDisplayName="Http Params" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="Http Params" disabled="false" sourceProperty="reqHttpParams" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Http Response" disabled="false" hasAll="false" allCaption="All Http Response" allDisplayName="Http Response" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="Status Code" disabled="false" sourceProperty="respHttpStatusCode" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="Reason Phrase" disabled="false" sourceProperty="respHttpReasonPhrase" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="Status Line" disabled="false" sourceProperty="respHttpStatusLine" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <measure name="AverageTime" displayName="Average Time" disabled="false" sourceProperty="timeToComplete" aggregate="AVG" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="MaxTime" displayName="Maximum Time" disabled="false" sourceProperty="timeToComplete" aggregate="MAX" type="number" hidden="false" searchable="true">
  </measure>
  <measure name="MinTime" displayName="Minimum Time" disabled="false" sourceProperty="timeToComplete" aggregate="MIN" type="number" hidden="false" searchable="false">
  </measure>
  <listing name="SessionIDs" displayName="SessionIDs" disabled="false" listingType="table" fieldList="sessionId,reqDt,apiDomain,apiOperationId,apiPath,targetBaseURL,timeToComplete,intBusinessType,respErrorMsg" orderBy="reqDt DESC">
  </listing>
  <listing name="UltimasMensagens" disabled="false" listingType="table" fieldList="sessionId,apiDomain,apiOperationId,apiPath,reqDt,respErrorMsg,respHttpStatusCode,respHttpReasonPhrase,respHttpStatusLine,reqHttpParams,callerInfo,targetBaseURL,timeToComplete,intBusinessType" orderBy="reqDt DESC">
  </listing>
</cube>
]]></Data>
</XData>

<Parameter name="DOMAIN">
</Parameter>
</Class>


<Class name="apiPub.tracer.kpi">
<Super>%DeepSee.KPI</Super>
<TimeChanged>65561,58206.333541</TimeChanged>
<TimeCreated>65560,63694.238786</TimeCreated>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi"
 name="apiPub Tracer" sourceType="mdx"
 caption="apiPub Tracer"
>
<action name="LinkToEnsembleTrace" displayName="Goes to Ensemble Trace from a message" />
</kpi>
]]></Data>
</XData>

<Method name="%OnDashboardAction">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If ((pAction = "LinkToEnsembleTrace")) {
        Set pContext.command = "newWindow:EnsPortal.VisualTrace.zen?SESSIONID="_pContext.valueList_";"
    }
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="apiPub.tracer.message">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65560,63521.797418</TimeChanged>
<TimeCreated>65560,63521.326714</TimeCreated>

<Parameter name="DSTIME">
<Description>
Used to allow synchronization of a Cube by DeepSee</Description>
<Default>AUTO</Default>
</Parameter>

<Index name="reqIdIDX">
<Properties>reqId</Properties>
</Index>

<Index name="sessionIdIDX">
<Properties>sessionId</Properties>
</Index>

<Index name="apiDomainIDX">
<Properties>apiDomain</Properties>
</Index>

<Index name="apiOperationIdIDX">
<Properties>apiOperationId</Properties>
</Index>

<Index name="apiPathIDX">
<Properties>apiPath</Properties>
</Index>

<Property name="reqId">
<Type>%Integer</Type>
</Property>

<Property name="sessionId">
<Type>%Integer</Type>
</Property>

<Property name="intType">
<Type>%Integer</Type>
<Parameter name="DISPLAYLIST" value=",Inbound,Business,Outbound,"/>
<Parameter name="VALUELIST" value=",1,2,3"/>
</Property>

<Property name="intBusinessType">
<Type>%String</Type>
</Property>

<Property name="intBusinessComponent">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="reqDt">
<Type>%TimeStamp</Type>
</Property>

<Property name="respDt">
<Type>%TimeStamp</Type>
</Property>

<Property name="timeToComplete">
<Type>%Numeric</Type>
<Parameter name="SCALE" value="3"/>
</Property>

<Property name="status">
<Type>%Integer</Type>
<Parameter name="DISPLAYLIST" value=",Completed,Error,Aborted,Expired"/>
<Parameter name="VALUELIST" value=",1,2,3,4"/>
</Property>

<Property name="msgStatus">
<Type>%Integer</Type>
<Parameter name="DISPLAYLIST" value=",Created,Queued,Delivered,Discarded,Suspended,Deferred,Aborted,Error,Completed"/>
<Parameter name="VALUELIST" value=",1,2,3,4,5,6,7,8,9"/>
</Property>

<Property name="responseStatus">
<Type>%Integer</Type>
<Parameter name="DISPLAYLIST" value=",ND,Success,BusinessError,Error"/>
<Parameter name="VALUELIST" value=",0,1,2,3"/>
</Property>

<Property name="respIsError">
<Type>%Boolean</Type>
</Property>

<Property name="respErrorCode">
<Type>%String</Type>
</Property>

<Property name="respErrorMsg">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="callerInfo">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="apiDomain">
<Type>%String</Type>
</Property>

<Property name="apiOperationId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="apiPath">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="targetBaseURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="reqHttpVerb">
<Type>%String</Type>
</Property>

<Property name="reqHttpURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="reqHttpParams">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="respHttpURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="respHttpStatusCode">
<Type>%Integer</Type>
</Property>

<Property name="respHttpStatusLine">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="respHttpReasonPhrase">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="reqHttpHeaders">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="reqHttpBody">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="respHttpHeaders">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="respHttpBody">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="reqBodyId">
<Type>%Integer</Type>
</Property>

<Property name="respBodyId">
<Type>%Integer</Type>
</Property>

<Method name="GetJSONPropName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID,propName:%String,pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Set tObj = ..%OpenId(pID)
        Set tRef = tObj.GetJSONProp(propName,pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<Method name="GetJSONProp">
<FormalSpec>propName:%String,pLineKey,pKeyDelimiter:%String="."</FormalSpec>
<ReturnType>%Library.DynamicObject</ReturnType>
<Implementation><![CDATA[
    Set tRef=""
    Try
	{
        Set tProp = $Property($this, propName)
        If $IsObject(tProp),$Find($ClassName(tProp),"Stream") {
            Do tProp.Rewind()
            If $Length(tProp.Read())=0 Return ""
            Do tProp.Rewind()
        } Else {
            If $Length(tProp)=0 Return ""
        }
        Set tJson = {}.%FromJSON(tProp)
        Set tRef = ##class(APITracer.utils.json).GetByLineKey(tJson,pLineKey,pKeyDelimiter)
    }
	Catch(e)
	{
	}
    Quit tRef
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Property reqHUserAgent As %String [ SqlComputeCode = {set {*}=##class(APITracer.monitor.message).GetJSONPropName({ID},"reqHttpHeaders","HTTP_USER_AGENT")}, SqlComputed, Transient ];

Property reqHPath As %String [ SqlComputeCode = {set {*}=##class(APITracer.monitor.message).GetJSONPropName({ID},"reqHttpHeaders","SCRIPT_NAME")}, SqlComputed, Transient ];

Property reqHQueryString As %String [ SqlComputeCode = {set {*}=##class(APITracer.monitor.message).GetJSONPropName({ID},"reqHttpHeaders","QUERY_STRING")}, SqlComputed, Transient ];
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^apiPub.tracer.messageD</DataLocation>
<DefaultData>messageDefaultData</DefaultData>
<IdLocation>^apiPub.tracer.messageD</IdLocation>
<IndexLocation>^apiPub.tracer.messageI</IndexLocation>
<StreamLocation>^apiPub.tracer.messageS</StreamLocation>
<Data name="messageDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>reqId</Value>
</Value>
<Value name="3">
<Value>sessionId</Value>
</Value>
<Value name="4">
<Value>intType</Value>
</Value>
<Value name="5">
<Value>intBusinessType</Value>
</Value>
<Value name="6">
<Value>intBusinessComponent</Value>
</Value>
<Value name="7">
<Value>reqDt</Value>
</Value>
<Value name="8">
<Value>respDt</Value>
</Value>
<Value name="9">
<Value>timeToComplete</Value>
</Value>
<Value name="10">
<Value>status</Value>
</Value>
<Value name="11">
<Value>msgStatus</Value>
</Value>
<Value name="12">
<Value>responseStatus</Value>
</Value>
<Value name="13">
<Value>respIsError</Value>
</Value>
<Value name="14">
<Value>respErrorCode</Value>
</Value>
<Value name="15">
<Value>respErrorMsg</Value>
</Value>
<Value name="16">
<Value>callerInfo</Value>
</Value>
<Value name="17">
<Value>apiDomain</Value>
</Value>
<Value name="18">
<Value>apiOperationId</Value>
</Value>
<Value name="19">
<Value>apiPath</Value>
</Value>
<Value name="20">
<Value>targetBaseURL</Value>
</Value>
<Value name="21">
<Value>reqHttpVerb</Value>
</Value>
<Value name="22">
<Value>reqHttpURL</Value>
</Value>
<Value name="23">
<Value>reqHttpParams</Value>
</Value>
<Value name="24">
<Value>respHttpURL</Value>
</Value>
<Value name="25">
<Value>respHttpStatusCode</Value>
</Value>
<Value name="26">
<Value>respHttpStatusLine</Value>
</Value>
<Value name="27">
<Value>respHttpReasonPhrase</Value>
</Value>
<Value name="28">
<Value>reqHttpHeaders</Value>
</Value>
<Value name="29">
<Value>reqHttpBody</Value>
</Value>
<Value name="30">
<Value>respHttpHeaders</Value>
</Value>
<Value name="31">
<Value>respHttpBody</Value>
</Value>
<Value name="32">
<Value>reqBodyId</Value>
</Value>
<Value name="33">
<Value>respBodyId</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
